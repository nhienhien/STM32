
MicroF4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ad4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08005c6c  08005c6c  00015c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cd4  08005cd4  00020470  2**0
                  CONTENTS
  4 .ARM          00000008  08005cd4  08005cd4  00015cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005cdc  08005cdc  00020470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cdc  08005cdc  00015cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ce0  08005ce0  00015ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000470  20000000  08005ce4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f8  20000470  08006154  00020470  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a68  08006154  00020a68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020470  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008073  00000000  00000000  000204a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c2b  00000000  00000000  00028513  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000760  00000000  00000000  0002a140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000678  00000000  00000000  0002a8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000153d3  00000000  00000000  0002af18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009f75  00000000  00000000  000402eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082211  00000000  00000000  0004a260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cf  00000000  00000000  000cc471  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e04  00000000  00000000  000cc540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000470 	.word	0x20000470
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005c54 	.word	0x08005c54

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000474 	.word	0x20000474
 80001d4:	08005c54 	.word	0x08005c54

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <FifoWrite>:
uint16_t fifobuf[256];
uint8_t fifo_w_ptr = 0;
uint8_t fifo_r_ptr = 0;
uint8_t fifo_read_enabled = 0;

void FifoWrite(uint16_t data) {
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	80fb      	strh	r3, [r7, #6]
	fifobuf[fifo_w_ptr] = data;
 80004e6:	4b09      	ldr	r3, [pc, #36]	; (800050c <FifoWrite+0x30>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	4619      	mov	r1, r3
 80004ec:	4a08      	ldr	r2, [pc, #32]	; (8000510 <FifoWrite+0x34>)
 80004ee:	88fb      	ldrh	r3, [r7, #6]
 80004f0:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
	fifo_w_ptr++;
 80004f4:	4b05      	ldr	r3, [pc, #20]	; (800050c <FifoWrite+0x30>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	3301      	adds	r3, #1
 80004fa:	b2da      	uxtb	r2, r3
 80004fc:	4b03      	ldr	r3, [pc, #12]	; (800050c <FifoWrite+0x30>)
 80004fe:	701a      	strb	r2, [r3, #0]
}
 8000500:	bf00      	nop
 8000502:	370c      	adds	r7, #12
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr
 800050c:	20000a0c 	.word	0x20000a0c
 8000510:	2000080c 	.word	0x2000080c

08000514 <FifoRead>:

uint16_t FifoRead() {
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
	uint16_t val = fifobuf[fifo_r_ptr];
 800051a:	4b0a      	ldr	r3, [pc, #40]	; (8000544 <FifoRead+0x30>)
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	461a      	mov	r2, r3
 8000520:	4b09      	ldr	r3, [pc, #36]	; (8000548 <FifoRead+0x34>)
 8000522:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000526:	80fb      	strh	r3, [r7, #6]
	fifo_r_ptr++;
 8000528:	4b06      	ldr	r3, [pc, #24]	; (8000544 <FifoRead+0x30>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	3301      	adds	r3, #1
 800052e:	b2da      	uxtb	r2, r3
 8000530:	4b04      	ldr	r3, [pc, #16]	; (8000544 <FifoRead+0x30>)
 8000532:	701a      	strb	r2, [r3, #0]
	return val;
 8000534:	88fb      	ldrh	r3, [r7, #6]
}
 8000536:	4618      	mov	r0, r3
 8000538:	370c      	adds	r7, #12
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20000a0d 	.word	0x20000a0d
 8000548:	2000080c 	.word	0x2000080c

0800054c <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback (I2S_HandleTypeDef *hi2s) {
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	txstate = 1;
 8000554:	4b04      	ldr	r3, [pc, #16]	; (8000568 <HAL_I2S_TxHalfCpltCallback+0x1c>)
 8000556:	2201      	movs	r2, #1
 8000558:	701a      	strb	r2, [r3, #0]
}
 800055a:	bf00      	nop
 800055c:	370c      	adds	r7, #12
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	20000808 	.word	0x20000808

0800056c <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback (I2S_HandleTypeDef *hi2s) {
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	txstate = 2;
 8000574:	4b04      	ldr	r3, [pc, #16]	; (8000588 <HAL_I2S_TxCpltCallback+0x1c>)
 8000576:	2202      	movs	r2, #2
 8000578:	701a      	strb	r2, [r3, #0]
}
 800057a:	bf00      	nop
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	20000808 	.word	0x20000808

0800058c <HAL_I2S_RxHalfCpltCallback>:

void HAL_I2S_RxHalfCpltCallback (I2S_HandleTypeDef *hi2s) {
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	rxstate = 1;
 8000594:	4b04      	ldr	r3, [pc, #16]	; (80005a8 <HAL_I2S_RxHalfCpltCallback+0x1c>)
 8000596:	2201      	movs	r2, #1
 8000598:	701a      	strb	r2, [r3, #0]
}
 800059a:	bf00      	nop
 800059c:	370c      	adds	r7, #12
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000809 	.word	0x20000809

080005ac <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback (I2S_HandleTypeDef *hi2s) {
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	rxstate = 2;
 80005b4:	4b04      	ldr	r3, [pc, #16]	; (80005c8 <HAL_I2S_RxCpltCallback+0x1c>)
 80005b6:	2202      	movs	r2, #2
 80005b8:	701a      	strb	r2, [r3, #0]
}
 80005ba:	bf00      	nop
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000809 	.word	0x20000809

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b086      	sub	sp, #24
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f000 fcf1 	bl	8000fb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f8bb 	bl	8000750 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005da:	f000 f921 	bl	8000820 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005de:	f000 f9df 	bl	80009a0 <MX_GPIO_Init>
  MX_DMA_Init();
 80005e2:	f000 f9b5 	bl	8000950 <MX_DMA_Init>
  MX_I2S2_Init();
 80005e6:	f000 f957 	bl	8000898 <MX_I2S2_Init>
  MX_I2S3_Init();
 80005ea:	f000 f983 	bl	80008f4 <MX_I2S3_Init>
  MX_CRC_Init();
 80005ee:	f000 f937 	bl	8000860 <MX_CRC_Init>
  MX_PDM2PCM_Init();
 80005f2:	f002 ffb7 	bl	8003564 <MX_PDM2PCM_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2S_Transmit_DMA(&hi2s3, &txBuf[0], 64);
 80005f6:	2240      	movs	r2, #64	; 0x40
 80005f8:	4949      	ldr	r1, [pc, #292]	; (8000720 <main+0x154>)
 80005fa:	484a      	ldr	r0, [pc, #296]	; (8000724 <main+0x158>)
 80005fc:	f001 fcca 	bl	8001f94 <HAL_I2S_Transmit_DMA>
  HAL_I2S_Receive_DMA(&hi2s2, &pdmRxBuf[0],64);
 8000600:	2240      	movs	r2, #64	; 0x40
 8000602:	4949      	ldr	r1, [pc, #292]	; (8000728 <main+0x15c>)
 8000604:	4849      	ldr	r0, [pc, #292]	; (800072c <main+0x160>)
 8000606:	f001 fd6d 	bl	80020e4 <HAL_I2S_Receive_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (rxstate==1) {
 800060a:	4b49      	ldr	r3, [pc, #292]	; (8000730 <main+0x164>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2b01      	cmp	r3, #1
 8000610:	d122      	bne.n	8000658 <main+0x8c>
		PDM_Filter(&pdmRxBuf[0],&MidBuffer[0], &PDM1_filter_handler);
 8000612:	4a48      	ldr	r2, [pc, #288]	; (8000734 <main+0x168>)
 8000614:	4948      	ldr	r1, [pc, #288]	; (8000738 <main+0x16c>)
 8000616:	4844      	ldr	r0, [pc, #272]	; (8000728 <main+0x15c>)
 8000618:	f004 fe9a 	bl	8005350 <PDM_Filter>
		for (int i=0; i<16;i++) { FifoWrite(MidBuffer[i]); }
 800061c:	2300      	movs	r3, #0
 800061e:	617b      	str	r3, [r7, #20]
 8000620:	e009      	b.n	8000636 <main+0x6a>
 8000622:	4a45      	ldr	r2, [pc, #276]	; (8000738 <main+0x16c>)
 8000624:	697b      	ldr	r3, [r7, #20]
 8000626:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff ff56 	bl	80004dc <FifoWrite>
 8000630:	697b      	ldr	r3, [r7, #20]
 8000632:	3301      	adds	r3, #1
 8000634:	617b      	str	r3, [r7, #20]
 8000636:	697b      	ldr	r3, [r7, #20]
 8000638:	2b0f      	cmp	r3, #15
 800063a:	ddf2      	ble.n	8000622 <main+0x56>
		if (fifo_w_ptr-fifo_r_ptr > 128) fifo_read_enabled=1;
 800063c:	4b3f      	ldr	r3, [pc, #252]	; (800073c <main+0x170>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	461a      	mov	r2, r3
 8000642:	4b3f      	ldr	r3, [pc, #252]	; (8000740 <main+0x174>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	1ad3      	subs	r3, r2, r3
 8000648:	2b80      	cmp	r3, #128	; 0x80
 800064a:	dd02      	ble.n	8000652 <main+0x86>
 800064c:	4b3d      	ldr	r3, [pc, #244]	; (8000744 <main+0x178>)
 800064e:	2201      	movs	r2, #1
 8000650:	701a      	strb	r2, [r3, #0]
		rxstate=0;
 8000652:	4b37      	ldr	r3, [pc, #220]	; (8000730 <main+0x164>)
 8000654:	2200      	movs	r2, #0
 8000656:	701a      	strb	r2, [r3, #0]

	  }

	  if (rxstate==2) {
 8000658:	4b35      	ldr	r3, [pc, #212]	; (8000730 <main+0x164>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b02      	cmp	r3, #2
 800065e:	d117      	bne.n	8000690 <main+0xc4>
		PDM_Filter(&pdmRxBuf[64],&MidBuffer[0], &PDM1_filter_handler);
 8000660:	4a34      	ldr	r2, [pc, #208]	; (8000734 <main+0x168>)
 8000662:	4935      	ldr	r1, [pc, #212]	; (8000738 <main+0x16c>)
 8000664:	4838      	ldr	r0, [pc, #224]	; (8000748 <main+0x17c>)
 8000666:	f004 fe73 	bl	8005350 <PDM_Filter>
		for (int i=0; i<16;i++) { FifoWrite(MidBuffer[i]); }
 800066a:	2300      	movs	r3, #0
 800066c:	613b      	str	r3, [r7, #16]
 800066e:	e009      	b.n	8000684 <main+0xb8>
 8000670:	4a31      	ldr	r2, [pc, #196]	; (8000738 <main+0x16c>)
 8000672:	693b      	ldr	r3, [r7, #16]
 8000674:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff ff2f 	bl	80004dc <FifoWrite>
 800067e:	693b      	ldr	r3, [r7, #16]
 8000680:	3301      	adds	r3, #1
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	693b      	ldr	r3, [r7, #16]
 8000686:	2b0f      	cmp	r3, #15
 8000688:	ddf2      	ble.n	8000670 <main+0xa4>
		rxstate=0;
 800068a:	4b29      	ldr	r3, [pc, #164]	; (8000730 <main+0x164>)
 800068c:	2200      	movs	r2, #0
 800068e:	701a      	strb	r2, [r3, #0]

	  }

	  if (txstate==1) {
 8000690:	4b2e      	ldr	r3, [pc, #184]	; (800074c <main+0x180>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b01      	cmp	r3, #1
 8000696:	d11e      	bne.n	80006d6 <main+0x10a>
		if (fifo_read_enabled==1)
 8000698:	4b2a      	ldr	r3, [pc, #168]	; (8000744 <main+0x178>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d117      	bne.n	80006d0 <main+0x104>
		{
			for (int i=0; i<64;i=i+4) {
 80006a0:	2300      	movs	r3, #0
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	e011      	b.n	80006ca <main+0xfe>
				uint16_t data = FifoRead();
 80006a6:	f7ff ff35 	bl	8000514 <FifoRead>
 80006aa:	4603      	mov	r3, r0
 80006ac:	80fb      	strh	r3, [r7, #6]
				txBuf[i] = data;
 80006ae:	491c      	ldr	r1, [pc, #112]	; (8000720 <main+0x154>)
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	88fa      	ldrh	r2, [r7, #6]
 80006b4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				txBuf[i+2] = data;
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	3302      	adds	r3, #2
 80006bc:	4918      	ldr	r1, [pc, #96]	; (8000720 <main+0x154>)
 80006be:	88fa      	ldrh	r2, [r7, #6]
 80006c0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for (int i=0; i<64;i=i+4) {
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	3304      	adds	r3, #4
 80006c8:	60fb      	str	r3, [r7, #12]
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	2b3f      	cmp	r3, #63	; 0x3f
 80006ce:	ddea      	ble.n	80006a6 <main+0xda>
			}
		}
		txstate=0;
 80006d0:	4b1e      	ldr	r3, [pc, #120]	; (800074c <main+0x180>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	701a      	strb	r2, [r3, #0]
	  }

	  if (txstate==2) {
 80006d6:	4b1d      	ldr	r3, [pc, #116]	; (800074c <main+0x180>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	2b02      	cmp	r3, #2
 80006dc:	d195      	bne.n	800060a <main+0x3e>
		if (fifo_read_enabled==1)
 80006de:	4b19      	ldr	r3, [pc, #100]	; (8000744 <main+0x178>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d117      	bne.n	8000716 <main+0x14a>
		{
			for (int i=64; i<128;i=i+4) {
 80006e6:	2340      	movs	r3, #64	; 0x40
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	e011      	b.n	8000710 <main+0x144>
				uint16_t data = FifoRead();
 80006ec:	f7ff ff12 	bl	8000514 <FifoRead>
 80006f0:	4603      	mov	r3, r0
 80006f2:	80bb      	strh	r3, [r7, #4]
				txBuf[i] = data;
 80006f4:	490a      	ldr	r1, [pc, #40]	; (8000720 <main+0x154>)
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	88ba      	ldrh	r2, [r7, #4]
 80006fa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				txBuf[i+2] = data;
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	3302      	adds	r3, #2
 8000702:	4907      	ldr	r1, [pc, #28]	; (8000720 <main+0x154>)
 8000704:	88ba      	ldrh	r2, [r7, #4]
 8000706:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for (int i=64; i<128;i=i+4) {
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	3304      	adds	r3, #4
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	2b7f      	cmp	r3, #127	; 0x7f
 8000714:	ddea      	ble.n	80006ec <main+0x120>
			}

		}
		txstate=0;
 8000716:	4b0d      	ldr	r3, [pc, #52]	; (800074c <main+0x180>)
 8000718:	2200      	movs	r2, #0
 800071a:	701a      	strb	r2, [r3, #0]
	  if (rxstate==1) {
 800071c:	e775      	b.n	800060a <main+0x3e>
 800071e:	bf00      	nop
 8000720:	200005e8 	.word	0x200005e8
 8000724:	200004e0 	.word	0x200004e0
 8000728:	200006e8 	.word	0x200006e8
 800072c:	20000498 	.word	0x20000498
 8000730:	20000809 	.word	0x20000809
 8000734:	20000a14 	.word	0x20000a14
 8000738:	200007e8 	.word	0x200007e8
 800073c:	20000a0c 	.word	0x20000a0c
 8000740:	20000a0d 	.word	0x20000a0d
 8000744:	20000a0e 	.word	0x20000a0e
 8000748:	20000768 	.word	0x20000768
 800074c:	20000808 	.word	0x20000808

08000750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b094      	sub	sp, #80	; 0x50
 8000754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000756:	f107 0320 	add.w	r3, r7, #32
 800075a:	2230      	movs	r2, #48	; 0x30
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f004 fe7a 	bl	8005458 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000774:	2300      	movs	r3, #0
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	4b27      	ldr	r3, [pc, #156]	; (8000818 <SystemClock_Config+0xc8>)
 800077a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077c:	4a26      	ldr	r2, [pc, #152]	; (8000818 <SystemClock_Config+0xc8>)
 800077e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000782:	6413      	str	r3, [r2, #64]	; 0x40
 8000784:	4b24      	ldr	r3, [pc, #144]	; (8000818 <SystemClock_Config+0xc8>)
 8000786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000790:	2300      	movs	r3, #0
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	4b21      	ldr	r3, [pc, #132]	; (800081c <SystemClock_Config+0xcc>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a20      	ldr	r2, [pc, #128]	; (800081c <SystemClock_Config+0xcc>)
 800079a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800079e:	6013      	str	r3, [r2, #0]
 80007a0:	4b1e      	ldr	r3, [pc, #120]	; (800081c <SystemClock_Config+0xcc>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007ac:	2301      	movs	r3, #1
 80007ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b6:	2302      	movs	r3, #2
 80007b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007c0:	2304      	movs	r3, #4
 80007c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80007c4:	23c0      	movs	r3, #192	; 0xc0
 80007c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007c8:	2304      	movs	r3, #4
 80007ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80007cc:	2308      	movs	r3, #8
 80007ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d0:	f107 0320 	add.w	r3, r7, #32
 80007d4:	4618      	mov	r0, r3
 80007d6:	f002 f911 	bl	80029fc <HAL_RCC_OscConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007e0:	f000 f9fa 	bl	8000bd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e4:	230f      	movs	r3, #15
 80007e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e8:	2302      	movs	r3, #2
 80007ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007fa:	f107 030c 	add.w	r3, r7, #12
 80007fe:	2103      	movs	r1, #3
 8000800:	4618      	mov	r0, r3
 8000802:	f002 fb73 	bl	8002eec <HAL_RCC_ClockConfig>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800080c:	f000 f9e4 	bl	8000bd8 <Error_Handler>
  }
}
 8000810:	bf00      	nop
 8000812:	3750      	adds	r7, #80	; 0x50
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40023800 	.word	0x40023800
 800081c:	40007000 	.word	0x40007000

08000820 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000826:	463b      	mov	r3, r7
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]
 8000834:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000836:	2301      	movs	r3, #1
 8000838:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800083a:	23c0      	movs	r3, #192	; 0xc0
 800083c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 800083e:	2308      	movs	r3, #8
 8000840:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000842:	2302      	movs	r3, #2
 8000844:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000846:	463b      	mov	r3, r7
 8000848:	4618      	mov	r0, r3
 800084a:	f002 fd3b 	bl	80032c4 <HAL_RCCEx_PeriphCLKConfig>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000854:	f000 f9c0 	bl	8000bd8 <Error_Handler>
  }
}
 8000858:	bf00      	nop
 800085a:	3718      	adds	r7, #24
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000864:	4b0a      	ldr	r3, [pc, #40]	; (8000890 <MX_CRC_Init+0x30>)
 8000866:	4a0b      	ldr	r2, [pc, #44]	; (8000894 <MX_CRC_Init+0x34>)
 8000868:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800086a:	4809      	ldr	r0, [pc, #36]	; (8000890 <MX_CRC_Init+0x30>)
 800086c:	f000 fd27 	bl	80012be <HAL_CRC_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000876:	f000 f9af 	bl	8000bd8 <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 800087a:	4b05      	ldr	r3, [pc, #20]	; (8000890 <MX_CRC_Init+0x30>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	689a      	ldr	r2, [r3, #8]
 8000880:	4b03      	ldr	r3, [pc, #12]	; (8000890 <MX_CRC_Init+0x30>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f042 0201 	orr.w	r2, r2, #1
 8000888:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000490 	.word	0x20000490
 8000894:	40023000 	.word	0x40023000

08000898 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800089c:	4b13      	ldr	r3, [pc, #76]	; (80008ec <MX_I2S2_Init+0x54>)
 800089e:	4a14      	ldr	r2, [pc, #80]	; (80008f0 <MX_I2S2_Init+0x58>)
 80008a0:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_SLAVE_RX;
 80008a2:	4b12      	ldr	r3, [pc, #72]	; (80008ec <MX_I2S2_Init+0x54>)
 80008a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008a8:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 80008aa:	4b10      	ldr	r3, [pc, #64]	; (80008ec <MX_I2S2_Init+0x54>)
 80008ac:	2210      	movs	r2, #16
 80008ae:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 80008b0:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <MX_I2S2_Init+0x54>)
 80008b2:	2203      	movs	r2, #3
 80008b4:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80008b6:	4b0d      	ldr	r3, [pc, #52]	; (80008ec <MX_I2S2_Init+0x54>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80008bc:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <MX_I2S2_Init+0x54>)
 80008be:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80008c2:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80008c4:	4b09      	ldr	r3, [pc, #36]	; (80008ec <MX_I2S2_Init+0x54>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80008ca:	4b08      	ldr	r3, [pc, #32]	; (80008ec <MX_I2S2_Init+0x54>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <MX_I2S2_Init+0x54>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80008d6:	4805      	ldr	r0, [pc, #20]	; (80008ec <MX_I2S2_Init+0x54>)
 80008d8:	f001 fa1c 	bl	8001d14 <HAL_I2S_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 80008e2:	f000 f979 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000498 	.word	0x20000498
 80008f0:	40003800 	.word	0x40003800

080008f4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80008f8:	4b13      	ldr	r3, [pc, #76]	; (8000948 <MX_I2S3_Init+0x54>)
 80008fa:	4a14      	ldr	r2, [pc, #80]	; (800094c <MX_I2S3_Init+0x58>)
 80008fc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80008fe:	4b12      	ldr	r3, [pc, #72]	; (8000948 <MX_I2S3_Init+0x54>)
 8000900:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000904:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <MX_I2S3_Init+0x54>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_24B;
 800090c:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_I2S3_Init+0x54>)
 800090e:	2203      	movs	r2, #3
 8000910:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_I2S3_Init+0x54>)
 8000914:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000918:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <MX_I2S3_Init+0x54>)
 800091c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000920:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_I2S3_Init+0x54>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000928:	4b07      	ldr	r3, [pc, #28]	; (8000948 <MX_I2S3_Init+0x54>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <MX_I2S3_Init+0x54>)
 8000930:	2200      	movs	r2, #0
 8000932:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000934:	4804      	ldr	r0, [pc, #16]	; (8000948 <MX_I2S3_Init+0x54>)
 8000936:	f001 f9ed 	bl	8001d14 <HAL_I2S_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000940:	f000 f94a 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	200004e0 	.word	0x200004e0
 800094c:	40003c00 	.word	0x40003c00

08000950 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <MX_DMA_Init+0x4c>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a0f      	ldr	r2, [pc, #60]	; (800099c <MX_DMA_Init+0x4c>)
 8000960:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b0d      	ldr	r3, [pc, #52]	; (800099c <MX_DMA_Init+0x4c>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	2100      	movs	r1, #0
 8000976:	200e      	movs	r0, #14
 8000978:	f000 fc6b 	bl	8001252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800097c:	200e      	movs	r0, #14
 800097e:	f000 fc84 	bl	800128a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000982:	2200      	movs	r2, #0
 8000984:	2100      	movs	r1, #0
 8000986:	2010      	movs	r0, #16
 8000988:	f000 fc63 	bl	8001252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800098c:	2010      	movs	r0, #16
 800098e:	f000 fc7c 	bl	800128a <HAL_NVIC_EnableIRQ>

}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40023800 	.word	0x40023800

080009a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08c      	sub	sp, #48	; 0x30
 80009a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	61bb      	str	r3, [r7, #24]
 80009ba:	4b81      	ldr	r3, [pc, #516]	; (8000bc0 <MX_GPIO_Init+0x220>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a80      	ldr	r2, [pc, #512]	; (8000bc0 <MX_GPIO_Init+0x220>)
 80009c0:	f043 0310 	orr.w	r3, r3, #16
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b7e      	ldr	r3, [pc, #504]	; (8000bc0 <MX_GPIO_Init+0x220>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0310 	and.w	r3, r3, #16
 80009ce:	61bb      	str	r3, [r7, #24]
 80009d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	617b      	str	r3, [r7, #20]
 80009d6:	4b7a      	ldr	r3, [pc, #488]	; (8000bc0 <MX_GPIO_Init+0x220>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a79      	ldr	r2, [pc, #484]	; (8000bc0 <MX_GPIO_Init+0x220>)
 80009dc:	f043 0304 	orr.w	r3, r3, #4
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b77      	ldr	r3, [pc, #476]	; (8000bc0 <MX_GPIO_Init+0x220>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0304 	and.w	r3, r3, #4
 80009ea:	617b      	str	r3, [r7, #20]
 80009ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	613b      	str	r3, [r7, #16]
 80009f2:	4b73      	ldr	r3, [pc, #460]	; (8000bc0 <MX_GPIO_Init+0x220>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a72      	ldr	r2, [pc, #456]	; (8000bc0 <MX_GPIO_Init+0x220>)
 80009f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b70      	ldr	r3, [pc, #448]	; (8000bc0 <MX_GPIO_Init+0x220>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	4b6c      	ldr	r3, [pc, #432]	; (8000bc0 <MX_GPIO_Init+0x220>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a6b      	ldr	r2, [pc, #428]	; (8000bc0 <MX_GPIO_Init+0x220>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b69      	ldr	r3, [pc, #420]	; (8000bc0 <MX_GPIO_Init+0x220>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	60bb      	str	r3, [r7, #8]
 8000a2a:	4b65      	ldr	r3, [pc, #404]	; (8000bc0 <MX_GPIO_Init+0x220>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a64      	ldr	r2, [pc, #400]	; (8000bc0 <MX_GPIO_Init+0x220>)
 8000a30:	f043 0302 	orr.w	r3, r3, #2
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b62      	ldr	r3, [pc, #392]	; (8000bc0 <MX_GPIO_Init+0x220>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0302 	and.w	r3, r3, #2
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	4b5e      	ldr	r3, [pc, #376]	; (8000bc0 <MX_GPIO_Init+0x220>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a5d      	ldr	r2, [pc, #372]	; (8000bc0 <MX_GPIO_Init+0x220>)
 8000a4c:	f043 0308 	orr.w	r3, r3, #8
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b5b      	ldr	r3, [pc, #364]	; (8000bc0 <MX_GPIO_Init+0x220>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0308 	and.w	r3, r3, #8
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2108      	movs	r1, #8
 8000a62:	4858      	ldr	r0, [pc, #352]	; (8000bc4 <MX_GPIO_Init+0x224>)
 8000a64:	f001 f93c 	bl	8001ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	2101      	movs	r1, #1
 8000a6c:	4856      	ldr	r0, [pc, #344]	; (8000bc8 <MX_GPIO_Init+0x228>)
 8000a6e:	f001 f937 	bl	8001ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a72:	2200      	movs	r2, #0
 8000a74:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000a78:	4854      	ldr	r0, [pc, #336]	; (8000bcc <MX_GPIO_Init+0x22c>)
 8000a7a:	f001 f931 	bl	8001ce0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000a7e:	2304      	movs	r3, #4
 8000a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a82:	2300      	movs	r3, #0
 8000a84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	4619      	mov	r1, r3
 8000a90:	484c      	ldr	r0, [pc, #304]	; (8000bc4 <MX_GPIO_Init+0x224>)
 8000a92:	f000 ffa1 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a96:	2308      	movs	r3, #8
 8000a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000aa6:	f107 031c 	add.w	r3, r7, #28
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4845      	ldr	r0, [pc, #276]	; (8000bc4 <MX_GPIO_Init+0x224>)
 8000aae:	f000 ff93 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000ab2:	2332      	movs	r3, #50	; 0x32
 8000ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ab6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000aba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ac0:	f107 031c 	add.w	r3, r7, #28
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	483f      	ldr	r0, [pc, #252]	; (8000bc4 <MX_GPIO_Init+0x224>)
 8000ac8:	f000 ff86 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000acc:	2301      	movs	r3, #1
 8000ace:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000adc:	f107 031c 	add.w	r3, r7, #28
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4839      	ldr	r0, [pc, #228]	; (8000bc8 <MX_GPIO_Init+0x228>)
 8000ae4:	f000 ff78 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000af0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000af2:	2302      	movs	r3, #2
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af6:	f107 031c 	add.w	r3, r7, #28
 8000afa:	4619      	mov	r1, r3
 8000afc:	4834      	ldr	r0, [pc, #208]	; (8000bd0 <MX_GPIO_Init+0x230>)
 8000afe:	f000 ff6b 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b02:	23e0      	movs	r3, #224	; 0xe0
 8000b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b12:	2305      	movs	r3, #5
 8000b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b16:	f107 031c 	add.w	r3, r7, #28
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	482c      	ldr	r0, [pc, #176]	; (8000bd0 <MX_GPIO_Init+0x230>)
 8000b1e:	f000 ff5b 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b22:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000b26:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b34:	f107 031c 	add.w	r3, r7, #28
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4824      	ldr	r0, [pc, #144]	; (8000bcc <MX_GPIO_Init+0x22c>)
 8000b3c:	f000 ff4c 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000b40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b46:	2300      	movs	r3, #0
 8000b48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000b4e:	f107 031c 	add.w	r3, r7, #28
 8000b52:	4619      	mov	r1, r3
 8000b54:	481e      	ldr	r0, [pc, #120]	; (8000bd0 <MX_GPIO_Init+0x230>)
 8000b56:	f000 ff3f 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000b5a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b60:	2302      	movs	r3, #2
 8000b62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b6c:	230a      	movs	r3, #10
 8000b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b70:	f107 031c 	add.w	r3, r7, #28
 8000b74:	4619      	mov	r1, r3
 8000b76:	4816      	ldr	r0, [pc, #88]	; (8000bd0 <MX_GPIO_Init+0x230>)
 8000b78:	f000 ff2e 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b7c:	2320      	movs	r3, #32
 8000b7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b80:	2300      	movs	r3, #0
 8000b82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b88:	f107 031c 	add.w	r3, r7, #28
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	480f      	ldr	r0, [pc, #60]	; (8000bcc <MX_GPIO_Init+0x22c>)
 8000b90:	f000 ff22 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b94:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b9a:	2312      	movs	r3, #18
 8000b9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ba6:	2304      	movs	r3, #4
 8000ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000baa:	f107 031c 	add.w	r3, r7, #28
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4808      	ldr	r0, [pc, #32]	; (8000bd4 <MX_GPIO_Init+0x234>)
 8000bb2:	f000 ff11 	bl	80019d8 <HAL_GPIO_Init>

}
 8000bb6:	bf00      	nop
 8000bb8:	3730      	adds	r7, #48	; 0x30
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	40020800 	.word	0x40020800
 8000bcc:	40020c00 	.word	0x40020c00
 8000bd0:	40020000 	.word	0x40020000
 8000bd4:	40020400 	.word	0x40020400

08000bd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bdc:	b672      	cpsid	i
}
 8000bde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <Error_Handler+0x8>
	...

08000be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	607b      	str	r3, [r7, #4]
 8000bee:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <HAL_MspInit+0x4c>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf2:	4a0f      	ldr	r2, [pc, #60]	; (8000c30 <HAL_MspInit+0x4c>)
 8000bf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bfa:	4b0d      	ldr	r3, [pc, #52]	; (8000c30 <HAL_MspInit+0x4c>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	603b      	str	r3, [r7, #0]
 8000c0a:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <HAL_MspInit+0x4c>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	4a08      	ldr	r2, [pc, #32]	; (8000c30 <HAL_MspInit+0x4c>)
 8000c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c14:	6413      	str	r3, [r2, #64]	; 0x40
 8000c16:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <HAL_MspInit+0x4c>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1e:	603b      	str	r3, [r7, #0]
 8000c20:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c22:	2007      	movs	r0, #7
 8000c24:	f000 fb0a 	bl	800123c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40023800 	.word	0x40023800

08000c34 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a0b      	ldr	r2, [pc, #44]	; (8000c70 <HAL_CRC_MspInit+0x3c>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d10d      	bne.n	8000c62 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <HAL_CRC_MspInit+0x40>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a09      	ldr	r2, [pc, #36]	; (8000c74 <HAL_CRC_MspInit+0x40>)
 8000c50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b07      	ldr	r3, [pc, #28]	; (8000c74 <HAL_CRC_MspInit+0x40>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000c62:	bf00      	nop
 8000c64:	3714      	adds	r7, #20
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	40023000 	.word	0x40023000
 8000c74:	40023800 	.word	0x40023800

08000c78 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08e      	sub	sp, #56	; 0x38
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a81      	ldr	r2, [pc, #516]	; (8000e9c <HAL_I2S_MspInit+0x224>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d17b      	bne.n	8000d92 <HAL_I2S_MspInit+0x11a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	623b      	str	r3, [r7, #32]
 8000c9e:	4b80      	ldr	r3, [pc, #512]	; (8000ea0 <HAL_I2S_MspInit+0x228>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	4a7f      	ldr	r2, [pc, #508]	; (8000ea0 <HAL_I2S_MspInit+0x228>)
 8000ca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8000caa:	4b7d      	ldr	r3, [pc, #500]	; (8000ea0 <HAL_I2S_MspInit+0x228>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cb2:	623b      	str	r3, [r7, #32]
 8000cb4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
 8000cba:	4b79      	ldr	r3, [pc, #484]	; (8000ea0 <HAL_I2S_MspInit+0x228>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4a78      	ldr	r2, [pc, #480]	; (8000ea0 <HAL_I2S_MspInit+0x228>)
 8000cc0:	f043 0304 	orr.w	r3, r3, #4
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc6:	4b76      	ldr	r3, [pc, #472]	; (8000ea0 <HAL_I2S_MspInit+0x228>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f003 0304 	and.w	r3, r3, #4
 8000cce:	61fb      	str	r3, [r7, #28]
 8000cd0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61bb      	str	r3, [r7, #24]
 8000cd6:	4b72      	ldr	r3, [pc, #456]	; (8000ea0 <HAL_I2S_MspInit+0x228>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a71      	ldr	r2, [pc, #452]	; (8000ea0 <HAL_I2S_MspInit+0x228>)
 8000cdc:	f043 0302 	orr.w	r3, r3, #2
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b6f      	ldr	r3, [pc, #444]	; (8000ea0 <HAL_I2S_MspInit+0x228>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f003 0302 	and.w	r3, r3, #2
 8000cea:	61bb      	str	r3, [r7, #24]
 8000cec:	69bb      	ldr	r3, [r7, #24]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000cee:	2308      	movs	r3, #8
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cfe:	2305      	movs	r3, #5
 8000d00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000d02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d06:	4619      	mov	r1, r3
 8000d08:	4866      	ldr	r0, [pc, #408]	; (8000ea4 <HAL_I2S_MspInit+0x22c>)
 8000d0a:	f000 fe65 	bl	80019d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000d0e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d14:	2302      	movs	r3, #2
 8000d16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d20:	2305      	movs	r3, #5
 8000d22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d28:	4619      	mov	r1, r3
 8000d2a:	485f      	ldr	r0, [pc, #380]	; (8000ea8 <HAL_I2S_MspInit+0x230>)
 8000d2c:	f000 fe54 	bl	80019d8 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8000d30:	4b5e      	ldr	r3, [pc, #376]	; (8000eac <HAL_I2S_MspInit+0x234>)
 8000d32:	4a5f      	ldr	r2, [pc, #380]	; (8000eb0 <HAL_I2S_MspInit+0x238>)
 8000d34:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8000d36:	4b5d      	ldr	r3, [pc, #372]	; (8000eac <HAL_I2S_MspInit+0x234>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d3c:	4b5b      	ldr	r3, [pc, #364]	; (8000eac <HAL_I2S_MspInit+0x234>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d42:	4b5a      	ldr	r3, [pc, #360]	; (8000eac <HAL_I2S_MspInit+0x234>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d48:	4b58      	ldr	r3, [pc, #352]	; (8000eac <HAL_I2S_MspInit+0x234>)
 8000d4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d4e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d50:	4b56      	ldr	r3, [pc, #344]	; (8000eac <HAL_I2S_MspInit+0x234>)
 8000d52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d56:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d58:	4b54      	ldr	r3, [pc, #336]	; (8000eac <HAL_I2S_MspInit+0x234>)
 8000d5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d5e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8000d60:	4b52      	ldr	r3, [pc, #328]	; (8000eac <HAL_I2S_MspInit+0x234>)
 8000d62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d66:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d68:	4b50      	ldr	r3, [pc, #320]	; (8000eac <HAL_I2S_MspInit+0x234>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d6e:	4b4f      	ldr	r3, [pc, #316]	; (8000eac <HAL_I2S_MspInit+0x234>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000d74:	484d      	ldr	r0, [pc, #308]	; (8000eac <HAL_I2S_MspInit+0x234>)
 8000d76:	f000 fabf 	bl	80012f8 <HAL_DMA_Init>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <HAL_I2S_MspInit+0x10c>
    {
      Error_Handler();
 8000d80:	f7ff ff2a 	bl	8000bd8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4a49      	ldr	r2, [pc, #292]	; (8000eac <HAL_I2S_MspInit+0x234>)
 8000d88:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d8a:	4a48      	ldr	r2, [pc, #288]	; (8000eac <HAL_I2S_MspInit+0x234>)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d90:	e07f      	b.n	8000e92 <HAL_I2S_MspInit+0x21a>
  else if(hi2s->Instance==SPI3)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a47      	ldr	r2, [pc, #284]	; (8000eb4 <HAL_I2S_MspInit+0x23c>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d17a      	bne.n	8000e92 <HAL_I2S_MspInit+0x21a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]
 8000da0:	4b3f      	ldr	r3, [pc, #252]	; (8000ea0 <HAL_I2S_MspInit+0x228>)
 8000da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da4:	4a3e      	ldr	r2, [pc, #248]	; (8000ea0 <HAL_I2S_MspInit+0x228>)
 8000da6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000daa:	6413      	str	r3, [r2, #64]	; 0x40
 8000dac:	4b3c      	ldr	r3, [pc, #240]	; (8000ea0 <HAL_I2S_MspInit+0x228>)
 8000dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000db4:	617b      	str	r3, [r7, #20]
 8000db6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db8:	2300      	movs	r3, #0
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	4b38      	ldr	r3, [pc, #224]	; (8000ea0 <HAL_I2S_MspInit+0x228>)
 8000dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc0:	4a37      	ldr	r2, [pc, #220]	; (8000ea0 <HAL_I2S_MspInit+0x228>)
 8000dc2:	f043 0301 	orr.w	r3, r3, #1
 8000dc6:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc8:	4b35      	ldr	r3, [pc, #212]	; (8000ea0 <HAL_I2S_MspInit+0x228>)
 8000dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dcc:	f003 0301 	and.w	r3, r3, #1
 8000dd0:	613b      	str	r3, [r7, #16]
 8000dd2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	4b31      	ldr	r3, [pc, #196]	; (8000ea0 <HAL_I2S_MspInit+0x228>)
 8000dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ddc:	4a30      	ldr	r2, [pc, #192]	; (8000ea0 <HAL_I2S_MspInit+0x228>)
 8000dde:	f043 0304 	orr.w	r3, r3, #4
 8000de2:	6313      	str	r3, [r2, #48]	; 0x30
 8000de4:	4b2e      	ldr	r3, [pc, #184]	; (8000ea0 <HAL_I2S_MspInit+0x228>)
 8000de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de8:	f003 0304 	and.w	r3, r3, #4
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000df0:	2310      	movs	r3, #16
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df4:	2302      	movs	r3, #2
 8000df6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e00:	2306      	movs	r3, #6
 8000e02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000e04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e08:	4619      	mov	r1, r3
 8000e0a:	482b      	ldr	r0, [pc, #172]	; (8000eb8 <HAL_I2S_MspInit+0x240>)
 8000e0c:	f000 fde4 	bl	80019d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000e10:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000e14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e16:	2302      	movs	r3, #2
 8000e18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e22:	2306      	movs	r3, #6
 8000e24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	481d      	ldr	r0, [pc, #116]	; (8000ea4 <HAL_I2S_MspInit+0x22c>)
 8000e2e:	f000 fdd3 	bl	80019d8 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8000e32:	4b22      	ldr	r3, [pc, #136]	; (8000ebc <HAL_I2S_MspInit+0x244>)
 8000e34:	4a22      	ldr	r2, [pc, #136]	; (8000ec0 <HAL_I2S_MspInit+0x248>)
 8000e36:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8000e38:	4b20      	ldr	r3, [pc, #128]	; (8000ebc <HAL_I2S_MspInit+0x244>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e3e:	4b1f      	ldr	r3, [pc, #124]	; (8000ebc <HAL_I2S_MspInit+0x244>)
 8000e40:	2240      	movs	r2, #64	; 0x40
 8000e42:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e44:	4b1d      	ldr	r3, [pc, #116]	; (8000ebc <HAL_I2S_MspInit+0x244>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e4a:	4b1c      	ldr	r3, [pc, #112]	; (8000ebc <HAL_I2S_MspInit+0x244>)
 8000e4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e50:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e52:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <HAL_I2S_MspInit+0x244>)
 8000e54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e58:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e5a:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <HAL_I2S_MspInit+0x244>)
 8000e5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e60:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8000e62:	4b16      	ldr	r3, [pc, #88]	; (8000ebc <HAL_I2S_MspInit+0x244>)
 8000e64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e68:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e6a:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <HAL_I2S_MspInit+0x244>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e70:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <HAL_I2S_MspInit+0x244>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000e76:	4811      	ldr	r0, [pc, #68]	; (8000ebc <HAL_I2S_MspInit+0x244>)
 8000e78:	f000 fa3e 	bl	80012f8 <HAL_DMA_Init>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <HAL_I2S_MspInit+0x20e>
      Error_Handler();
 8000e82:	f7ff fea9 	bl	8000bd8 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a0c      	ldr	r2, [pc, #48]	; (8000ebc <HAL_I2S_MspInit+0x244>)
 8000e8a:	639a      	str	r2, [r3, #56]	; 0x38
 8000e8c:	4a0b      	ldr	r2, [pc, #44]	; (8000ebc <HAL_I2S_MspInit+0x244>)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000e92:	bf00      	nop
 8000e94:	3738      	adds	r7, #56	; 0x38
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40003800 	.word	0x40003800
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40020800 	.word	0x40020800
 8000ea8:	40020400 	.word	0x40020400
 8000eac:	20000528 	.word	0x20000528
 8000eb0:	40026058 	.word	0x40026058
 8000eb4:	40003c00 	.word	0x40003c00
 8000eb8:	40020000 	.word	0x40020000
 8000ebc:	20000588 	.word	0x20000588
 8000ec0:	40026088 	.word	0x40026088

08000ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <NMI_Handler+0x4>

08000eca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ece:	e7fe      	b.n	8000ece <HardFault_Handler+0x4>

08000ed0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <MemManage_Handler+0x4>

08000ed6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eda:	e7fe      	b.n	8000eda <BusFault_Handler+0x4>

08000edc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <UsageFault_Handler+0x4>

08000ee2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f10:	f000 f8a4 	bl	800105c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000f1c:	4802      	ldr	r0, [pc, #8]	; (8000f28 <DMA1_Stream3_IRQHandler+0x10>)
 8000f1e:	f000 faf1 	bl	8001504 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000528 	.word	0x20000528

08000f2c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8000f30:	4802      	ldr	r0, [pc, #8]	; (8000f3c <DMA1_Stream5_IRQHandler+0x10>)
 8000f32:	f000 fae7 	bl	8001504 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000588 	.word	0x20000588

08000f40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <SystemInit+0x20>)
 8000f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f4a:	4a05      	ldr	r2, [pc, #20]	; (8000f60 <SystemInit+0x20>)
 8000f4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f68:	480d      	ldr	r0, [pc, #52]	; (8000fa0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f6a:	490e      	ldr	r1, [pc, #56]	; (8000fa4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f6c:	4a0e      	ldr	r2, [pc, #56]	; (8000fa8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f70:	e002      	b.n	8000f78 <LoopCopyDataInit>

08000f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f76:	3304      	adds	r3, #4

08000f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f7c:	d3f9      	bcc.n	8000f72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f7e:	4a0b      	ldr	r2, [pc, #44]	; (8000fac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f80:	4c0b      	ldr	r4, [pc, #44]	; (8000fb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f84:	e001      	b.n	8000f8a <LoopFillZerobss>

08000f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f88:	3204      	adds	r2, #4

08000f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f8c:	d3fb      	bcc.n	8000f86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f8e:	f7ff ffd7 	bl	8000f40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f92:	f004 fa3d 	bl	8005410 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f96:	f7ff fb19 	bl	80005cc <main>
  bx  lr    
 8000f9a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa4:	20000470 	.word	0x20000470
  ldr r2, =_sidata
 8000fa8:	08005ce4 	.word	0x08005ce4
  ldr r2, =_sbss
 8000fac:	20000470 	.word	0x20000470
  ldr r4, =_ebss
 8000fb0:	20000a68 	.word	0x20000a68

08000fb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fb4:	e7fe      	b.n	8000fb4 <ADC_IRQHandler>
	...

08000fb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fbc:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <HAL_Init+0x40>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a0d      	ldr	r2, [pc, #52]	; (8000ff8 <HAL_Init+0x40>)
 8000fc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fc8:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <HAL_Init+0x40>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a0a      	ldr	r2, [pc, #40]	; (8000ff8 <HAL_Init+0x40>)
 8000fce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fd4:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <HAL_Init+0x40>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a07      	ldr	r2, [pc, #28]	; (8000ff8 <HAL_Init+0x40>)
 8000fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe0:	2003      	movs	r0, #3
 8000fe2:	f000 f92b 	bl	800123c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f000 f808 	bl	8000ffc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fec:	f7ff fdfa 	bl	8000be4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40023c00 	.word	0x40023c00

08000ffc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001004:	4b12      	ldr	r3, [pc, #72]	; (8001050 <HAL_InitTick+0x54>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	4b12      	ldr	r3, [pc, #72]	; (8001054 <HAL_InitTick+0x58>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	4619      	mov	r1, r3
 800100e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001012:	fbb3 f3f1 	udiv	r3, r3, r1
 8001016:	fbb2 f3f3 	udiv	r3, r2, r3
 800101a:	4618      	mov	r0, r3
 800101c:	f000 f943 	bl	80012a6 <HAL_SYSTICK_Config>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e00e      	b.n	8001048 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2b0f      	cmp	r3, #15
 800102e:	d80a      	bhi.n	8001046 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001030:	2200      	movs	r2, #0
 8001032:	6879      	ldr	r1, [r7, #4]
 8001034:	f04f 30ff 	mov.w	r0, #4294967295
 8001038:	f000 f90b 	bl	8001252 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800103c:	4a06      	ldr	r2, [pc, #24]	; (8001058 <HAL_InitTick+0x5c>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001042:	2300      	movs	r3, #0
 8001044:	e000      	b.n	8001048 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
}
 8001048:	4618      	mov	r0, r3
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000400 	.word	0x20000400
 8001054:	20000408 	.word	0x20000408
 8001058:	20000404 	.word	0x20000404

0800105c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <HAL_IncTick+0x20>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	461a      	mov	r2, r3
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <HAL_IncTick+0x24>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4413      	add	r3, r2
 800106c:	4a04      	ldr	r2, [pc, #16]	; (8001080 <HAL_IncTick+0x24>)
 800106e:	6013      	str	r3, [r2, #0]
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	20000408 	.word	0x20000408
 8001080:	20000a10 	.word	0x20000a10

08001084 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  return uwTick;
 8001088:	4b03      	ldr	r3, [pc, #12]	; (8001098 <HAL_GetTick+0x14>)
 800108a:	681b      	ldr	r3, [r3, #0]
}
 800108c:	4618      	mov	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	20000a10 	.word	0x20000a10

0800109c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010ac:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <__NVIC_SetPriorityGrouping+0x44>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010b2:	68ba      	ldr	r2, [r7, #8]
 80010b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010b8:	4013      	ands	r3, r2
 80010ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ce:	4a04      	ldr	r2, [pc, #16]	; (80010e0 <__NVIC_SetPriorityGrouping+0x44>)
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	60d3      	str	r3, [r2, #12]
}
 80010d4:	bf00      	nop
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e8:	4b04      	ldr	r3, [pc, #16]	; (80010fc <__NVIC_GetPriorityGrouping+0x18>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	0a1b      	lsrs	r3, r3, #8
 80010ee:	f003 0307 	and.w	r3, r3, #7
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	2b00      	cmp	r3, #0
 8001110:	db0b      	blt.n	800112a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	f003 021f 	and.w	r2, r3, #31
 8001118:	4907      	ldr	r1, [pc, #28]	; (8001138 <__NVIC_EnableIRQ+0x38>)
 800111a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111e:	095b      	lsrs	r3, r3, #5
 8001120:	2001      	movs	r0, #1
 8001122:	fa00 f202 	lsl.w	r2, r0, r2
 8001126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	e000e100 	.word	0xe000e100

0800113c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	6039      	str	r1, [r7, #0]
 8001146:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114c:	2b00      	cmp	r3, #0
 800114e:	db0a      	blt.n	8001166 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	b2da      	uxtb	r2, r3
 8001154:	490c      	ldr	r1, [pc, #48]	; (8001188 <__NVIC_SetPriority+0x4c>)
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	0112      	lsls	r2, r2, #4
 800115c:	b2d2      	uxtb	r2, r2
 800115e:	440b      	add	r3, r1
 8001160:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001164:	e00a      	b.n	800117c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	b2da      	uxtb	r2, r3
 800116a:	4908      	ldr	r1, [pc, #32]	; (800118c <__NVIC_SetPriority+0x50>)
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	f003 030f 	and.w	r3, r3, #15
 8001172:	3b04      	subs	r3, #4
 8001174:	0112      	lsls	r2, r2, #4
 8001176:	b2d2      	uxtb	r2, r2
 8001178:	440b      	add	r3, r1
 800117a:	761a      	strb	r2, [r3, #24]
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000e100 	.word	0xe000e100
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001190:	b480      	push	{r7}
 8001192:	b089      	sub	sp, #36	; 0x24
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	f1c3 0307 	rsb	r3, r3, #7
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	bf28      	it	cs
 80011ae:	2304      	movcs	r3, #4
 80011b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3304      	adds	r3, #4
 80011b6:	2b06      	cmp	r3, #6
 80011b8:	d902      	bls.n	80011c0 <NVIC_EncodePriority+0x30>
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3b03      	subs	r3, #3
 80011be:	e000      	b.n	80011c2 <NVIC_EncodePriority+0x32>
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c4:	f04f 32ff 	mov.w	r2, #4294967295
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43da      	mvns	r2, r3
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	401a      	ands	r2, r3
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d8:	f04f 31ff 	mov.w	r1, #4294967295
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	fa01 f303 	lsl.w	r3, r1, r3
 80011e2:	43d9      	mvns	r1, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	4313      	orrs	r3, r2
         );
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3724      	adds	r7, #36	; 0x24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
	...

080011f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3b01      	subs	r3, #1
 8001204:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001208:	d301      	bcc.n	800120e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800120a:	2301      	movs	r3, #1
 800120c:	e00f      	b.n	800122e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800120e:	4a0a      	ldr	r2, [pc, #40]	; (8001238 <SysTick_Config+0x40>)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3b01      	subs	r3, #1
 8001214:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001216:	210f      	movs	r1, #15
 8001218:	f04f 30ff 	mov.w	r0, #4294967295
 800121c:	f7ff ff8e 	bl	800113c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001220:	4b05      	ldr	r3, [pc, #20]	; (8001238 <SysTick_Config+0x40>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001226:	4b04      	ldr	r3, [pc, #16]	; (8001238 <SysTick_Config+0x40>)
 8001228:	2207      	movs	r2, #7
 800122a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	e000e010 	.word	0xe000e010

0800123c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff ff29 	bl	800109c <__NVIC_SetPriorityGrouping>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001252:	b580      	push	{r7, lr}
 8001254:	b086      	sub	sp, #24
 8001256:	af00      	add	r7, sp, #0
 8001258:	4603      	mov	r3, r0
 800125a:	60b9      	str	r1, [r7, #8]
 800125c:	607a      	str	r2, [r7, #4]
 800125e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001264:	f7ff ff3e 	bl	80010e4 <__NVIC_GetPriorityGrouping>
 8001268:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	68b9      	ldr	r1, [r7, #8]
 800126e:	6978      	ldr	r0, [r7, #20]
 8001270:	f7ff ff8e 	bl	8001190 <NVIC_EncodePriority>
 8001274:	4602      	mov	r2, r0
 8001276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800127a:	4611      	mov	r1, r2
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ff5d 	bl	800113c <__NVIC_SetPriority>
}
 8001282:	bf00      	nop
 8001284:	3718      	adds	r7, #24
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	4603      	mov	r3, r0
 8001292:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ff31 	bl	8001100 <__NVIC_EnableIRQ>
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff ffa2 	bl	80011f8 <SysTick_Config>
 80012b4:	4603      	mov	r3, r0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d101      	bne.n	80012d0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e00e      	b.n	80012ee <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	795b      	ldrb	r3, [r3, #5]
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d105      	bne.n	80012e6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff fca7 	bl	8000c34 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2201      	movs	r2, #1
 80012ea:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001304:	f7ff febe 	bl	8001084 <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d101      	bne.n	8001314 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e099      	b.n	8001448 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2202      	movs	r2, #2
 8001318:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2200      	movs	r2, #0
 8001320:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f022 0201 	bic.w	r2, r2, #1
 8001332:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001334:	e00f      	b.n	8001356 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001336:	f7ff fea5 	bl	8001084 <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b05      	cmp	r3, #5
 8001342:	d908      	bls.n	8001356 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2220      	movs	r2, #32
 8001348:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2203      	movs	r2, #3
 800134e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e078      	b.n	8001448 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1e8      	bne.n	8001336 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800136c:	697a      	ldr	r2, [r7, #20]
 800136e:	4b38      	ldr	r3, [pc, #224]	; (8001450 <HAL_DMA_Init+0x158>)
 8001370:	4013      	ands	r3, r2
 8001372:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001382:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	691b      	ldr	r3, [r3, #16]
 8001388:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800138e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800139a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a1b      	ldr	r3, [r3, #32]
 80013a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013a2:	697a      	ldr	r2, [r7, #20]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ac:	2b04      	cmp	r3, #4
 80013ae:	d107      	bne.n	80013c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b8:	4313      	orrs	r3, r2
 80013ba:	697a      	ldr	r2, [r7, #20]
 80013bc:	4313      	orrs	r3, r2
 80013be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	697a      	ldr	r2, [r7, #20]
 80013c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	695b      	ldr	r3, [r3, #20]
 80013ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	f023 0307 	bic.w	r3, r3, #7
 80013d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013dc:	697a      	ldr	r2, [r7, #20]
 80013de:	4313      	orrs	r3, r2
 80013e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e6:	2b04      	cmp	r3, #4
 80013e8:	d117      	bne.n	800141a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ee:	697a      	ldr	r2, [r7, #20]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d00e      	beq.n	800141a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f000 fa6f 	bl	80018e0 <DMA_CheckFifoParam>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d008      	beq.n	800141a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2240      	movs	r2, #64	; 0x40
 800140c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2201      	movs	r2, #1
 8001412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001416:	2301      	movs	r3, #1
 8001418:	e016      	b.n	8001448 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	697a      	ldr	r2, [r7, #20]
 8001420:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f000 fa26 	bl	8001874 <DMA_CalcBaseAndBitshift>
 8001428:	4603      	mov	r3, r0
 800142a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001430:	223f      	movs	r2, #63	; 0x3f
 8001432:	409a      	lsls	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2201      	movs	r2, #1
 8001442:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001446:	2300      	movs	r3, #0
}
 8001448:	4618      	mov	r0, r3
 800144a:	3718      	adds	r7, #24
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	f010803f 	.word	0xf010803f

08001454 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
 8001460:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001462:	2300      	movs	r3, #0
 8001464:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800146a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001472:	2b01      	cmp	r3, #1
 8001474:	d101      	bne.n	800147a <HAL_DMA_Start_IT+0x26>
 8001476:	2302      	movs	r3, #2
 8001478:	e040      	b.n	80014fc <HAL_DMA_Start_IT+0xa8>
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2201      	movs	r2, #1
 800147e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b01      	cmp	r3, #1
 800148c:	d12f      	bne.n	80014ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2202      	movs	r2, #2
 8001492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2200      	movs	r2, #0
 800149a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	68b9      	ldr	r1, [r7, #8]
 80014a2:	68f8      	ldr	r0, [r7, #12]
 80014a4:	f000 f9b8 	bl	8001818 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ac:	223f      	movs	r2, #63	; 0x3f
 80014ae:	409a      	lsls	r2, r3
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f042 0216 	orr.w	r2, r2, #22
 80014c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d007      	beq.n	80014dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f042 0208 	orr.w	r2, r2, #8
 80014da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f042 0201 	orr.w	r2, r2, #1
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	e005      	b.n	80014fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2200      	movs	r2, #0
 80014f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80014f6:	2302      	movs	r3, #2
 80014f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80014fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3718      	adds	r7, #24
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800150c:	2300      	movs	r3, #0
 800150e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001510:	4b8e      	ldr	r3, [pc, #568]	; (800174c <HAL_DMA_IRQHandler+0x248>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a8e      	ldr	r2, [pc, #568]	; (8001750 <HAL_DMA_IRQHandler+0x24c>)
 8001516:	fba2 2303 	umull	r2, r3, r2, r3
 800151a:	0a9b      	lsrs	r3, r3, #10
 800151c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001522:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800152e:	2208      	movs	r2, #8
 8001530:	409a      	lsls	r2, r3
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	4013      	ands	r3, r2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d01a      	beq.n	8001570 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0304 	and.w	r3, r3, #4
 8001544:	2b00      	cmp	r3, #0
 8001546:	d013      	beq.n	8001570 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 0204 	bic.w	r2, r2, #4
 8001556:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800155c:	2208      	movs	r2, #8
 800155e:	409a      	lsls	r2, r3
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001568:	f043 0201 	orr.w	r2, r3, #1
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001574:	2201      	movs	r2, #1
 8001576:	409a      	lsls	r2, r3
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4013      	ands	r3, r2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d012      	beq.n	80015a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800158a:	2b00      	cmp	r3, #0
 800158c:	d00b      	beq.n	80015a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001592:	2201      	movs	r2, #1
 8001594:	409a      	lsls	r2, r3
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800159e:	f043 0202 	orr.w	r2, r3, #2
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015aa:	2204      	movs	r2, #4
 80015ac:	409a      	lsls	r2, r3
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	4013      	ands	r3, r2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d012      	beq.n	80015dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d00b      	beq.n	80015dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c8:	2204      	movs	r2, #4
 80015ca:	409a      	lsls	r2, r3
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d4:	f043 0204 	orr.w	r2, r3, #4
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e0:	2210      	movs	r2, #16
 80015e2:	409a      	lsls	r2, r3
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	4013      	ands	r3, r2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d043      	beq.n	8001674 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0308 	and.w	r3, r3, #8
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d03c      	beq.n	8001674 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015fe:	2210      	movs	r2, #16
 8001600:	409a      	lsls	r2, r3
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d018      	beq.n	8001646 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d108      	bne.n	8001634 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	2b00      	cmp	r3, #0
 8001628:	d024      	beq.n	8001674 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	4798      	blx	r3
 8001632:	e01f      	b.n	8001674 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001638:	2b00      	cmp	r3, #0
 800163a:	d01b      	beq.n	8001674 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	4798      	blx	r3
 8001644:	e016      	b.n	8001674 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001650:	2b00      	cmp	r3, #0
 8001652:	d107      	bne.n	8001664 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f022 0208 	bic.w	r2, r2, #8
 8001662:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001668:	2b00      	cmp	r3, #0
 800166a:	d003      	beq.n	8001674 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001678:	2220      	movs	r2, #32
 800167a:	409a      	lsls	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4013      	ands	r3, r2
 8001680:	2b00      	cmp	r3, #0
 8001682:	f000 808f 	beq.w	80017a4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0310 	and.w	r3, r3, #16
 8001690:	2b00      	cmp	r3, #0
 8001692:	f000 8087 	beq.w	80017a4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800169a:	2220      	movs	r2, #32
 800169c:	409a      	lsls	r2, r3
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b05      	cmp	r3, #5
 80016ac:	d136      	bne.n	800171c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 0216 	bic.w	r2, r2, #22
 80016bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	695a      	ldr	r2, [r3, #20]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d103      	bne.n	80016de <HAL_DMA_IRQHandler+0x1da>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d007      	beq.n	80016ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f022 0208 	bic.w	r2, r2, #8
 80016ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f2:	223f      	movs	r2, #63	; 0x3f
 80016f4:	409a      	lsls	r2, r3
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2201      	movs	r2, #1
 80016fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800170e:	2b00      	cmp	r3, #0
 8001710:	d07e      	beq.n	8001810 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	4798      	blx	r3
        }
        return;
 800171a:	e079      	b.n	8001810 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d01d      	beq.n	8001766 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d10d      	bne.n	8001754 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173c:	2b00      	cmp	r3, #0
 800173e:	d031      	beq.n	80017a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	4798      	blx	r3
 8001748:	e02c      	b.n	80017a4 <HAL_DMA_IRQHandler+0x2a0>
 800174a:	bf00      	nop
 800174c:	20000400 	.word	0x20000400
 8001750:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001758:	2b00      	cmp	r3, #0
 800175a:	d023      	beq.n	80017a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	4798      	blx	r3
 8001764:	e01e      	b.n	80017a4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001770:	2b00      	cmp	r3, #0
 8001772:	d10f      	bne.n	8001794 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f022 0210 	bic.w	r2, r2, #16
 8001782:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2201      	movs	r2, #1
 8001788:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001798:	2b00      	cmp	r3, #0
 800179a:	d003      	beq.n	80017a4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d032      	beq.n	8001812 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d022      	beq.n	80017fe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2205      	movs	r2, #5
 80017bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f022 0201 	bic.w	r2, r2, #1
 80017ce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	3301      	adds	r3, #1
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	697a      	ldr	r2, [r7, #20]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d307      	bcc.n	80017ec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1f2      	bne.n	80017d0 <HAL_DMA_IRQHandler+0x2cc>
 80017ea:	e000      	b.n	80017ee <HAL_DMA_IRQHandler+0x2ea>
          break;
 80017ec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2201      	movs	r2, #1
 80017f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001802:	2b00      	cmp	r3, #0
 8001804:	d005      	beq.n	8001812 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	4798      	blx	r3
 800180e:	e000      	b.n	8001812 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001810:	bf00      	nop
    }
  }
}
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
 8001824:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001834:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	683a      	ldr	r2, [r7, #0]
 800183c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	2b40      	cmp	r3, #64	; 0x40
 8001844:	d108      	bne.n	8001858 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	68ba      	ldr	r2, [r7, #8]
 8001854:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001856:	e007      	b.n	8001868 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	68ba      	ldr	r2, [r7, #8]
 800185e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	60da      	str	r2, [r3, #12]
}
 8001868:	bf00      	nop
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	b2db      	uxtb	r3, r3
 8001882:	3b10      	subs	r3, #16
 8001884:	4a14      	ldr	r2, [pc, #80]	; (80018d8 <DMA_CalcBaseAndBitshift+0x64>)
 8001886:	fba2 2303 	umull	r2, r3, r2, r3
 800188a:	091b      	lsrs	r3, r3, #4
 800188c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800188e:	4a13      	ldr	r2, [pc, #76]	; (80018dc <DMA_CalcBaseAndBitshift+0x68>)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	4413      	add	r3, r2
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	461a      	mov	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2b03      	cmp	r3, #3
 80018a0:	d909      	bls.n	80018b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80018aa:	f023 0303 	bic.w	r3, r3, #3
 80018ae:	1d1a      	adds	r2, r3, #4
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	659a      	str	r2, [r3, #88]	; 0x58
 80018b4:	e007      	b.n	80018c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80018be:	f023 0303 	bic.w	r3, r3, #3
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3714      	adds	r7, #20
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	aaaaaaab 	.word	0xaaaaaaab
 80018dc:	08005cb4 	.word	0x08005cb4

080018e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018e8:	2300      	movs	r3, #0
 80018ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d11f      	bne.n	800193a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	2b03      	cmp	r3, #3
 80018fe:	d856      	bhi.n	80019ae <DMA_CheckFifoParam+0xce>
 8001900:	a201      	add	r2, pc, #4	; (adr r2, 8001908 <DMA_CheckFifoParam+0x28>)
 8001902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001906:	bf00      	nop
 8001908:	08001919 	.word	0x08001919
 800190c:	0800192b 	.word	0x0800192b
 8001910:	08001919 	.word	0x08001919
 8001914:	080019af 	.word	0x080019af
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d046      	beq.n	80019b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001928:	e043      	b.n	80019b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001932:	d140      	bne.n	80019b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001938:	e03d      	b.n	80019b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	699b      	ldr	r3, [r3, #24]
 800193e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001942:	d121      	bne.n	8001988 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	2b03      	cmp	r3, #3
 8001948:	d837      	bhi.n	80019ba <DMA_CheckFifoParam+0xda>
 800194a:	a201      	add	r2, pc, #4	; (adr r2, 8001950 <DMA_CheckFifoParam+0x70>)
 800194c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001950:	08001961 	.word	0x08001961
 8001954:	08001967 	.word	0x08001967
 8001958:	08001961 	.word	0x08001961
 800195c:	08001979 	.word	0x08001979
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	73fb      	strb	r3, [r7, #15]
      break;
 8001964:	e030      	b.n	80019c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d025      	beq.n	80019be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001976:	e022      	b.n	80019be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001980:	d11f      	bne.n	80019c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001986:	e01c      	b.n	80019c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	2b02      	cmp	r3, #2
 800198c:	d903      	bls.n	8001996 <DMA_CheckFifoParam+0xb6>
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	2b03      	cmp	r3, #3
 8001992:	d003      	beq.n	800199c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001994:	e018      	b.n	80019c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	73fb      	strb	r3, [r7, #15]
      break;
 800199a:	e015      	b.n	80019c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d00e      	beq.n	80019c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	73fb      	strb	r3, [r7, #15]
      break;
 80019ac:	e00b      	b.n	80019c6 <DMA_CheckFifoParam+0xe6>
      break;
 80019ae:	bf00      	nop
 80019b0:	e00a      	b.n	80019c8 <DMA_CheckFifoParam+0xe8>
      break;
 80019b2:	bf00      	nop
 80019b4:	e008      	b.n	80019c8 <DMA_CheckFifoParam+0xe8>
      break;
 80019b6:	bf00      	nop
 80019b8:	e006      	b.n	80019c8 <DMA_CheckFifoParam+0xe8>
      break;
 80019ba:	bf00      	nop
 80019bc:	e004      	b.n	80019c8 <DMA_CheckFifoParam+0xe8>
      break;
 80019be:	bf00      	nop
 80019c0:	e002      	b.n	80019c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80019c2:	bf00      	nop
 80019c4:	e000      	b.n	80019c8 <DMA_CheckFifoParam+0xe8>
      break;
 80019c6:	bf00      	nop
    }
  } 
  
  return status; 
 80019c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop

080019d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d8:	b480      	push	{r7}
 80019da:	b089      	sub	sp, #36	; 0x24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019e2:	2300      	movs	r3, #0
 80019e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019e6:	2300      	movs	r3, #0
 80019e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ee:	2300      	movs	r3, #0
 80019f0:	61fb      	str	r3, [r7, #28]
 80019f2:	e159      	b.n	8001ca8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019f4:	2201      	movs	r2, #1
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	4013      	ands	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	f040 8148 	bne.w	8001ca2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f003 0303 	and.w	r3, r3, #3
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d005      	beq.n	8001a2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d130      	bne.n	8001a8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	2203      	movs	r2, #3
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	68da      	ldr	r2, [r3, #12]
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a60:	2201      	movs	r2, #1
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	091b      	lsrs	r3, r3, #4
 8001a76:	f003 0201 	and.w	r2, r3, #1
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 0303 	and.w	r3, r3, #3
 8001a94:	2b03      	cmp	r3, #3
 8001a96:	d017      	beq.n	8001ac8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 0303 	and.w	r3, r3, #3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d123      	bne.n	8001b1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	08da      	lsrs	r2, r3, #3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3208      	adds	r2, #8
 8001adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	f003 0307 	and.w	r3, r3, #7
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	220f      	movs	r2, #15
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4013      	ands	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	691a      	ldr	r2, [r3, #16]
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	08da      	lsrs	r2, r3, #3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	3208      	adds	r2, #8
 8001b16:	69b9      	ldr	r1, [r7, #24]
 8001b18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	2203      	movs	r2, #3
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4013      	ands	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 0203 	and.w	r2, r3, #3
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f000 80a2 	beq.w	8001ca2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	4b57      	ldr	r3, [pc, #348]	; (8001cc0 <HAL_GPIO_Init+0x2e8>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b66:	4a56      	ldr	r2, [pc, #344]	; (8001cc0 <HAL_GPIO_Init+0x2e8>)
 8001b68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b6e:	4b54      	ldr	r3, [pc, #336]	; (8001cc0 <HAL_GPIO_Init+0x2e8>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b7a:	4a52      	ldr	r2, [pc, #328]	; (8001cc4 <HAL_GPIO_Init+0x2ec>)
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	089b      	lsrs	r3, r3, #2
 8001b80:	3302      	adds	r3, #2
 8001b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	f003 0303 	and.w	r3, r3, #3
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	220f      	movs	r2, #15
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43db      	mvns	r3, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a49      	ldr	r2, [pc, #292]	; (8001cc8 <HAL_GPIO_Init+0x2f0>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d019      	beq.n	8001bda <HAL_GPIO_Init+0x202>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a48      	ldr	r2, [pc, #288]	; (8001ccc <HAL_GPIO_Init+0x2f4>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d013      	beq.n	8001bd6 <HAL_GPIO_Init+0x1fe>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a47      	ldr	r2, [pc, #284]	; (8001cd0 <HAL_GPIO_Init+0x2f8>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d00d      	beq.n	8001bd2 <HAL_GPIO_Init+0x1fa>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a46      	ldr	r2, [pc, #280]	; (8001cd4 <HAL_GPIO_Init+0x2fc>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d007      	beq.n	8001bce <HAL_GPIO_Init+0x1f6>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a45      	ldr	r2, [pc, #276]	; (8001cd8 <HAL_GPIO_Init+0x300>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d101      	bne.n	8001bca <HAL_GPIO_Init+0x1f2>
 8001bc6:	2304      	movs	r3, #4
 8001bc8:	e008      	b.n	8001bdc <HAL_GPIO_Init+0x204>
 8001bca:	2307      	movs	r3, #7
 8001bcc:	e006      	b.n	8001bdc <HAL_GPIO_Init+0x204>
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e004      	b.n	8001bdc <HAL_GPIO_Init+0x204>
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	e002      	b.n	8001bdc <HAL_GPIO_Init+0x204>
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e000      	b.n	8001bdc <HAL_GPIO_Init+0x204>
 8001bda:	2300      	movs	r3, #0
 8001bdc:	69fa      	ldr	r2, [r7, #28]
 8001bde:	f002 0203 	and.w	r2, r2, #3
 8001be2:	0092      	lsls	r2, r2, #2
 8001be4:	4093      	lsls	r3, r2
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bec:	4935      	ldr	r1, [pc, #212]	; (8001cc4 <HAL_GPIO_Init+0x2ec>)
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	089b      	lsrs	r3, r3, #2
 8001bf2:	3302      	adds	r3, #2
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bfa:	4b38      	ldr	r3, [pc, #224]	; (8001cdc <HAL_GPIO_Init+0x304>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	43db      	mvns	r3, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4013      	ands	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c1e:	4a2f      	ldr	r2, [pc, #188]	; (8001cdc <HAL_GPIO_Init+0x304>)
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c24:	4b2d      	ldr	r3, [pc, #180]	; (8001cdc <HAL_GPIO_Init+0x304>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d003      	beq.n	8001c48 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c48:	4a24      	ldr	r2, [pc, #144]	; (8001cdc <HAL_GPIO_Init+0x304>)
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c4e:	4b23      	ldr	r3, [pc, #140]	; (8001cdc <HAL_GPIO_Init+0x304>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	43db      	mvns	r3, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c72:	4a1a      	ldr	r2, [pc, #104]	; (8001cdc <HAL_GPIO_Init+0x304>)
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c78:	4b18      	ldr	r3, [pc, #96]	; (8001cdc <HAL_GPIO_Init+0x304>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	43db      	mvns	r3, r3
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4013      	ands	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d003      	beq.n	8001c9c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c9c:	4a0f      	ldr	r2, [pc, #60]	; (8001cdc <HAL_GPIO_Init+0x304>)
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	61fb      	str	r3, [r7, #28]
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	2b0f      	cmp	r3, #15
 8001cac:	f67f aea2 	bls.w	80019f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	bf00      	nop
 8001cb4:	3724      	adds	r7, #36	; 0x24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40013800 	.word	0x40013800
 8001cc8:	40020000 	.word	0x40020000
 8001ccc:	40020400 	.word	0x40020400
 8001cd0:	40020800 	.word	0x40020800
 8001cd4:	40020c00 	.word	0x40020c00
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	40013c00 	.word	0x40013c00

08001ce0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	807b      	strh	r3, [r7, #2]
 8001cec:	4613      	mov	r3, r2
 8001cee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cf0:	787b      	ldrb	r3, [r7, #1]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cf6:	887a      	ldrh	r2, [r7, #2]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cfc:	e003      	b.n	8001d06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cfe:	887b      	ldrh	r3, [r7, #2]
 8001d00:	041a      	lsls	r2, r3, #16
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	619a      	str	r2, [r3, #24]
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
	...

08001d14 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b088      	sub	sp, #32
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e128      	b.n	8001f78 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d109      	bne.n	8001d46 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a90      	ldr	r2, [pc, #576]	; (8001f80 <HAL_I2S_Init+0x26c>)
 8001d3e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7fe ff99 	bl	8000c78 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2202      	movs	r2, #2
 8001d4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	69db      	ldr	r3, [r3, #28]
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	6812      	ldr	r2, [r2, #0]
 8001d58:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001d5c:	f023 030f 	bic.w	r3, r3, #15
 8001d60:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2202      	movs	r2, #2
 8001d68:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d060      	beq.n	8001e34 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d102      	bne.n	8001d80 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001d7a:	2310      	movs	r3, #16
 8001d7c:	617b      	str	r3, [r7, #20]
 8001d7e:	e001      	b.n	8001d84 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001d80:	2320      	movs	r3, #32
 8001d82:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	2b20      	cmp	r3, #32
 8001d8a:	d802      	bhi.n	8001d92 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001d92:	2001      	movs	r0, #1
 8001d94:	f001 fb86 	bl	80034a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8001d98:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001da2:	d125      	bne.n	8001df0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d010      	beq.n	8001dce <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	fbb2 f2f3 	udiv	r2, r2, r3
 8001db6:	4613      	mov	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	4413      	add	r3, r2
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	695b      	ldr	r3, [r3, #20]
 8001dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc8:	3305      	adds	r3, #5
 8001dca:	613b      	str	r3, [r7, #16]
 8001dcc:	e01f      	b.n	8001e0e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001dd8:	4613      	mov	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4413      	add	r3, r2
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	461a      	mov	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	695b      	ldr	r3, [r3, #20]
 8001de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dea:	3305      	adds	r3, #5
 8001dec:	613b      	str	r3, [r7, #16]
 8001dee:	e00e      	b.n	8001e0e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001df8:	4613      	mov	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	461a      	mov	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e0a:	3305      	adds	r3, #5
 8001e0c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	4a5c      	ldr	r2, [pc, #368]	; (8001f84 <HAL_I2S_Init+0x270>)
 8001e12:	fba2 2303 	umull	r2, r3, r2, r3
 8001e16:	08db      	lsrs	r3, r3, #3
 8001e18:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	085b      	lsrs	r3, r3, #1
 8001e2a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	021b      	lsls	r3, r3, #8
 8001e30:	61bb      	str	r3, [r7, #24]
 8001e32:	e003      	b.n	8001e3c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001e34:	2302      	movs	r3, #2
 8001e36:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d902      	bls.n	8001e48 <HAL_I2S_Init+0x134>
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	2bff      	cmp	r3, #255	; 0xff
 8001e46:	d907      	bls.n	8001e58 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4c:	f043 0210 	orr.w	r2, r3, #16
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e08f      	b.n	8001f78 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	691a      	ldr	r2, [r3, #16]
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	ea42 0103 	orr.w	r1, r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	69fa      	ldr	r2, [r7, #28]
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	69db      	ldr	r3, [r3, #28]
 8001e72:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001e76:	f023 030f 	bic.w	r3, r3, #15
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	6851      	ldr	r1, [r2, #4]
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	6892      	ldr	r2, [r2, #8]
 8001e82:	4311      	orrs	r1, r2
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	68d2      	ldr	r2, [r2, #12]
 8001e88:	4311      	orrs	r1, r2
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	6992      	ldr	r2, [r2, #24]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	431a      	orrs	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e9a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d161      	bne.n	8001f68 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a38      	ldr	r2, [pc, #224]	; (8001f88 <HAL_I2S_Init+0x274>)
 8001ea8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a37      	ldr	r2, [pc, #220]	; (8001f8c <HAL_I2S_Init+0x278>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d101      	bne.n	8001eb8 <HAL_I2S_Init+0x1a4>
 8001eb4:	4b36      	ldr	r3, [pc, #216]	; (8001f90 <HAL_I2S_Init+0x27c>)
 8001eb6:	e001      	b.n	8001ebc <HAL_I2S_Init+0x1a8>
 8001eb8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6812      	ldr	r2, [r2, #0]
 8001ec2:	4932      	ldr	r1, [pc, #200]	; (8001f8c <HAL_I2S_Init+0x278>)
 8001ec4:	428a      	cmp	r2, r1
 8001ec6:	d101      	bne.n	8001ecc <HAL_I2S_Init+0x1b8>
 8001ec8:	4a31      	ldr	r2, [pc, #196]	; (8001f90 <HAL_I2S_Init+0x27c>)
 8001eca:	e001      	b.n	8001ed0 <HAL_I2S_Init+0x1bc>
 8001ecc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001ed0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001ed4:	f023 030f 	bic.w	r3, r3, #15
 8001ed8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a2b      	ldr	r2, [pc, #172]	; (8001f8c <HAL_I2S_Init+0x278>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d101      	bne.n	8001ee8 <HAL_I2S_Init+0x1d4>
 8001ee4:	4b2a      	ldr	r3, [pc, #168]	; (8001f90 <HAL_I2S_Init+0x27c>)
 8001ee6:	e001      	b.n	8001eec <HAL_I2S_Init+0x1d8>
 8001ee8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001eec:	2202      	movs	r2, #2
 8001eee:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a25      	ldr	r2, [pc, #148]	; (8001f8c <HAL_I2S_Init+0x278>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d101      	bne.n	8001efe <HAL_I2S_Init+0x1ea>
 8001efa:	4b25      	ldr	r3, [pc, #148]	; (8001f90 <HAL_I2S_Init+0x27c>)
 8001efc:	e001      	b.n	8001f02 <HAL_I2S_Init+0x1ee>
 8001efe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f02:	69db      	ldr	r3, [r3, #28]
 8001f04:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f0e:	d003      	beq.n	8001f18 <HAL_I2S_Init+0x204>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d103      	bne.n	8001f20 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001f18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f1c:	613b      	str	r3, [r7, #16]
 8001f1e:	e001      	b.n	8001f24 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001f20:	2300      	movs	r3, #0
 8001f22:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001f42:	4313      	orrs	r3, r2
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	897b      	ldrh	r3, [r7, #10]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f50:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a0d      	ldr	r2, [pc, #52]	; (8001f8c <HAL_I2S_Init+0x278>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d101      	bne.n	8001f60 <HAL_I2S_Init+0x24c>
 8001f5c:	4b0c      	ldr	r3, [pc, #48]	; (8001f90 <HAL_I2S_Init+0x27c>)
 8001f5e:	e001      	b.n	8001f64 <HAL_I2S_Init+0x250>
 8001f60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f64:	897a      	ldrh	r2, [r7, #10]
 8001f66:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3720      	adds	r7, #32
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	08002433 	.word	0x08002433
 8001f84:	cccccccd 	.word	0xcccccccd
 8001f88:	08002549 	.word	0x08002549
 8001f8c:	40003800 	.word	0x40003800
 8001f90:	40003400 	.word	0x40003400

08001f94 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d002      	beq.n	8001fae <HAL_I2S_Transmit_DMA+0x1a>
 8001fa8:	88fb      	ldrh	r3, [r7, #6]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e08e      	b.n	80020d0 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d101      	bne.n	8001fc2 <HAL_I2S_Transmit_DMA+0x2e>
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	e086      	b.n	80020d0 <HAL_I2S_Transmit_DMA+0x13c>
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d005      	beq.n	8001fe2 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	e076      	b.n	80020d0 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2203      	movs	r2, #3
 8001fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2200      	movs	r2, #0
 8001fee:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	68ba      	ldr	r2, [r7, #8]
 8001ff4:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	69db      	ldr	r3, [r3, #28]
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	2b03      	cmp	r3, #3
 8002006:	d002      	beq.n	800200e <HAL_I2S_Transmit_DMA+0x7a>
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	2b05      	cmp	r3, #5
 800200c:	d10a      	bne.n	8002024 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 800200e:	88fb      	ldrh	r3, [r7, #6]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	b29a      	uxth	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002018:	88fb      	ldrh	r3, [r7, #6]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	b29a      	uxth	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002022:	e005      	b.n	8002030 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	88fa      	ldrh	r2, [r7, #6]
 8002028:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	88fa      	ldrh	r2, [r7, #6]
 800202e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002034:	4a28      	ldr	r2, [pc, #160]	; (80020d8 <HAL_I2S_Transmit_DMA+0x144>)
 8002036:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800203c:	4a27      	ldr	r2, [pc, #156]	; (80020dc <HAL_I2S_Transmit_DMA+0x148>)
 800203e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002044:	4a26      	ldr	r2, [pc, #152]	; (80020e0 <HAL_I2S_Transmit_DMA+0x14c>)
 8002046:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002050:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002058:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800205e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002060:	f7ff f9f8 	bl	8001454 <HAL_DMA_Start_IT>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00f      	beq.n	800208a <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206e:	f043 0208 	orr.w	r2, r3, #8
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e022      	b.n	80020d0 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002094:	2b00      	cmp	r3, #0
 8002096:	d107      	bne.n	80020a8 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	69da      	ldr	r2, [r3, #28]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80020a6:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d107      	bne.n	80020c6 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f042 0202 	orr.w	r2, r2, #2
 80020c4:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3718      	adds	r7, #24
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	080022b3 	.word	0x080022b3
 80020dc:	08002271 	.word	0x08002271
 80020e0:	0800232d 	.word	0x0800232d

080020e4 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	4613      	mov	r3, r2
 80020f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d002      	beq.n	80020fe <HAL_I2S_Receive_DMA+0x1a>
 80020f8:	88fb      	ldrh	r3, [r7, #6]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e0a1      	b.n	8002246 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b01      	cmp	r3, #1
 800210c:	d101      	bne.n	8002112 <HAL_I2S_Receive_DMA+0x2e>
 800210e:	2302      	movs	r3, #2
 8002110:	e099      	b.n	8002246 <HAL_I2S_Receive_DMA+0x162>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b01      	cmp	r3, #1
 8002124:	d005      	beq.n	8002132 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 800212e:	2302      	movs	r3, #2
 8002130:	e089      	b.n	8002246 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2204      	movs	r2, #4
 8002136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2200      	movs	r2, #0
 800213e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	68ba      	ldr	r2, [r7, #8]
 8002144:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	69db      	ldr	r3, [r3, #28]
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	2b03      	cmp	r3, #3
 8002156:	d002      	beq.n	800215e <HAL_I2S_Receive_DMA+0x7a>
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	2b05      	cmp	r3, #5
 800215c:	d10a      	bne.n	8002174 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 800215e:	88fb      	ldrh	r3, [r7, #6]
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	b29a      	uxth	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8002168:	88fb      	ldrh	r3, [r7, #6]
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	b29a      	uxth	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	865a      	strh	r2, [r3, #50]	; 0x32
 8002172:	e005      	b.n	8002180 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	88fa      	ldrh	r2, [r7, #6]
 8002178:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	88fa      	ldrh	r2, [r7, #6]
 800217e:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002184:	4a32      	ldr	r2, [pc, #200]	; (8002250 <HAL_I2S_Receive_DMA+0x16c>)
 8002186:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800218c:	4a31      	ldr	r2, [pc, #196]	; (8002254 <HAL_I2S_Receive_DMA+0x170>)
 800218e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002194:	4a30      	ldr	r2, [pc, #192]	; (8002258 <HAL_I2S_Receive_DMA+0x174>)
 8002196:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80021a6:	d10a      	bne.n	80021be <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80021a8:	2300      	movs	r3, #0
 80021aa:	613b      	str	r3, [r7, #16]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	613b      	str	r3, [r7, #16]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	613b      	str	r3, [r7, #16]
 80021bc:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	330c      	adds	r3, #12
 80021c8:	4619      	mov	r1, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ce:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80021d4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80021d6:	f7ff f93d 	bl	8001454 <HAL_DMA_Start_IT>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00f      	beq.n	8002200 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e4:	f043 0208 	orr.w	r2, r3, #8
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e022      	b.n	8002246 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800220a:	2b00      	cmp	r3, #0
 800220c:	d107      	bne.n	800221e <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	69da      	ldr	r2, [r3, #28]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800221c:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	2b00      	cmp	r3, #0
 800222a:	d107      	bne.n	800223c <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f042 0201 	orr.w	r2, r2, #1
 800223a:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3718      	adds	r7, #24
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	08002311 	.word	0x08002311
 8002254:	080022cf 	.word	0x080022cf
 8002258:	0800232d 	.word	0x0800232d

0800225c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d10e      	bne.n	80022a4 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 0202 	bic.w	r2, r2, #2
 8002294:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2200      	movs	r2, #0
 800229a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f7fe f961 	bl	800056c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80022aa:	bf00      	nop
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b084      	sub	sp, #16
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022be:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80022c0:	68f8      	ldr	r0, [r7, #12]
 80022c2:	f7fe f943 	bl	800054c <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80022c6:	bf00      	nop
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b084      	sub	sp, #16
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022da:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	69db      	ldr	r3, [r3, #28]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d10e      	bne.n	8002302 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f022 0201 	bic.w	r2, r2, #1
 80022f2:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f7fe f952 	bl	80005ac <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002308:	bf00      	nop
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800231c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f7fe f934 	bl	800058c <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002324:	bf00      	nop
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002338:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 0203 	bic.w	r2, r2, #3
 8002348:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2200      	movs	r2, #0
 8002354:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2201      	movs	r2, #1
 800235a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002362:	f043 0208 	orr.w	r2, r3, #8
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800236a:	68f8      	ldr	r0, [r7, #12]
 800236c:	f7ff ff76 	bl	800225c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002370:	bf00      	nop
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002384:	881a      	ldrh	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	1c9a      	adds	r2, r3, #2
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800239a:	b29b      	uxth	r3, r3
 800239c:	3b01      	subs	r3, #1
 800239e:	b29a      	uxth	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10e      	bne.n	80023cc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80023bc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7fe f8d0 	bl	800056c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80023cc:	bf00      	nop
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68da      	ldr	r2, [r3, #12]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e6:	b292      	uxth	r2, r2
 80023e8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ee:	1c9a      	adds	r2, r3, #2
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	3b01      	subs	r3, #1
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002406:	b29b      	uxth	r3, r3
 8002408:	2b00      	cmp	r3, #0
 800240a:	d10e      	bne.n	800242a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800241a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f7fe f8c1 	bl	80005ac <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800242a:	bf00      	nop
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b086      	sub	sp, #24
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b04      	cmp	r3, #4
 800244c:	d13a      	bne.n	80024c4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	2b01      	cmp	r3, #1
 8002456:	d109      	bne.n	800246c <I2S_IRQHandler+0x3a>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002462:	2b40      	cmp	r3, #64	; 0x40
 8002464:	d102      	bne.n	800246c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7ff ffb4 	bl	80023d4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002472:	2b40      	cmp	r3, #64	; 0x40
 8002474:	d126      	bne.n	80024c4 <I2S_IRQHandler+0x92>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f003 0320 	and.w	r3, r3, #32
 8002480:	2b20      	cmp	r3, #32
 8002482:	d11f      	bne.n	80024c4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002492:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002494:	2300      	movs	r3, #0
 8002496:	613b      	str	r3, [r7, #16]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	613b      	str	r3, [r7, #16]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	613b      	str	r3, [r7, #16]
 80024a8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b6:	f043 0202 	orr.w	r2, r3, #2
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7ff fecc 	bl	800225c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b03      	cmp	r3, #3
 80024ce:	d136      	bne.n	800253e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d109      	bne.n	80024ee <I2S_IRQHandler+0xbc>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e4:	2b80      	cmp	r3, #128	; 0x80
 80024e6:	d102      	bne.n	80024ee <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7ff ff45 	bl	8002378 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	f003 0308 	and.w	r3, r3, #8
 80024f4:	2b08      	cmp	r3, #8
 80024f6:	d122      	bne.n	800253e <I2S_IRQHandler+0x10c>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f003 0320 	and.w	r3, r3, #32
 8002502:	2b20      	cmp	r3, #32
 8002504:	d11b      	bne.n	800253e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002514:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002516:	2300      	movs	r3, #0
 8002518:	60fb      	str	r3, [r7, #12]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002530:	f043 0204 	orr.w	r2, r3, #4
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f7ff fe8f 	bl	800225c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800253e:	bf00      	nop
 8002540:	3718      	adds	r7, #24
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
	...

08002548 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b088      	sub	sp, #32
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a92      	ldr	r2, [pc, #584]	; (80027a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d101      	bne.n	8002566 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002562:	4b92      	ldr	r3, [pc, #584]	; (80027ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002564:	e001      	b.n	800256a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002566:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a8b      	ldr	r2, [pc, #556]	; (80027a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d101      	bne.n	8002584 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002580:	4b8a      	ldr	r3, [pc, #552]	; (80027ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002582:	e001      	b.n	8002588 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002584:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002594:	d004      	beq.n	80025a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	f040 8099 	bne.w	80026d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d107      	bne.n	80025ba <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d002      	beq.n	80025ba <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 f925 	bl	8002804 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d107      	bne.n	80025d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d002      	beq.n	80025d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f9c8 	bl	8002964 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025da:	2b40      	cmp	r3, #64	; 0x40
 80025dc:	d13a      	bne.n	8002654 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	f003 0320 	and.w	r3, r3, #32
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d035      	beq.n	8002654 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a6e      	ldr	r2, [pc, #440]	; (80027a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d101      	bne.n	80025f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80025f2:	4b6e      	ldr	r3, [pc, #440]	; (80027ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80025f4:	e001      	b.n	80025fa <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80025f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4969      	ldr	r1, [pc, #420]	; (80027a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002602:	428b      	cmp	r3, r1
 8002604:	d101      	bne.n	800260a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002606:	4b69      	ldr	r3, [pc, #420]	; (80027ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002608:	e001      	b.n	800260e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800260a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800260e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002612:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002622:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002624:	2300      	movs	r3, #0
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002646:	f043 0202 	orr.w	r2, r3, #2
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7ff fe04 	bl	800225c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	f003 0308 	and.w	r3, r3, #8
 800265a:	2b08      	cmp	r3, #8
 800265c:	f040 80c3 	bne.w	80027e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	f003 0320 	and.w	r3, r3, #32
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 80bd 	beq.w	80027e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800267a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a49      	ldr	r2, [pc, #292]	; (80027a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d101      	bne.n	800268a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002686:	4b49      	ldr	r3, [pc, #292]	; (80027ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002688:	e001      	b.n	800268e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800268a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4944      	ldr	r1, [pc, #272]	; (80027a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002696:	428b      	cmp	r3, r1
 8002698:	d101      	bne.n	800269e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800269a:	4b44      	ldr	r3, [pc, #272]	; (80027ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800269c:	e001      	b.n	80026a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800269e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80026a6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80026a8:	2300      	movs	r3, #0
 80026aa:	60bb      	str	r3, [r7, #8]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	60bb      	str	r3, [r7, #8]
 80026b4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c2:	f043 0204 	orr.w	r2, r3, #4
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7ff fdc6 	bl	800225c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80026d0:	e089      	b.n	80027e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d107      	bne.n	80026ec <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d002      	beq.n	80026ec <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f8be 	bl	8002868 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d107      	bne.n	8002706 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d002      	beq.n	8002706 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 f8fd 	bl	8002900 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800270c:	2b40      	cmp	r3, #64	; 0x40
 800270e:	d12f      	bne.n	8002770 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	f003 0320 	and.w	r3, r3, #32
 8002716:	2b00      	cmp	r3, #0
 8002718:	d02a      	beq.n	8002770 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002728:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a1e      	ldr	r2, [pc, #120]	; (80027a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d101      	bne.n	8002738 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002734:	4b1d      	ldr	r3, [pc, #116]	; (80027ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002736:	e001      	b.n	800273c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002738:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4919      	ldr	r1, [pc, #100]	; (80027a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002744:	428b      	cmp	r3, r1
 8002746:	d101      	bne.n	800274c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002748:	4b18      	ldr	r3, [pc, #96]	; (80027ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800274a:	e001      	b.n	8002750 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800274c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002750:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002754:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002762:	f043 0202 	orr.w	r2, r3, #2
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7ff fd76 	bl	800225c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	f003 0308 	and.w	r3, r3, #8
 8002776:	2b08      	cmp	r3, #8
 8002778:	d136      	bne.n	80027e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	f003 0320 	and.w	r3, r3, #32
 8002780:	2b00      	cmp	r3, #0
 8002782:	d031      	beq.n	80027e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a07      	ldr	r2, [pc, #28]	; (80027a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d101      	bne.n	8002792 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800278e:	4b07      	ldr	r3, [pc, #28]	; (80027ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002790:	e001      	b.n	8002796 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002792:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002796:	685a      	ldr	r2, [r3, #4]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4902      	ldr	r1, [pc, #8]	; (80027a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800279e:	428b      	cmp	r3, r1
 80027a0:	d106      	bne.n	80027b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80027a2:	4b02      	ldr	r3, [pc, #8]	; (80027ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80027a4:	e006      	b.n	80027b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80027a6:	bf00      	nop
 80027a8:	40003800 	.word	0x40003800
 80027ac:	40003400 	.word	0x40003400
 80027b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80027b8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80027c8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d6:	f043 0204 	orr.w	r2, r3, #4
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7ff fd3c 	bl	800225c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80027e4:	e000      	b.n	80027e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80027e6:	bf00      	nop
}
 80027e8:	bf00      	nop
 80027ea:	3720      	adds	r7, #32
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002810:	1c99      	adds	r1, r3, #2
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	6251      	str	r1, [r2, #36]	; 0x24
 8002816:	881a      	ldrh	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002822:	b29b      	uxth	r3, r3
 8002824:	3b01      	subs	r3, #1
 8002826:	b29a      	uxth	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002830:	b29b      	uxth	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d113      	bne.n	800285e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002844:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800284a:	b29b      	uxth	r3, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	d106      	bne.n	800285e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f7ff ffc9 	bl	80027f0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800285e:	bf00      	nop
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
	...

08002868 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002874:	1c99      	adds	r1, r3, #2
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	6251      	str	r1, [r2, #36]	; 0x24
 800287a:	8819      	ldrh	r1, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a1d      	ldr	r2, [pc, #116]	; (80028f8 <I2SEx_TxISR_I2SExt+0x90>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d101      	bne.n	800288a <I2SEx_TxISR_I2SExt+0x22>
 8002886:	4b1d      	ldr	r3, [pc, #116]	; (80028fc <I2SEx_TxISR_I2SExt+0x94>)
 8002888:	e001      	b.n	800288e <I2SEx_TxISR_I2SExt+0x26>
 800288a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800288e:	460a      	mov	r2, r1
 8002890:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002896:	b29b      	uxth	r3, r3
 8002898:	3b01      	subs	r3, #1
 800289a:	b29a      	uxth	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d121      	bne.n	80028ee <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a12      	ldr	r2, [pc, #72]	; (80028f8 <I2SEx_TxISR_I2SExt+0x90>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d101      	bne.n	80028b8 <I2SEx_TxISR_I2SExt+0x50>
 80028b4:	4b11      	ldr	r3, [pc, #68]	; (80028fc <I2SEx_TxISR_I2SExt+0x94>)
 80028b6:	e001      	b.n	80028bc <I2SEx_TxISR_I2SExt+0x54>
 80028b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	490d      	ldr	r1, [pc, #52]	; (80028f8 <I2SEx_TxISR_I2SExt+0x90>)
 80028c4:	428b      	cmp	r3, r1
 80028c6:	d101      	bne.n	80028cc <I2SEx_TxISR_I2SExt+0x64>
 80028c8:	4b0c      	ldr	r3, [pc, #48]	; (80028fc <I2SEx_TxISR_I2SExt+0x94>)
 80028ca:	e001      	b.n	80028d0 <I2SEx_TxISR_I2SExt+0x68>
 80028cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80028d4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80028da:	b29b      	uxth	r3, r3
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d106      	bne.n	80028ee <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f7ff ff81 	bl	80027f0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	40003800 	.word	0x40003800
 80028fc:	40003400 	.word	0x40003400

08002900 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68d8      	ldr	r0, [r3, #12]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002912:	1c99      	adds	r1, r3, #2
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002918:	b282      	uxth	r2, r0
 800291a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002920:	b29b      	uxth	r3, r3
 8002922:	3b01      	subs	r3, #1
 8002924:	b29a      	uxth	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800292e:	b29b      	uxth	r3, r3
 8002930:	2b00      	cmp	r3, #0
 8002932:	d113      	bne.n	800295c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002942:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002948:	b29b      	uxth	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d106      	bne.n	800295c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2201      	movs	r2, #1
 8002952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7ff ff4a 	bl	80027f0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800295c:	bf00      	nop
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a20      	ldr	r2, [pc, #128]	; (80029f4 <I2SEx_RxISR_I2SExt+0x90>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d101      	bne.n	800297a <I2SEx_RxISR_I2SExt+0x16>
 8002976:	4b20      	ldr	r3, [pc, #128]	; (80029f8 <I2SEx_RxISR_I2SExt+0x94>)
 8002978:	e001      	b.n	800297e <I2SEx_RxISR_I2SExt+0x1a>
 800297a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800297e:	68d8      	ldr	r0, [r3, #12]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002984:	1c99      	adds	r1, r3, #2
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	62d1      	str	r1, [r2, #44]	; 0x2c
 800298a:	b282      	uxth	r2, r0
 800298c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002992:	b29b      	uxth	r3, r3
 8002994:	3b01      	subs	r3, #1
 8002996:	b29a      	uxth	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d121      	bne.n	80029ea <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a12      	ldr	r2, [pc, #72]	; (80029f4 <I2SEx_RxISR_I2SExt+0x90>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d101      	bne.n	80029b4 <I2SEx_RxISR_I2SExt+0x50>
 80029b0:	4b11      	ldr	r3, [pc, #68]	; (80029f8 <I2SEx_RxISR_I2SExt+0x94>)
 80029b2:	e001      	b.n	80029b8 <I2SEx_RxISR_I2SExt+0x54>
 80029b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029b8:	685a      	ldr	r2, [r3, #4]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	490d      	ldr	r1, [pc, #52]	; (80029f4 <I2SEx_RxISR_I2SExt+0x90>)
 80029c0:	428b      	cmp	r3, r1
 80029c2:	d101      	bne.n	80029c8 <I2SEx_RxISR_I2SExt+0x64>
 80029c4:	4b0c      	ldr	r3, [pc, #48]	; (80029f8 <I2SEx_RxISR_I2SExt+0x94>)
 80029c6:	e001      	b.n	80029cc <I2SEx_RxISR_I2SExt+0x68>
 80029c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029cc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80029d0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d106      	bne.n	80029ea <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f7ff ff03 	bl	80027f0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80029ea:	bf00      	nop
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	40003800 	.word	0x40003800
 80029f8:	40003400 	.word	0x40003400

080029fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e267      	b.n	8002ede <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d075      	beq.n	8002b06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a1a:	4b88      	ldr	r3, [pc, #544]	; (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 030c 	and.w	r3, r3, #12
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d00c      	beq.n	8002a40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a26:	4b85      	ldr	r3, [pc, #532]	; (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a2e:	2b08      	cmp	r3, #8
 8002a30:	d112      	bne.n	8002a58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a32:	4b82      	ldr	r3, [pc, #520]	; (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a3e:	d10b      	bne.n	8002a58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a40:	4b7e      	ldr	r3, [pc, #504]	; (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d05b      	beq.n	8002b04 <HAL_RCC_OscConfig+0x108>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d157      	bne.n	8002b04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e242      	b.n	8002ede <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a60:	d106      	bne.n	8002a70 <HAL_RCC_OscConfig+0x74>
 8002a62:	4b76      	ldr	r3, [pc, #472]	; (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a75      	ldr	r2, [pc, #468]	; (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a6c:	6013      	str	r3, [r2, #0]
 8002a6e:	e01d      	b.n	8002aac <HAL_RCC_OscConfig+0xb0>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a78:	d10c      	bne.n	8002a94 <HAL_RCC_OscConfig+0x98>
 8002a7a:	4b70      	ldr	r3, [pc, #448]	; (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a6f      	ldr	r2, [pc, #444]	; (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002a80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a84:	6013      	str	r3, [r2, #0]
 8002a86:	4b6d      	ldr	r3, [pc, #436]	; (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a6c      	ldr	r2, [pc, #432]	; (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a90:	6013      	str	r3, [r2, #0]
 8002a92:	e00b      	b.n	8002aac <HAL_RCC_OscConfig+0xb0>
 8002a94:	4b69      	ldr	r3, [pc, #420]	; (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a68      	ldr	r2, [pc, #416]	; (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002a9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a9e:	6013      	str	r3, [r2, #0]
 8002aa0:	4b66      	ldr	r3, [pc, #408]	; (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a65      	ldr	r2, [pc, #404]	; (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002aa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d013      	beq.n	8002adc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab4:	f7fe fae6 	bl	8001084 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002abc:	f7fe fae2 	bl	8001084 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b64      	cmp	r3, #100	; 0x64
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e207      	b.n	8002ede <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ace:	4b5b      	ldr	r3, [pc, #364]	; (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0f0      	beq.n	8002abc <HAL_RCC_OscConfig+0xc0>
 8002ada:	e014      	b.n	8002b06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002adc:	f7fe fad2 	bl	8001084 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ae4:	f7fe face 	bl	8001084 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b64      	cmp	r3, #100	; 0x64
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e1f3      	b.n	8002ede <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002af6:	4b51      	ldr	r3, [pc, #324]	; (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1f0      	bne.n	8002ae4 <HAL_RCC_OscConfig+0xe8>
 8002b02:	e000      	b.n	8002b06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d063      	beq.n	8002bda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b12:	4b4a      	ldr	r3, [pc, #296]	; (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 030c 	and.w	r3, r3, #12
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00b      	beq.n	8002b36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b1e:	4b47      	ldr	r3, [pc, #284]	; (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b26:	2b08      	cmp	r3, #8
 8002b28:	d11c      	bne.n	8002b64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b2a:	4b44      	ldr	r3, [pc, #272]	; (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d116      	bne.n	8002b64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b36:	4b41      	ldr	r3, [pc, #260]	; (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d005      	beq.n	8002b4e <HAL_RCC_OscConfig+0x152>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d001      	beq.n	8002b4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e1c7      	b.n	8002ede <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b4e:	4b3b      	ldr	r3, [pc, #236]	; (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	4937      	ldr	r1, [pc, #220]	; (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b62:	e03a      	b.n	8002bda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d020      	beq.n	8002bae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b6c:	4b34      	ldr	r3, [pc, #208]	; (8002c40 <HAL_RCC_OscConfig+0x244>)
 8002b6e:	2201      	movs	r2, #1
 8002b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b72:	f7fe fa87 	bl	8001084 <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b78:	e008      	b.n	8002b8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b7a:	f7fe fa83 	bl	8001084 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e1a8      	b.n	8002ede <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b8c:	4b2b      	ldr	r3, [pc, #172]	; (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0f0      	beq.n	8002b7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b98:	4b28      	ldr	r3, [pc, #160]	; (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	4925      	ldr	r1, [pc, #148]	; (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	600b      	str	r3, [r1, #0]
 8002bac:	e015      	b.n	8002bda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bae:	4b24      	ldr	r3, [pc, #144]	; (8002c40 <HAL_RCC_OscConfig+0x244>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb4:	f7fe fa66 	bl	8001084 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bbc:	f7fe fa62 	bl	8001084 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e187      	b.n	8002ede <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bce:	4b1b      	ldr	r3, [pc, #108]	; (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1f0      	bne.n	8002bbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0308 	and.w	r3, r3, #8
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d036      	beq.n	8002c54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d016      	beq.n	8002c1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bee:	4b15      	ldr	r3, [pc, #84]	; (8002c44 <HAL_RCC_OscConfig+0x248>)
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf4:	f7fe fa46 	bl	8001084 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bfc:	f7fe fa42 	bl	8001084 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e167      	b.n	8002ede <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c0e:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <HAL_RCC_OscConfig+0x240>)
 8002c10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0f0      	beq.n	8002bfc <HAL_RCC_OscConfig+0x200>
 8002c1a:	e01b      	b.n	8002c54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c1c:	4b09      	ldr	r3, [pc, #36]	; (8002c44 <HAL_RCC_OscConfig+0x248>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c22:	f7fe fa2f 	bl	8001084 <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c28:	e00e      	b.n	8002c48 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c2a:	f7fe fa2b 	bl	8001084 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d907      	bls.n	8002c48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e150      	b.n	8002ede <HAL_RCC_OscConfig+0x4e2>
 8002c3c:	40023800 	.word	0x40023800
 8002c40:	42470000 	.word	0x42470000
 8002c44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c48:	4b88      	ldr	r3, [pc, #544]	; (8002e6c <HAL_RCC_OscConfig+0x470>)
 8002c4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d1ea      	bne.n	8002c2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 8097 	beq.w	8002d90 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c62:	2300      	movs	r3, #0
 8002c64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c66:	4b81      	ldr	r3, [pc, #516]	; (8002e6c <HAL_RCC_OscConfig+0x470>)
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10f      	bne.n	8002c92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c72:	2300      	movs	r3, #0
 8002c74:	60bb      	str	r3, [r7, #8]
 8002c76:	4b7d      	ldr	r3, [pc, #500]	; (8002e6c <HAL_RCC_OscConfig+0x470>)
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	4a7c      	ldr	r2, [pc, #496]	; (8002e6c <HAL_RCC_OscConfig+0x470>)
 8002c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c80:	6413      	str	r3, [r2, #64]	; 0x40
 8002c82:	4b7a      	ldr	r3, [pc, #488]	; (8002e6c <HAL_RCC_OscConfig+0x470>)
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c8a:	60bb      	str	r3, [r7, #8]
 8002c8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c92:	4b77      	ldr	r3, [pc, #476]	; (8002e70 <HAL_RCC_OscConfig+0x474>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d118      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c9e:	4b74      	ldr	r3, [pc, #464]	; (8002e70 <HAL_RCC_OscConfig+0x474>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a73      	ldr	r2, [pc, #460]	; (8002e70 <HAL_RCC_OscConfig+0x474>)
 8002ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002caa:	f7fe f9eb 	bl	8001084 <HAL_GetTick>
 8002cae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb0:	e008      	b.n	8002cc4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cb2:	f7fe f9e7 	bl	8001084 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e10c      	b.n	8002ede <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc4:	4b6a      	ldr	r3, [pc, #424]	; (8002e70 <HAL_RCC_OscConfig+0x474>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0f0      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d106      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x2ea>
 8002cd8:	4b64      	ldr	r3, [pc, #400]	; (8002e6c <HAL_RCC_OscConfig+0x470>)
 8002cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cdc:	4a63      	ldr	r2, [pc, #396]	; (8002e6c <HAL_RCC_OscConfig+0x470>)
 8002cde:	f043 0301 	orr.w	r3, r3, #1
 8002ce2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ce4:	e01c      	b.n	8002d20 <HAL_RCC_OscConfig+0x324>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	2b05      	cmp	r3, #5
 8002cec:	d10c      	bne.n	8002d08 <HAL_RCC_OscConfig+0x30c>
 8002cee:	4b5f      	ldr	r3, [pc, #380]	; (8002e6c <HAL_RCC_OscConfig+0x470>)
 8002cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf2:	4a5e      	ldr	r2, [pc, #376]	; (8002e6c <HAL_RCC_OscConfig+0x470>)
 8002cf4:	f043 0304 	orr.w	r3, r3, #4
 8002cf8:	6713      	str	r3, [r2, #112]	; 0x70
 8002cfa:	4b5c      	ldr	r3, [pc, #368]	; (8002e6c <HAL_RCC_OscConfig+0x470>)
 8002cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfe:	4a5b      	ldr	r2, [pc, #364]	; (8002e6c <HAL_RCC_OscConfig+0x470>)
 8002d00:	f043 0301 	orr.w	r3, r3, #1
 8002d04:	6713      	str	r3, [r2, #112]	; 0x70
 8002d06:	e00b      	b.n	8002d20 <HAL_RCC_OscConfig+0x324>
 8002d08:	4b58      	ldr	r3, [pc, #352]	; (8002e6c <HAL_RCC_OscConfig+0x470>)
 8002d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0c:	4a57      	ldr	r2, [pc, #348]	; (8002e6c <HAL_RCC_OscConfig+0x470>)
 8002d0e:	f023 0301 	bic.w	r3, r3, #1
 8002d12:	6713      	str	r3, [r2, #112]	; 0x70
 8002d14:	4b55      	ldr	r3, [pc, #340]	; (8002e6c <HAL_RCC_OscConfig+0x470>)
 8002d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d18:	4a54      	ldr	r2, [pc, #336]	; (8002e6c <HAL_RCC_OscConfig+0x470>)
 8002d1a:	f023 0304 	bic.w	r3, r3, #4
 8002d1e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d015      	beq.n	8002d54 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d28:	f7fe f9ac 	bl	8001084 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d2e:	e00a      	b.n	8002d46 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d30:	f7fe f9a8 	bl	8001084 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e0cb      	b.n	8002ede <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d46:	4b49      	ldr	r3, [pc, #292]	; (8002e6c <HAL_RCC_OscConfig+0x470>)
 8002d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d0ee      	beq.n	8002d30 <HAL_RCC_OscConfig+0x334>
 8002d52:	e014      	b.n	8002d7e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d54:	f7fe f996 	bl	8001084 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d5a:	e00a      	b.n	8002d72 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d5c:	f7fe f992 	bl	8001084 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e0b5      	b.n	8002ede <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d72:	4b3e      	ldr	r3, [pc, #248]	; (8002e6c <HAL_RCC_OscConfig+0x470>)
 8002d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1ee      	bne.n	8002d5c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d7e:	7dfb      	ldrb	r3, [r7, #23]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d105      	bne.n	8002d90 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d84:	4b39      	ldr	r3, [pc, #228]	; (8002e6c <HAL_RCC_OscConfig+0x470>)
 8002d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d88:	4a38      	ldr	r2, [pc, #224]	; (8002e6c <HAL_RCC_OscConfig+0x470>)
 8002d8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d8e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 80a1 	beq.w	8002edc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d9a:	4b34      	ldr	r3, [pc, #208]	; (8002e6c <HAL_RCC_OscConfig+0x470>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f003 030c 	and.w	r3, r3, #12
 8002da2:	2b08      	cmp	r3, #8
 8002da4:	d05c      	beq.n	8002e60 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d141      	bne.n	8002e32 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dae:	4b31      	ldr	r3, [pc, #196]	; (8002e74 <HAL_RCC_OscConfig+0x478>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db4:	f7fe f966 	bl	8001084 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dbc:	f7fe f962 	bl	8001084 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e087      	b.n	8002ede <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dce:	4b27      	ldr	r3, [pc, #156]	; (8002e6c <HAL_RCC_OscConfig+0x470>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1f0      	bne.n	8002dbc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	69da      	ldr	r2, [r3, #28]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	019b      	lsls	r3, r3, #6
 8002dea:	431a      	orrs	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df0:	085b      	lsrs	r3, r3, #1
 8002df2:	3b01      	subs	r3, #1
 8002df4:	041b      	lsls	r3, r3, #16
 8002df6:	431a      	orrs	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfc:	061b      	lsls	r3, r3, #24
 8002dfe:	491b      	ldr	r1, [pc, #108]	; (8002e6c <HAL_RCC_OscConfig+0x470>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e04:	4b1b      	ldr	r3, [pc, #108]	; (8002e74 <HAL_RCC_OscConfig+0x478>)
 8002e06:	2201      	movs	r2, #1
 8002e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0a:	f7fe f93b 	bl	8001084 <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e10:	e008      	b.n	8002e24 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e12:	f7fe f937 	bl	8001084 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e05c      	b.n	8002ede <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e24:	4b11      	ldr	r3, [pc, #68]	; (8002e6c <HAL_RCC_OscConfig+0x470>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d0f0      	beq.n	8002e12 <HAL_RCC_OscConfig+0x416>
 8002e30:	e054      	b.n	8002edc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e32:	4b10      	ldr	r3, [pc, #64]	; (8002e74 <HAL_RCC_OscConfig+0x478>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e38:	f7fe f924 	bl	8001084 <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e40:	f7fe f920 	bl	8001084 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e045      	b.n	8002ede <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e52:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <HAL_RCC_OscConfig+0x470>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1f0      	bne.n	8002e40 <HAL_RCC_OscConfig+0x444>
 8002e5e:	e03d      	b.n	8002edc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d107      	bne.n	8002e78 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e038      	b.n	8002ede <HAL_RCC_OscConfig+0x4e2>
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	40007000 	.word	0x40007000
 8002e74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e78:	4b1b      	ldr	r3, [pc, #108]	; (8002ee8 <HAL_RCC_OscConfig+0x4ec>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d028      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d121      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d11a      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002eae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d111      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ebe:	085b      	lsrs	r3, r3, #1
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d107      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d001      	beq.n	8002edc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e000      	b.n	8002ede <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3718      	adds	r7, #24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	40023800 	.word	0x40023800

08002eec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e0cc      	b.n	800309a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f00:	4b68      	ldr	r3, [pc, #416]	; (80030a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0307 	and.w	r3, r3, #7
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d90c      	bls.n	8002f28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f0e:	4b65      	ldr	r3, [pc, #404]	; (80030a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f16:	4b63      	ldr	r3, [pc, #396]	; (80030a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0307 	and.w	r3, r3, #7
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d001      	beq.n	8002f28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e0b8      	b.n	800309a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d020      	beq.n	8002f76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0304 	and.w	r3, r3, #4
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d005      	beq.n	8002f4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f40:	4b59      	ldr	r3, [pc, #356]	; (80030a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	4a58      	ldr	r2, [pc, #352]	; (80030a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0308 	and.w	r3, r3, #8
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d005      	beq.n	8002f64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f58:	4b53      	ldr	r3, [pc, #332]	; (80030a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	4a52      	ldr	r2, [pc, #328]	; (80030a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f64:	4b50      	ldr	r3, [pc, #320]	; (80030a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	494d      	ldr	r1, [pc, #308]	; (80030a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d044      	beq.n	800300c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d107      	bne.n	8002f9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f8a:	4b47      	ldr	r3, [pc, #284]	; (80030a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d119      	bne.n	8002fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e07f      	b.n	800309a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d003      	beq.n	8002faa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fa6:	2b03      	cmp	r3, #3
 8002fa8:	d107      	bne.n	8002fba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002faa:	4b3f      	ldr	r3, [pc, #252]	; (80030a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d109      	bne.n	8002fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e06f      	b.n	800309a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fba:	4b3b      	ldr	r3, [pc, #236]	; (80030a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e067      	b.n	800309a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fca:	4b37      	ldr	r3, [pc, #220]	; (80030a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f023 0203 	bic.w	r2, r3, #3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	4934      	ldr	r1, [pc, #208]	; (80030a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fdc:	f7fe f852 	bl	8001084 <HAL_GetTick>
 8002fe0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fe2:	e00a      	b.n	8002ffa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fe4:	f7fe f84e 	bl	8001084 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e04f      	b.n	800309a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ffa:	4b2b      	ldr	r3, [pc, #172]	; (80030a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 020c 	and.w	r2, r3, #12
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	429a      	cmp	r2, r3
 800300a:	d1eb      	bne.n	8002fe4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800300c:	4b25      	ldr	r3, [pc, #148]	; (80030a4 <HAL_RCC_ClockConfig+0x1b8>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0307 	and.w	r3, r3, #7
 8003014:	683a      	ldr	r2, [r7, #0]
 8003016:	429a      	cmp	r2, r3
 8003018:	d20c      	bcs.n	8003034 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800301a:	4b22      	ldr	r3, [pc, #136]	; (80030a4 <HAL_RCC_ClockConfig+0x1b8>)
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	b2d2      	uxtb	r2, r2
 8003020:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003022:	4b20      	ldr	r3, [pc, #128]	; (80030a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0307 	and.w	r3, r3, #7
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	429a      	cmp	r2, r3
 800302e:	d001      	beq.n	8003034 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e032      	b.n	800309a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0304 	and.w	r3, r3, #4
 800303c:	2b00      	cmp	r3, #0
 800303e:	d008      	beq.n	8003052 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003040:	4b19      	ldr	r3, [pc, #100]	; (80030a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	4916      	ldr	r1, [pc, #88]	; (80030a8 <HAL_RCC_ClockConfig+0x1bc>)
 800304e:	4313      	orrs	r3, r2
 8003050:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0308 	and.w	r3, r3, #8
 800305a:	2b00      	cmp	r3, #0
 800305c:	d009      	beq.n	8003072 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800305e:	4b12      	ldr	r3, [pc, #72]	; (80030a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	490e      	ldr	r1, [pc, #56]	; (80030a8 <HAL_RCC_ClockConfig+0x1bc>)
 800306e:	4313      	orrs	r3, r2
 8003070:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003072:	f000 f821 	bl	80030b8 <HAL_RCC_GetSysClockFreq>
 8003076:	4602      	mov	r2, r0
 8003078:	4b0b      	ldr	r3, [pc, #44]	; (80030a8 <HAL_RCC_ClockConfig+0x1bc>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	091b      	lsrs	r3, r3, #4
 800307e:	f003 030f 	and.w	r3, r3, #15
 8003082:	490a      	ldr	r1, [pc, #40]	; (80030ac <HAL_RCC_ClockConfig+0x1c0>)
 8003084:	5ccb      	ldrb	r3, [r1, r3]
 8003086:	fa22 f303 	lsr.w	r3, r2, r3
 800308a:	4a09      	ldr	r2, [pc, #36]	; (80030b0 <HAL_RCC_ClockConfig+0x1c4>)
 800308c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800308e:	4b09      	ldr	r3, [pc, #36]	; (80030b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4618      	mov	r0, r3
 8003094:	f7fd ffb2 	bl	8000ffc <HAL_InitTick>

  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	40023c00 	.word	0x40023c00
 80030a8:	40023800 	.word	0x40023800
 80030ac:	08005ca4 	.word	0x08005ca4
 80030b0:	20000400 	.word	0x20000400
 80030b4:	20000404 	.word	0x20000404

080030b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030bc:	b094      	sub	sp, #80	; 0x50
 80030be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030c0:	2300      	movs	r3, #0
 80030c2:	647b      	str	r3, [r7, #68]	; 0x44
 80030c4:	2300      	movs	r3, #0
 80030c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030c8:	2300      	movs	r3, #0
 80030ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80030cc:	2300      	movs	r3, #0
 80030ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030d0:	4b79      	ldr	r3, [pc, #484]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f003 030c 	and.w	r3, r3, #12
 80030d8:	2b08      	cmp	r3, #8
 80030da:	d00d      	beq.n	80030f8 <HAL_RCC_GetSysClockFreq+0x40>
 80030dc:	2b08      	cmp	r3, #8
 80030de:	f200 80e1 	bhi.w	80032a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d002      	beq.n	80030ec <HAL_RCC_GetSysClockFreq+0x34>
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	d003      	beq.n	80030f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80030ea:	e0db      	b.n	80032a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030ec:	4b73      	ldr	r3, [pc, #460]	; (80032bc <HAL_RCC_GetSysClockFreq+0x204>)
 80030ee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80030f0:	e0db      	b.n	80032aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030f2:	4b73      	ldr	r3, [pc, #460]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80030f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030f6:	e0d8      	b.n	80032aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030f8:	4b6f      	ldr	r3, [pc, #444]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003100:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003102:	4b6d      	ldr	r3, [pc, #436]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d063      	beq.n	80031d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800310e:	4b6a      	ldr	r3, [pc, #424]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	099b      	lsrs	r3, r3, #6
 8003114:	2200      	movs	r2, #0
 8003116:	63bb      	str	r3, [r7, #56]	; 0x38
 8003118:	63fa      	str	r2, [r7, #60]	; 0x3c
 800311a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800311c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003120:	633b      	str	r3, [r7, #48]	; 0x30
 8003122:	2300      	movs	r3, #0
 8003124:	637b      	str	r3, [r7, #52]	; 0x34
 8003126:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800312a:	4622      	mov	r2, r4
 800312c:	462b      	mov	r3, r5
 800312e:	f04f 0000 	mov.w	r0, #0
 8003132:	f04f 0100 	mov.w	r1, #0
 8003136:	0159      	lsls	r1, r3, #5
 8003138:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800313c:	0150      	lsls	r0, r2, #5
 800313e:	4602      	mov	r2, r0
 8003140:	460b      	mov	r3, r1
 8003142:	4621      	mov	r1, r4
 8003144:	1a51      	subs	r1, r2, r1
 8003146:	6139      	str	r1, [r7, #16]
 8003148:	4629      	mov	r1, r5
 800314a:	eb63 0301 	sbc.w	r3, r3, r1
 800314e:	617b      	str	r3, [r7, #20]
 8003150:	f04f 0200 	mov.w	r2, #0
 8003154:	f04f 0300 	mov.w	r3, #0
 8003158:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800315c:	4659      	mov	r1, fp
 800315e:	018b      	lsls	r3, r1, #6
 8003160:	4651      	mov	r1, sl
 8003162:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003166:	4651      	mov	r1, sl
 8003168:	018a      	lsls	r2, r1, #6
 800316a:	4651      	mov	r1, sl
 800316c:	ebb2 0801 	subs.w	r8, r2, r1
 8003170:	4659      	mov	r1, fp
 8003172:	eb63 0901 	sbc.w	r9, r3, r1
 8003176:	f04f 0200 	mov.w	r2, #0
 800317a:	f04f 0300 	mov.w	r3, #0
 800317e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003182:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003186:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800318a:	4690      	mov	r8, r2
 800318c:	4699      	mov	r9, r3
 800318e:	4623      	mov	r3, r4
 8003190:	eb18 0303 	adds.w	r3, r8, r3
 8003194:	60bb      	str	r3, [r7, #8]
 8003196:	462b      	mov	r3, r5
 8003198:	eb49 0303 	adc.w	r3, r9, r3
 800319c:	60fb      	str	r3, [r7, #12]
 800319e:	f04f 0200 	mov.w	r2, #0
 80031a2:	f04f 0300 	mov.w	r3, #0
 80031a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80031aa:	4629      	mov	r1, r5
 80031ac:	024b      	lsls	r3, r1, #9
 80031ae:	4621      	mov	r1, r4
 80031b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031b4:	4621      	mov	r1, r4
 80031b6:	024a      	lsls	r2, r1, #9
 80031b8:	4610      	mov	r0, r2
 80031ba:	4619      	mov	r1, r3
 80031bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031be:	2200      	movs	r2, #0
 80031c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80031c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031c8:	f7fd f806 	bl	80001d8 <__aeabi_uldivmod>
 80031cc:	4602      	mov	r2, r0
 80031ce:	460b      	mov	r3, r1
 80031d0:	4613      	mov	r3, r2
 80031d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031d4:	e058      	b.n	8003288 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031d6:	4b38      	ldr	r3, [pc, #224]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	099b      	lsrs	r3, r3, #6
 80031dc:	2200      	movs	r2, #0
 80031de:	4618      	mov	r0, r3
 80031e0:	4611      	mov	r1, r2
 80031e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031e6:	623b      	str	r3, [r7, #32]
 80031e8:	2300      	movs	r3, #0
 80031ea:	627b      	str	r3, [r7, #36]	; 0x24
 80031ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80031f0:	4642      	mov	r2, r8
 80031f2:	464b      	mov	r3, r9
 80031f4:	f04f 0000 	mov.w	r0, #0
 80031f8:	f04f 0100 	mov.w	r1, #0
 80031fc:	0159      	lsls	r1, r3, #5
 80031fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003202:	0150      	lsls	r0, r2, #5
 8003204:	4602      	mov	r2, r0
 8003206:	460b      	mov	r3, r1
 8003208:	4641      	mov	r1, r8
 800320a:	ebb2 0a01 	subs.w	sl, r2, r1
 800320e:	4649      	mov	r1, r9
 8003210:	eb63 0b01 	sbc.w	fp, r3, r1
 8003214:	f04f 0200 	mov.w	r2, #0
 8003218:	f04f 0300 	mov.w	r3, #0
 800321c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003220:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003224:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003228:	ebb2 040a 	subs.w	r4, r2, sl
 800322c:	eb63 050b 	sbc.w	r5, r3, fp
 8003230:	f04f 0200 	mov.w	r2, #0
 8003234:	f04f 0300 	mov.w	r3, #0
 8003238:	00eb      	lsls	r3, r5, #3
 800323a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800323e:	00e2      	lsls	r2, r4, #3
 8003240:	4614      	mov	r4, r2
 8003242:	461d      	mov	r5, r3
 8003244:	4643      	mov	r3, r8
 8003246:	18e3      	adds	r3, r4, r3
 8003248:	603b      	str	r3, [r7, #0]
 800324a:	464b      	mov	r3, r9
 800324c:	eb45 0303 	adc.w	r3, r5, r3
 8003250:	607b      	str	r3, [r7, #4]
 8003252:	f04f 0200 	mov.w	r2, #0
 8003256:	f04f 0300 	mov.w	r3, #0
 800325a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800325e:	4629      	mov	r1, r5
 8003260:	028b      	lsls	r3, r1, #10
 8003262:	4621      	mov	r1, r4
 8003264:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003268:	4621      	mov	r1, r4
 800326a:	028a      	lsls	r2, r1, #10
 800326c:	4610      	mov	r0, r2
 800326e:	4619      	mov	r1, r3
 8003270:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003272:	2200      	movs	r2, #0
 8003274:	61bb      	str	r3, [r7, #24]
 8003276:	61fa      	str	r2, [r7, #28]
 8003278:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800327c:	f7fc ffac 	bl	80001d8 <__aeabi_uldivmod>
 8003280:	4602      	mov	r2, r0
 8003282:	460b      	mov	r3, r1
 8003284:	4613      	mov	r3, r2
 8003286:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003288:	4b0b      	ldr	r3, [pc, #44]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	0c1b      	lsrs	r3, r3, #16
 800328e:	f003 0303 	and.w	r3, r3, #3
 8003292:	3301      	adds	r3, #1
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003298:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800329a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800329c:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032a2:	e002      	b.n	80032aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032a4:	4b05      	ldr	r3, [pc, #20]	; (80032bc <HAL_RCC_GetSysClockFreq+0x204>)
 80032a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3750      	adds	r7, #80	; 0x50
 80032b0:	46bd      	mov	sp, r7
 80032b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032b6:	bf00      	nop
 80032b8:	40023800 	.word	0x40023800
 80032bc:	00f42400 	.word	0x00f42400
 80032c0:	007a1200 	.word	0x007a1200

080032c4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80032d0:	2300      	movs	r3, #0
 80032d2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d105      	bne.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d038      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80032ec:	4b68      	ldr	r3, [pc, #416]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80032f2:	f7fd fec7 	bl	8001084 <HAL_GetTick>
 80032f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80032f8:	e008      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80032fa:	f7fd fec3 	bl	8001084 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d901      	bls.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e0bd      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800330c:	4b61      	ldr	r3, [pc, #388]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1f0      	bne.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	019b      	lsls	r3, r3, #6
 8003322:	431a      	orrs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	071b      	lsls	r3, r3, #28
 800332a:	495a      	ldr	r1, [pc, #360]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800332c:	4313      	orrs	r3, r2
 800332e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003332:	4b57      	ldr	r3, [pc, #348]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003334:	2201      	movs	r2, #1
 8003336:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003338:	f7fd fea4 	bl	8001084 <HAL_GetTick>
 800333c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003340:	f7fd fea0 	bl	8001084 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d901      	bls.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e09a      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003352:	4b50      	ldr	r3, [pc, #320]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0f0      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 8083 	beq.w	8003472 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800336c:	2300      	movs	r3, #0
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	4b48      	ldr	r3, [pc, #288]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003374:	4a47      	ldr	r2, [pc, #284]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003376:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800337a:	6413      	str	r3, [r2, #64]	; 0x40
 800337c:	4b45      	ldr	r3, [pc, #276]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800337e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003388:	4b43      	ldr	r3, [pc, #268]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a42      	ldr	r2, [pc, #264]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800338e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003392:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003394:	f7fd fe76 	bl	8001084 <HAL_GetTick>
 8003398:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800339a:	e008      	b.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800339c:	f7fd fe72 	bl	8001084 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e06c      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80033ae:	4b3a      	ldr	r3, [pc, #232]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d0f0      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033ba:	4b36      	ldr	r3, [pc, #216]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033c2:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d02f      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d028      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033d8:	4b2e      	ldr	r3, [pc, #184]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033e0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033e2:	4b2e      	ldr	r3, [pc, #184]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80033e4:	2201      	movs	r2, #1
 80033e6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033e8:	4b2c      	ldr	r3, [pc, #176]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80033ee:	4a29      	ldr	r2, [pc, #164]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80033f4:	4b27      	ldr	r3, [pc, #156]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d114      	bne.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003400:	f7fd fe40 	bl	8001084 <HAL_GetTick>
 8003404:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003406:	e00a      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003408:	f7fd fe3c 	bl	8001084 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	f241 3288 	movw	r2, #5000	; 0x1388
 8003416:	4293      	cmp	r3, r2
 8003418:	d901      	bls.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e034      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800341e:	4b1d      	ldr	r3, [pc, #116]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0ee      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003432:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003436:	d10d      	bne.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003438:	4b16      	ldr	r3, [pc, #88]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003448:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800344c:	4911      	ldr	r1, [pc, #68]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800344e:	4313      	orrs	r3, r2
 8003450:	608b      	str	r3, [r1, #8]
 8003452:	e005      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003454:	4b0f      	ldr	r3, [pc, #60]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	4a0e      	ldr	r2, [pc, #56]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800345a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800345e:	6093      	str	r3, [r2, #8]
 8003460:	4b0c      	ldr	r3, [pc, #48]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003462:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800346c:	4909      	ldr	r1, [pc, #36]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800346e:	4313      	orrs	r3, r2
 8003470:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0308 	and.w	r3, r3, #8
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	7d1a      	ldrb	r2, [r3, #20]
 8003482:	4b07      	ldr	r3, [pc, #28]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003484:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3718      	adds	r7, #24
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	42470068 	.word	0x42470068
 8003494:	40023800 	.word	0x40023800
 8003498:	40007000 	.word	0x40007000
 800349c:	42470e40 	.word	0x42470e40
 80034a0:	424711e0 	.word	0x424711e0

080034a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b087      	sub	sp, #28
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80034ac:	2300      	movs	r3, #0
 80034ae:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80034b0:	2300      	movs	r3, #0
 80034b2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80034b4:	2300      	movs	r3, #0
 80034b6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80034b8:	2300      	movs	r3, #0
 80034ba:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d140      	bne.n	8003544 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80034c2:	4b24      	ldr	r3, [pc, #144]	; (8003554 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034ca:	60fb      	str	r3, [r7, #12]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d005      	beq.n	80034de <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d131      	bne.n	800353c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80034d8:	4b1f      	ldr	r3, [pc, #124]	; (8003558 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80034da:	617b      	str	r3, [r7, #20]
          break;
 80034dc:	e031      	b.n	8003542 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80034de:	4b1d      	ldr	r3, [pc, #116]	; (8003554 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034ea:	d109      	bne.n	8003500 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80034ec:	4b19      	ldr	r3, [pc, #100]	; (8003554 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80034ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034f6:	4a19      	ldr	r2, [pc, #100]	; (800355c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80034f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034fc:	613b      	str	r3, [r7, #16]
 80034fe:	e008      	b.n	8003512 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003500:	4b14      	ldr	r3, [pc, #80]	; (8003554 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003502:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003506:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800350a:	4a15      	ldr	r2, [pc, #84]	; (8003560 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800350c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003510:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003512:	4b10      	ldr	r3, [pc, #64]	; (8003554 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003514:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003518:	099b      	lsrs	r3, r3, #6
 800351a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	fb02 f303 	mul.w	r3, r2, r3
 8003524:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003526:	4b0b      	ldr	r3, [pc, #44]	; (8003554 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003528:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800352c:	0f1b      	lsrs	r3, r3, #28
 800352e:	f003 0307 	and.w	r3, r3, #7
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	fbb2 f3f3 	udiv	r3, r2, r3
 8003538:	617b      	str	r3, [r7, #20]
          break;
 800353a:	e002      	b.n	8003542 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800353c:	2300      	movs	r3, #0
 800353e:	617b      	str	r3, [r7, #20]
          break;
 8003540:	bf00      	nop
        }
      }
      break;
 8003542:	bf00      	nop
    }
  }
  return frequency;
 8003544:	697b      	ldr	r3, [r7, #20]
}
 8003546:	4618      	mov	r0, r3
 8003548:	371c      	adds	r7, #28
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	40023800 	.word	0x40023800
 8003558:	00bb8000 	.word	0x00bb8000
 800355c:	007a1200 	.word	0x007a1200
 8003560:	00f42400 	.word	0x00f42400

08003564 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_MSB;
 8003568:	4b10      	ldr	r3, [pc, #64]	; (80035ac <MX_PDM2PCM_Init+0x48>)
 800356a:	2201      	movs	r2, #1
 800356c:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 800356e:	4b0f      	ldr	r3, [pc, #60]	; (80035ac <MX_PDM2PCM_Init+0x48>)
 8003570:	2201      	movs	r2, #1
 8003572:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 8003574:	4b0d      	ldr	r3, [pc, #52]	; (80035ac <MX_PDM2PCM_Init+0x48>)
 8003576:	4a0e      	ldr	r2, [pc, #56]	; (80035b0 <MX_PDM2PCM_Init+0x4c>)
 8003578:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 800357a:	4b0c      	ldr	r3, [pc, #48]	; (80035ac <MX_PDM2PCM_Init+0x48>)
 800357c:	2201      	movs	r2, #1
 800357e:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 8003580:	4b0a      	ldr	r3, [pc, #40]	; (80035ac <MX_PDM2PCM_Init+0x48>)
 8003582:	2201      	movs	r2, #1
 8003584:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 8003586:	4809      	ldr	r0, [pc, #36]	; (80035ac <MX_PDM2PCM_Init+0x48>)
 8003588:	f001 fd66 	bl	8005058 <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 800358c:	4b09      	ldr	r3, [pc, #36]	; (80035b4 <MX_PDM2PCM_Init+0x50>)
 800358e:	2202      	movs	r2, #2
 8003590:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 8003592:	4b08      	ldr	r3, [pc, #32]	; (80035b4 <MX_PDM2PCM_Init+0x50>)
 8003594:	2210      	movs	r2, #16
 8003596:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 24;
 8003598:	4b06      	ldr	r3, [pc, #24]	; (80035b4 <MX_PDM2PCM_Init+0x50>)
 800359a:	2218      	movs	r2, #24
 800359c:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 800359e:	4905      	ldr	r1, [pc, #20]	; (80035b4 <MX_PDM2PCM_Init+0x50>)
 80035a0:	4802      	ldr	r0, [pc, #8]	; (80035ac <MX_PDM2PCM_Init+0x48>)
 80035a2:	f001 fde3 	bl	800516c <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 80035a6:	bf00      	nop
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	20000a14 	.word	0x20000a14
 80035b0:	7d70a3d6 	.word	0x7d70a3d6
 80035b4:	20000a60 	.word	0x20000a60

080035b8 <D16_GENERIC>:
 80035b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035bc:	b089      	sub	sp, #36	; 0x24
 80035be:	68d4      	ldr	r4, [r2, #12]
 80035c0:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80035c2:	6993      	ldr	r3, [r2, #24]
 80035c4:	9407      	str	r4, [sp, #28]
 80035c6:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80035c8:	9306      	str	r3, [sp, #24]
 80035ca:	9402      	str	r4, [sp, #8]
 80035cc:	f8d2 a010 	ldr.w	sl, [r2, #16]
 80035d0:	f8d2 b014 	ldr.w	fp, [r2, #20]
 80035d4:	69d3      	ldr	r3, [r2, #28]
 80035d6:	6896      	ldr	r6, [r2, #8]
 80035d8:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80035da:	9103      	str	r1, [sp, #12]
 80035dc:	2d00      	cmp	r5, #0
 80035de:	d066      	beq.n	80036ae <D16_GENERIC+0xf6>
 80035e0:	f004 0510 	and.w	r5, r4, #16
 80035e4:	f004 0420 	and.w	r4, r4, #32
 80035e8:	9504      	str	r5, [sp, #16]
 80035ea:	4938      	ldr	r1, [pc, #224]	; (80036cc <D16_GENERIC+0x114>)
 80035ec:	9405      	str	r4, [sp, #20]
 80035ee:	f04f 0e00 	mov.w	lr, #0
 80035f2:	4635      	mov	r5, r6
 80035f4:	e04f      	b.n	8003696 <D16_GENERIC+0xde>
 80035f6:	5d87      	ldrb	r7, [r0, r6]
 80035f8:	7804      	ldrb	r4, [r0, #0]
 80035fa:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 80035fe:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 8003602:	b2e6      	uxtb	r6, r4
 8003604:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8003608:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800360c:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8003610:	4433      	add	r3, r6
 8003612:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 8003616:	f3c4 0609 	ubfx	r6, r4, #0, #10
 800361a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800361e:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 8003622:	0aa3      	lsrs	r3, r4, #10
 8003624:	4c2a      	ldr	r4, [pc, #168]	; (80036d0 <D16_GENERIC+0x118>)
 8003626:	fb26 5404 	smlad	r4, r6, r4, r5
 800362a:	4d2a      	ldr	r5, [pc, #168]	; (80036d4 <D16_GENERIC+0x11c>)
 800362c:	fb26 f505 	smuad	r5, r6, r5
 8003630:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 8003634:	eb04 080a 	add.w	r8, r4, sl
 8003638:	eba8 080b 	sub.w	r8, r8, fp
 800363c:	4646      	mov	r6, r8
 800363e:	17f7      	asrs	r7, r6, #31
 8003640:	e9cd 6700 	strd	r6, r7, [sp]
 8003644:	9e04      	ldr	r6, [sp, #16]
 8003646:	f10e 0c01 	add.w	ip, lr, #1
 800364a:	b16e      	cbz	r6, 8003668 <D16_GENERIC+0xb0>
 800364c:	6a16      	ldr	r6, [r2, #32]
 800364e:	9f01      	ldr	r7, [sp, #4]
 8003650:	fba8 8906 	umull	r8, r9, r8, r6
 8003654:	fb06 9907 	mla	r9, r6, r7, r9
 8003658:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800365c:	f149 0900 	adc.w	r9, r9, #0
 8003660:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8003664:	46a3      	mov	fp, r4
 8003666:	4654      	mov	r4, sl
 8003668:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800366a:	9f02      	ldr	r7, [sp, #8]
 800366c:	0424      	lsls	r4, r4, #16
 800366e:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8003672:	f04f 0900 	mov.w	r9, #0
 8003676:	fb0e fe06 	mul.w	lr, lr, r6
 800367a:	fbc7 8904 	smlal	r8, r9, r7, r4
 800367e:	9e03      	ldr	r6, [sp, #12]
 8003680:	464f      	mov	r7, r9
 8003682:	10bc      	asrs	r4, r7, #2
 8003684:	f304 040f 	ssat	r4, #16, r4
 8003688:	f826 401e 	strh.w	r4, [r6, lr, lsl #1]
 800368c:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800368e:	fa1f fe8c 	uxth.w	lr, ip
 8003692:	4574      	cmp	r4, lr
 8003694:	d90a      	bls.n	80036ac <D16_GENERIC+0xf4>
 8003696:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8003698:	2c01      	cmp	r4, #1
 800369a:	b2e6      	uxtb	r6, r4
 800369c:	d1ab      	bne.n	80035f6 <D16_GENERIC+0x3e>
 800369e:	9e05      	ldr	r6, [sp, #20]
 80036a0:	f850 4b02 	ldr.w	r4, [r0], #2
 80036a4:	2e00      	cmp	r6, #0
 80036a6:	d0ac      	beq.n	8003602 <D16_GENERIC+0x4a>
 80036a8:	ba64      	rev16	r4, r4
 80036aa:	e7aa      	b.n	8003602 <D16_GENERIC+0x4a>
 80036ac:	462e      	mov	r6, r5
 80036ae:	9907      	ldr	r1, [sp, #28]
 80036b0:	61d3      	str	r3, [r2, #28]
 80036b2:	9b06      	ldr	r3, [sp, #24]
 80036b4:	6096      	str	r6, [r2, #8]
 80036b6:	2000      	movs	r0, #0
 80036b8:	60d1      	str	r1, [r2, #12]
 80036ba:	f8c2 a010 	str.w	sl, [r2, #16]
 80036be:	f8c2 b014 	str.w	fp, [r2, #20]
 80036c2:	6193      	str	r3, [r2, #24]
 80036c4:	b009      	add	sp, #36	; 0x24
 80036c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036ca:	bf00      	nop
 80036cc:	20000000 	.word	0x20000000
 80036d0:	00030001 	.word	0x00030001
 80036d4:	00010003 	.word	0x00010003

080036d8 <D24_GENERIC>:
 80036d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036dc:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 80036de:	6993      	ldr	r3, [r2, #24]
 80036e0:	6b15      	ldr	r5, [r2, #48]	; 0x30
 80036e2:	f8d2 a010 	ldr.w	sl, [r2, #16]
 80036e6:	f8d2 9014 	ldr.w	r9, [r2, #20]
 80036ea:	6894      	ldr	r4, [r2, #8]
 80036ec:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 80036f0:	b089      	sub	sp, #36	; 0x24
 80036f2:	9307      	str	r3, [sp, #28]
 80036f4:	9503      	str	r5, [sp, #12]
 80036f6:	69d3      	ldr	r3, [r2, #28]
 80036f8:	6b55      	ldr	r5, [r2, #52]	; 0x34
 80036fa:	9104      	str	r1, [sp, #16]
 80036fc:	2e00      	cmp	r6, #0
 80036fe:	f000 8096 	beq.w	800382e <D24_GENERIC+0x156>
 8003702:	f005 0610 	and.w	r6, r5, #16
 8003706:	f005 0520 	and.w	r5, r5, #32
 800370a:	4954      	ldr	r1, [pc, #336]	; (800385c <D24_GENERIC+0x184>)
 800370c:	9605      	str	r6, [sp, #20]
 800370e:	9506      	str	r5, [sp, #24]
 8003710:	f04f 0e00 	mov.w	lr, #0
 8003714:	f8cd 9008 	str.w	r9, [sp, #8]
 8003718:	e06a      	b.n	80037f0 <D24_GENERIC+0x118>
 800371a:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 800371e:	f810 8007 	ldrb.w	r8, [r0, r7]
 8003722:	f890 c000 	ldrb.w	ip, [r0]
 8003726:	042d      	lsls	r5, r5, #16
 8003728:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800372c:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 8003730:	44ac      	add	ip, r5
 8003732:	4438      	add	r0, r7
 8003734:	fa5f f68c 	uxtb.w	r6, ip
 8003738:	f3cc 2507 	ubfx	r5, ip, #8, #8
 800373c:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8003740:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 8003744:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8003748:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800374c:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8003750:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 8003754:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8003758:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800375c:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8003760:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8003764:	4d3e      	ldr	r5, [pc, #248]	; (8003860 <D24_GENERIC+0x188>)
 8003766:	fb26 b705 	smlad	r7, r6, r5, fp
 800376a:	4d3e      	ldr	r5, [pc, #248]	; (8003864 <D24_GENERIC+0x18c>)
 800376c:	fb26 4b05 	smlad	fp, r6, r5, r4
 8003770:	f3c3 0409 	ubfx	r4, r3, #0, #10
 8003774:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 8003778:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 800377c:	2401      	movs	r4, #1
 800377e:	fb26 f604 	smuad	r6, r6, r4
 8003782:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 8003786:	9f02      	ldr	r7, [sp, #8]
 8003788:	eb0e 0c04 	add.w	ip, lr, r4
 800378c:	eb08 0406 	add.w	r4, r8, r6
 8003790:	eb05 060a 	add.w	r6, r5, sl
 8003794:	1bf6      	subs	r6, r6, r7
 8003796:	4637      	mov	r7, r6
 8003798:	ea4f 78e6 	mov.w	r8, r6, asr #31
 800379c:	e9cd 7800 	strd	r7, r8, [sp]
 80037a0:	9f05      	ldr	r7, [sp, #20]
 80037a2:	b177      	cbz	r7, 80037c2 <D24_GENERIC+0xea>
 80037a4:	f8d2 8020 	ldr.w	r8, [r2, #32]
 80037a8:	9502      	str	r5, [sp, #8]
 80037aa:	fba6 9a08 	umull	r9, sl, r6, r8
 80037ae:	9e01      	ldr	r6, [sp, #4]
 80037b0:	fb08 aa06 	mla	sl, r8, r6, sl
 80037b4:	f119 4600 	adds.w	r6, r9, #2147483648	; 0x80000000
 80037b8:	f14a 0700 	adc.w	r7, sl, #0
 80037bc:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 80037c0:	4655      	mov	r5, sl
 80037c2:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 80037c4:	9f03      	ldr	r7, [sp, #12]
 80037c6:	03ad      	lsls	r5, r5, #14
 80037c8:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80037cc:	f04f 0900 	mov.w	r9, #0
 80037d0:	fb0e fe06 	mul.w	lr, lr, r6
 80037d4:	fbc7 8905 	smlal	r8, r9, r7, r5
 80037d8:	9e04      	ldr	r6, [sp, #16]
 80037da:	464f      	mov	r7, r9
 80037dc:	10bd      	asrs	r5, r7, #2
 80037de:	f305 050f 	ssat	r5, #16, r5
 80037e2:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 80037e6:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80037e8:	fa1f fe8c 	uxth.w	lr, ip
 80037ec:	4575      	cmp	r5, lr
 80037ee:	d91c      	bls.n	800382a <D24_GENERIC+0x152>
 80037f0:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 80037f2:	b2ef      	uxtb	r7, r5
 80037f4:	2d01      	cmp	r5, #1
 80037f6:	b23e      	sxth	r6, r7
 80037f8:	d18f      	bne.n	800371a <D24_GENERIC+0x42>
 80037fa:	9d06      	ldr	r5, [sp, #24]
 80037fc:	b15d      	cbz	r5, 8003816 <D24_GENERIC+0x13e>
 80037fe:	f01e 0f01 	tst.w	lr, #1
 8003802:	d122      	bne.n	800384a <D24_GENERIC+0x172>
 8003804:	7805      	ldrb	r5, [r0, #0]
 8003806:	78c7      	ldrb	r7, [r0, #3]
 8003808:	7846      	ldrb	r6, [r0, #1]
 800380a:	022d      	lsls	r5, r5, #8
 800380c:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 8003810:	44b4      	add	ip, r6
 8003812:	3002      	adds	r0, #2
 8003814:	e78e      	b.n	8003734 <D24_GENERIC+0x5c>
 8003816:	7846      	ldrb	r6, [r0, #1]
 8003818:	f890 c002 	ldrb.w	ip, [r0, #2]
 800381c:	f810 5b03 	ldrb.w	r5, [r0], #3
 8003820:	0236      	lsls	r6, r6, #8
 8003822:	eb06 4c0c 	add.w	ip, r6, ip, lsl #16
 8003826:	44ac      	add	ip, r5
 8003828:	e784      	b.n	8003734 <D24_GENERIC+0x5c>
 800382a:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800382e:	61d3      	str	r3, [r2, #28]
 8003830:	9b07      	ldr	r3, [sp, #28]
 8003832:	6094      	str	r4, [r2, #8]
 8003834:	2000      	movs	r0, #0
 8003836:	f8c2 b00c 	str.w	fp, [r2, #12]
 800383a:	f8c2 a010 	str.w	sl, [r2, #16]
 800383e:	f8c2 9014 	str.w	r9, [r2, #20]
 8003842:	6193      	str	r3, [r2, #24]
 8003844:	b009      	add	sp, #36	; 0x24
 8003846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800384a:	78c5      	ldrb	r5, [r0, #3]
 800384c:	7887      	ldrb	r7, [r0, #2]
 800384e:	f810 6b04 	ldrb.w	r6, [r0], #4
 8003852:	022d      	lsls	r5, r5, #8
 8003854:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 8003858:	44b4      	add	ip, r6
 800385a:	e76b      	b.n	8003734 <D24_GENERIC+0x5c>
 800385c:	20000000 	.word	0x20000000
 8003860:	00030001 	.word	0x00030001
 8003864:	00060007 	.word	0x00060007

08003868 <D32_GENERIC>:
 8003868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800386c:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800386e:	6993      	ldr	r3, [r2, #24]
 8003870:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8003872:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8003876:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800387a:	69d6      	ldr	r6, [r2, #28]
 800387c:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8003880:	b089      	sub	sp, #36	; 0x24
 8003882:	9307      	str	r3, [sp, #28]
 8003884:	9403      	str	r4, [sp, #12]
 8003886:	6893      	ldr	r3, [r2, #8]
 8003888:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800388a:	9104      	str	r1, [sp, #16]
 800388c:	2d00      	cmp	r5, #0
 800388e:	f000 809f 	beq.w	80039d0 <D32_GENERIC+0x168>
 8003892:	f004 0510 	and.w	r5, r4, #16
 8003896:	f004 0420 	and.w	r4, r4, #32
 800389a:	9505      	str	r5, [sp, #20]
 800389c:	4953      	ldr	r1, [pc, #332]	; (80039ec <D32_GENERIC+0x184>)
 800389e:	9406      	str	r4, [sp, #24]
 80038a0:	f04f 0c00 	mov.w	ip, #0
 80038a4:	f8cd 9008 	str.w	r9, [sp, #8]
 80038a8:	461d      	mov	r5, r3
 80038aa:	4617      	mov	r7, r2
 80038ac:	e077      	b.n	800399e <D32_GENERIC+0x136>
 80038ae:	f818 3003 	ldrb.w	r3, [r8, r3]
 80038b2:	f810 800e 	ldrb.w	r8, [r0, lr]
 80038b6:	f810 e002 	ldrb.w	lr, [r0, r2]
 80038ba:	7800      	ldrb	r0, [r0, #0]
 80038bc:	041b      	lsls	r3, r3, #16
 80038be:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 80038c2:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 80038c6:	4403      	add	r3, r0
 80038c8:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 80038cc:	b2dc      	uxtb	r4, r3
 80038ce:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80038d2:	f3c3 4807 	ubfx	r8, r3, #16, #8
 80038d6:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 80038da:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80038de:	0e1b      	lsrs	r3, r3, #24
 80038e0:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 80038e4:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 80038e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80038ec:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 80038f0:	eb06 2e92 	add.w	lr, r6, r2, lsr #10
 80038f4:	eb03 269e 	add.w	r6, r3, lr, lsr #10
 80038f8:	f3c6 0309 	ubfx	r3, r6, #0, #10
 80038fc:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8003900:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003904:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8003908:	ea43 4e0e 	orr.w	lr, r3, lr, lsl #16
 800390c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8003910:	4b37      	ldr	r3, [pc, #220]	; (80039f0 <D32_GENERIC+0x188>)
 8003912:	fb22 b403 	smlad	r4, r2, r3, fp
 8003916:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800391a:	fb2e 4803 	smlad	r8, lr, r3, r4
 800391e:	4b35      	ldr	r3, [pc, #212]	; (80039f4 <D32_GENERIC+0x18c>)
 8003920:	fb22 5503 	smlad	r5, r2, r3, r5
 8003924:	4b34      	ldr	r3, [pc, #208]	; (80039f8 <D32_GENERIC+0x190>)
 8003926:	fb2e 5b03 	smlad	fp, lr, r3, r5
 800392a:	2301      	movs	r3, #1
 800392c:	fb22 f203 	smuad	r2, r2, r3
 8003930:	4b32      	ldr	r3, [pc, #200]	; (80039fc <D32_GENERIC+0x194>)
 8003932:	fb2e 2503 	smlad	r5, lr, r3, r2
 8003936:	9b02      	ldr	r3, [sp, #8]
 8003938:	f5a8 4480 	sub.w	r4, r8, #16384	; 0x4000
 800393c:	eb04 080a 	add.w	r8, r4, sl
 8003940:	eba8 0803 	sub.w	r8, r8, r3
 8003944:	4642      	mov	r2, r8
 8003946:	17d3      	asrs	r3, r2, #31
 8003948:	e9cd 2300 	strd	r2, r3, [sp]
 800394c:	9b05      	ldr	r3, [sp, #20]
 800394e:	f10c 0e01 	add.w	lr, ip, #1
 8003952:	b16b      	cbz	r3, 8003970 <D32_GENERIC+0x108>
 8003954:	6a3a      	ldr	r2, [r7, #32]
 8003956:	9b01      	ldr	r3, [sp, #4]
 8003958:	9402      	str	r4, [sp, #8]
 800395a:	fba8 8902 	umull	r8, r9, r8, r2
 800395e:	fb02 9903 	mla	r9, r2, r3, r9
 8003962:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8003966:	f149 0900 	adc.w	r9, r9, #0
 800396a:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 800396e:	4654      	mov	r4, sl
 8003970:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003972:	9a04      	ldr	r2, [sp, #16]
 8003974:	fb0c fc03 	mul.w	ip, ip, r3
 8003978:	9b03      	ldr	r3, [sp, #12]
 800397a:	0364      	lsls	r4, r4, #13
 800397c:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8003980:	f04f 0900 	mov.w	r9, #0
 8003984:	fbc3 8904 	smlal	r8, r9, r3, r4
 8003988:	464b      	mov	r3, r9
 800398a:	109b      	asrs	r3, r3, #2
 800398c:	f303 030f 	ssat	r3, #16, r3
 8003990:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
 8003994:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003996:	fa1f fc8e 	uxth.w	ip, lr
 800399a:	4563      	cmp	r3, ip
 800399c:	d914      	bls.n	80039c8 <D32_GENERIC+0x160>
 800399e:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 80039a0:	b2e2      	uxtb	r2, r4
 80039a2:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
 80039a6:	eb00 080e 	add.w	r8, r0, lr
 80039aa:	4253      	negs	r3, r2
 80039ac:	2c01      	cmp	r4, #1
 80039ae:	eb08 0403 	add.w	r4, r8, r3
 80039b2:	f47f af7c 	bne.w	80038ae <D32_GENERIC+0x46>
 80039b6:	1d02      	adds	r2, r0, #4
 80039b8:	6803      	ldr	r3, [r0, #0]
 80039ba:	9806      	ldr	r0, [sp, #24]
 80039bc:	b110      	cbz	r0, 80039c4 <D32_GENERIC+0x15c>
 80039be:	ba5b      	rev16	r3, r3
 80039c0:	4610      	mov	r0, r2
 80039c2:	e783      	b.n	80038cc <D32_GENERIC+0x64>
 80039c4:	4610      	mov	r0, r2
 80039c6:	e781      	b.n	80038cc <D32_GENERIC+0x64>
 80039c8:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80039cc:	462b      	mov	r3, r5
 80039ce:	463a      	mov	r2, r7
 80039d0:	6093      	str	r3, [r2, #8]
 80039d2:	9b07      	ldr	r3, [sp, #28]
 80039d4:	f8c2 b00c 	str.w	fp, [r2, #12]
 80039d8:	2000      	movs	r0, #0
 80039da:	61d6      	str	r6, [r2, #28]
 80039dc:	f8c2 a010 	str.w	sl, [r2, #16]
 80039e0:	f8c2 9014 	str.w	r9, [r2, #20]
 80039e4:	6193      	str	r3, [r2, #24]
 80039e6:	b009      	add	sp, #36	; 0x24
 80039e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039ec:	20000000 	.word	0x20000000
 80039f0:	00060003 	.word	0x00060003
 80039f4:	000a000c 	.word	0x000a000c
 80039f8:	000c000a 	.word	0x000c000a
 80039fc:	00030006 	.word	0x00030006

08003a00 <D48_GENERIC>:
 8003a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a04:	b089      	sub	sp, #36	; 0x24
 8003a06:	6953      	ldr	r3, [r2, #20]
 8003a08:	68d4      	ldr	r4, [r2, #12]
 8003a0a:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8003a0c:	9302      	str	r3, [sp, #8]
 8003a0e:	9400      	str	r4, [sp, #0]
 8003a10:	6993      	ldr	r3, [r2, #24]
 8003a12:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8003a14:	9307      	str	r3, [sp, #28]
 8003a16:	9403      	str	r4, [sp, #12]
 8003a18:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8003a1c:	69d6      	ldr	r6, [r2, #28]
 8003a1e:	6893      	ldr	r3, [r2, #8]
 8003a20:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8003a22:	9104      	str	r1, [sp, #16]
 8003a24:	2d00      	cmp	r5, #0
 8003a26:	f000 80c5 	beq.w	8003bb4 <D48_GENERIC+0x1b4>
 8003a2a:	f004 0510 	and.w	r5, r4, #16
 8003a2e:	f004 0420 	and.w	r4, r4, #32
 8003a32:	4967      	ldr	r1, [pc, #412]	; (8003bd0 <D48_GENERIC+0x1d0>)
 8003a34:	9505      	str	r5, [sp, #20]
 8003a36:	9406      	str	r4, [sp, #24]
 8003a38:	f04f 0c00 	mov.w	ip, #0
 8003a3c:	4657      	mov	r7, sl
 8003a3e:	9301      	str	r3, [sp, #4]
 8003a40:	e09c      	b.n	8003b7c <D48_GENERIC+0x17c>
 8003a42:	f81b 4005 	ldrb.w	r4, [fp, r5]
 8003a46:	f810 b009 	ldrb.w	fp, [r0, r9]
 8003a4a:	f81a 9009 	ldrb.w	r9, [sl, r9]
 8003a4e:	f810 a00e 	ldrb.w	sl, [r0, lr]
 8003a52:	7800      	ldrb	r0, [r0, #0]
 8003a54:	0424      	lsls	r4, r4, #16
 8003a56:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 8003a5a:	f818 4005 	ldrb.w	r4, [r8, r5]
 8003a5e:	eb0b 2b0a 	add.w	fp, fp, sl, lsl #8
 8003a62:	44a8      	add	r8, r5
 8003a64:	eb04 2409 	add.w	r4, r4, r9, lsl #8
 8003a68:	eb0b 0500 	add.w	r5, fp, r0
 8003a6c:	eb08 004e 	add.w	r0, r8, lr, lsl #1
 8003a70:	fa5f f885 	uxtb.w	r8, r5
 8003a74:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 8003a78:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 8003a7c:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 8003a80:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 8003a84:	0e2d      	lsrs	r5, r5, #24
 8003a86:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 8003a8a:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
 8003a8e:	f851 e025 	ldr.w	lr, [r1, r5, lsl #2]
 8003a92:	b2e6      	uxtb	r6, r4
 8003a94:	eb09 259a 	add.w	r5, r9, sl, lsr #10
 8003a98:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8003a9c:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 8003aa0:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8003aa4:	f851 9024 	ldr.w	r9, [r1, r4, lsl #2]
 8003aa8:	eb0e 2498 	add.w	r4, lr, r8, lsr #10
 8003aac:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8003ab0:	eb09 269e 	add.w	r6, r9, lr, lsr #10
 8003ab4:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8003ab8:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8003abc:	f3c6 0909 	ubfx	r9, r6, #0, #10
 8003ac0:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8003ac4:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8003ac8:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8003acc:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 8003ad0:	ea44 4808 	orr.w	r8, r4, r8, lsl #16
 8003ad4:	ea49 4e0e 	orr.w	lr, r9, lr, lsl #16
 8003ad8:	4c3e      	ldr	r4, [pc, #248]	; (8003bd4 <D48_GENERIC+0x1d4>)
 8003ada:	9d00      	ldr	r5, [sp, #0]
 8003adc:	fb2a 5404 	smlad	r4, sl, r4, r5
 8003ae0:	4d3d      	ldr	r5, [pc, #244]	; (8003bd8 <D48_GENERIC+0x1d8>)
 8003ae2:	fb28 4405 	smlad	r4, r8, r5, r4
 8003ae6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003aea:	fb2e 4b03 	smlad	fp, lr, r3, r4
 8003aee:	4c3b      	ldr	r4, [pc, #236]	; (8003bdc <D48_GENERIC+0x1dc>)
 8003af0:	9b01      	ldr	r3, [sp, #4]
 8003af2:	fb2a 3304 	smlad	r3, sl, r4, r3
 8003af6:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 8003afa:	fb28 3304 	smlad	r3, r8, r4, r3
 8003afe:	4c38      	ldr	r4, [pc, #224]	; (8003be0 <D48_GENERIC+0x1e0>)
 8003b00:	fb2e 3304 	smlad	r3, lr, r4, r3
 8003b04:	2501      	movs	r5, #1
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	fb2a fa05 	smuad	sl, sl, r5
 8003b0c:	4b35      	ldr	r3, [pc, #212]	; (8003be4 <D48_GENERIC+0x1e4>)
 8003b0e:	fb28 a803 	smlad	r8, r8, r3, sl
 8003b12:	4b35      	ldr	r3, [pc, #212]	; (8003be8 <D48_GENERIC+0x1e8>)
 8003b14:	fb2e 8303 	smlad	r3, lr, r3, r8
 8003b18:	f5ab 4458 	sub.w	r4, fp, #55296	; 0xd800
 8003b1c:	9301      	str	r3, [sp, #4]
 8003b1e:	9b02      	ldr	r3, [sp, #8]
 8003b20:	eb04 0807 	add.w	r8, r4, r7
 8003b24:	eba8 0803 	sub.w	r8, r8, r3
 8003b28:	9b05      	ldr	r3, [sp, #20]
 8003b2a:	4465      	add	r5, ip
 8003b2c:	ea4f 7be8 	mov.w	fp, r8, asr #31
 8003b30:	b163      	cbz	r3, 8003b4c <D48_GENERIC+0x14c>
 8003b32:	6a17      	ldr	r7, [r2, #32]
 8003b34:	9402      	str	r4, [sp, #8]
 8003b36:	fba8 8907 	umull	r8, r9, r8, r7
 8003b3a:	fb07 990b 	mla	r9, r7, fp, r9
 8003b3e:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8003b42:	f149 0900 	adc.w	r9, r9, #0
 8003b46:	ea4f 0749 	mov.w	r7, r9, lsl #1
 8003b4a:	463c      	mov	r4, r7
 8003b4c:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 8003b50:	9b03      	ldr	r3, [sp, #12]
 8003b52:	02e4      	lsls	r4, r4, #11
 8003b54:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8003b58:	f04f 0900 	mov.w	r9, #0
 8003b5c:	fb0c fc0e 	mul.w	ip, ip, lr
 8003b60:	fbc3 8904 	smlal	r8, r9, r3, r4
 8003b64:	9b04      	ldr	r3, [sp, #16]
 8003b66:	ea4f 04a9 	mov.w	r4, r9, asr #2
 8003b6a:	f304 040f 	ssat	r4, #16, r4
 8003b6e:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 8003b72:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8003b74:	fa1f fc85 	uxth.w	ip, r5
 8003b78:	4564      	cmp	r4, ip
 8003b7a:	d919      	bls.n	8003bb0 <D48_GENERIC+0x1b0>
 8003b7c:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8003b7e:	fa5f fe84 	uxtb.w	lr, r4
 8003b82:	eb0e 094e 	add.w	r9, lr, lr, lsl #1
 8003b86:	f1ce 0500 	rsb	r5, lr, #0
 8003b8a:	eb00 0b09 	add.w	fp, r0, r9
 8003b8e:	eb0b 0a05 	add.w	sl, fp, r5
 8003b92:	2c01      	cmp	r4, #1
 8003b94:	eb0a 0809 	add.w	r8, sl, r9
 8003b98:	f47f af53 	bne.w	8003a42 <D48_GENERIC+0x42>
 8003b9c:	9b06      	ldr	r3, [sp, #24]
 8003b9e:	6805      	ldr	r5, [r0, #0]
 8003ba0:	6844      	ldr	r4, [r0, #4]
 8003ba2:	3006      	adds	r0, #6
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f43f af63 	beq.w	8003a70 <D48_GENERIC+0x70>
 8003baa:	ba6d      	rev16	r5, r5
 8003bac:	ba64      	rev16	r4, r4
 8003bae:	e75f      	b.n	8003a70 <D48_GENERIC+0x70>
 8003bb0:	9b01      	ldr	r3, [sp, #4]
 8003bb2:	46ba      	mov	sl, r7
 8003bb4:	6093      	str	r3, [r2, #8]
 8003bb6:	9b00      	ldr	r3, [sp, #0]
 8003bb8:	60d3      	str	r3, [r2, #12]
 8003bba:	9b02      	ldr	r3, [sp, #8]
 8003bbc:	6153      	str	r3, [r2, #20]
 8003bbe:	9b07      	ldr	r3, [sp, #28]
 8003bc0:	61d6      	str	r6, [r2, #28]
 8003bc2:	2000      	movs	r0, #0
 8003bc4:	f8c2 a010 	str.w	sl, [r2, #16]
 8003bc8:	6193      	str	r3, [r2, #24]
 8003bca:	b009      	add	sp, #36	; 0x24
 8003bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bd0:	20000000 	.word	0x20000000
 8003bd4:	000f000a 	.word	0x000f000a
 8003bd8:	00060003 	.word	0x00060003
 8003bdc:	00150019 	.word	0x00150019
 8003be0:	00190015 	.word	0x00190015
 8003be4:	00030006 	.word	0x00030006
 8003be8:	000a000f 	.word	0x000a000f

08003bec <D64_GENERIC>:
 8003bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bf0:	b089      	sub	sp, #36	; 0x24
 8003bf2:	6913      	ldr	r3, [r2, #16]
 8003bf4:	6895      	ldr	r5, [r2, #8]
 8003bf6:	9303      	str	r3, [sp, #12]
 8003bf8:	9501      	str	r5, [sp, #4]
 8003bfa:	6953      	ldr	r3, [r2, #20]
 8003bfc:	68d5      	ldr	r5, [r2, #12]
 8003bfe:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8003c00:	9304      	str	r3, [sp, #16]
 8003c02:	9500      	str	r5, [sp, #0]
 8003c04:	6993      	ldr	r3, [r2, #24]
 8003c06:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8003c08:	9307      	str	r3, [sp, #28]
 8003c0a:	9505      	str	r5, [sp, #20]
 8003c0c:	69d3      	ldr	r3, [r2, #28]
 8003c0e:	9106      	str	r1, [sp, #24]
 8003c10:	2c00      	cmp	r4, #0
 8003c12:	f000 80d9 	beq.w	8003dc8 <D64_GENERIC+0x1dc>
 8003c16:	6a11      	ldr	r1, [r2, #32]
 8003c18:	9102      	str	r1, [sp, #8]
 8003c1a:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 8003e08 <D64_GENERIC+0x21c>
 8003c1e:	f04f 0c00 	mov.w	ip, #0
 8003c22:	4681      	mov	r9, r0
 8003c24:	e0c1      	b.n	8003daa <D64_GENERIC+0x1be>
 8003c26:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 8003c2a:	4274      	negs	r4, r6
 8003c2c:	eb09 0708 	add.w	r7, r9, r8
 8003c30:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 8003c34:	eb0a 0548 	add.w	r5, sl, r8, lsl #1
 8003c38:	5d38      	ldrb	r0, [r7, r4]
 8003c3a:	5d29      	ldrb	r1, [r5, r4]
 8003c3c:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 8003c40:	f819 a008 	ldrb.w	sl, [r9, r8]
 8003c44:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 8003c48:	f899 7000 	ldrb.w	r7, [r9]
 8003c4c:	f815 9014 	ldrb.w	r9, [r5, r4, lsl #1]
 8003c50:	4425      	add	r5, r4
 8003c52:	0409      	lsls	r1, r1, #16
 8003c54:	0400      	lsls	r0, r0, #16
 8003c56:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 8003c5a:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 8003c5e:	f815 b014 	ldrb.w	fp, [r5, r4, lsl #1]
 8003c62:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 8003c66:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 8003c6a:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 8003c6e:	4459      	add	r1, fp
 8003c70:	eb04 0986 	add.w	r9, r4, r6, lsl #2
 8003c74:	4438      	add	r0, r7
 8003c76:	b2c5      	uxtb	r5, r0
 8003c78:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8003c7c:	f85e 6025 	ldr.w	r6, [lr, r5, lsl #2]
 8003c80:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
 8003c84:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8003c88:	0e00      	lsrs	r0, r0, #24
 8003c8a:	eb03 0806 	add.w	r8, r3, r6
 8003c8e:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 8003c92:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 8003c96:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8003c9a:	b2c8      	uxtb	r0, r1
 8003c9c:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8003ca0:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8003ca4:	f85e 6020 	ldr.w	r6, [lr, r0, lsl #2]
 8003ca8:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8003cac:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8003cb0:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8003cb4:	0e09      	lsrs	r1, r1, #24
 8003cb6:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 8003cba:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 8003cbe:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 8003cc2:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 8003cc6:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 8003cca:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8003cce:	f3ca 0309 	ubfx	r3, sl, #0, #10
 8003cd2:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8003cd6:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8003cda:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8003cde:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 8003ce2:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8003ce6:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8003cea:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8003cee:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8003cf2:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 8003cf6:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 8003cfa:	0a8b      	lsrs	r3, r1, #10
 8003cfc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8003d00:	4939      	ldr	r1, [pc, #228]	; (8003de8 <D64_GENERIC+0x1fc>)
 8003d02:	9c00      	ldr	r4, [sp, #0]
 8003d04:	fb28 4101 	smlad	r1, r8, r1, r4
 8003d08:	4c38      	ldr	r4, [pc, #224]	; (8003dec <D64_GENERIC+0x200>)
 8003d0a:	fb27 1104 	smlad	r1, r7, r4, r1
 8003d0e:	4c38      	ldr	r4, [pc, #224]	; (8003df0 <D64_GENERIC+0x204>)
 8003d10:	fb20 1104 	smlad	r1, r0, r4, r1
 8003d14:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 8003d18:	fb2a 1106 	smlad	r1, sl, r6, r1
 8003d1c:	4c35      	ldr	r4, [pc, #212]	; (8003df4 <D64_GENERIC+0x208>)
 8003d1e:	9d01      	ldr	r5, [sp, #4]
 8003d20:	fb28 5404 	smlad	r4, r8, r4, r5
 8003d24:	4d33      	ldr	r5, [pc, #204]	; (8003df4 <D64_GENERIC+0x208>)
 8003d26:	fb2a 4415 	smladx	r4, sl, r5, r4
 8003d2a:	4d33      	ldr	r5, [pc, #204]	; (8003df8 <D64_GENERIC+0x20c>)
 8003d2c:	fb27 4405 	smlad	r4, r7, r5, r4
 8003d30:	fb20 4415 	smladx	r4, r0, r5, r4
 8003d34:	2501      	movs	r5, #1
 8003d36:	9400      	str	r4, [sp, #0]
 8003d38:	fb28 f805 	smuad	r8, r8, r5
 8003d3c:	4c2f      	ldr	r4, [pc, #188]	; (8003dfc <D64_GENERIC+0x210>)
 8003d3e:	fb27 8704 	smlad	r7, r7, r4, r8
 8003d42:	4c2f      	ldr	r4, [pc, #188]	; (8003e00 <D64_GENERIC+0x214>)
 8003d44:	fb20 7004 	smlad	r0, r0, r4, r7
 8003d48:	4c2e      	ldr	r4, [pc, #184]	; (8003e04 <D64_GENERIC+0x218>)
 8003d4a:	fb2a 0004 	smlad	r0, sl, r4, r0
 8003d4e:	f5a1 3600 	sub.w	r6, r1, #131072	; 0x20000
 8003d52:	9902      	ldr	r1, [sp, #8]
 8003d54:	9001      	str	r0, [sp, #4]
 8003d56:	b189      	cbz	r1, 8003d7c <D64_GENERIC+0x190>
 8003d58:	9803      	ldr	r0, [sp, #12]
 8003d5a:	9c04      	ldr	r4, [sp, #16]
 8003d5c:	9604      	str	r6, [sp, #16]
 8003d5e:	4430      	add	r0, r6
 8003d60:	1b00      	subs	r0, r0, r4
 8003d62:	17c5      	asrs	r5, r0, #31
 8003d64:	460f      	mov	r7, r1
 8003d66:	fba0 0101 	umull	r0, r1, r0, r1
 8003d6a:	fb07 1105 	mla	r1, r7, r5, r1
 8003d6e:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8003d72:	f141 0100 	adc.w	r1, r1, #0
 8003d76:	0049      	lsls	r1, r1, #1
 8003d78:	9103      	str	r1, [sp, #12]
 8003d7a:	460e      	mov	r6, r1
 8003d7c:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 8003d7e:	9905      	ldr	r1, [sp, #20]
 8003d80:	9806      	ldr	r0, [sp, #24]
 8003d82:	02b6      	lsls	r6, r6, #10
 8003d84:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8003d88:	f04f 0800 	mov.w	r8, #0
 8003d8c:	fb0c f404 	mul.w	r4, ip, r4
 8003d90:	fbc1 7806 	smlal	r7, r8, r1, r6
 8003d94:	4641      	mov	r1, r8
 8003d96:	1089      	asrs	r1, r1, #2
 8003d98:	f301 010f 	ssat	r1, #16, r1
 8003d9c:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 8003da0:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 8003da2:	f10c 0c01 	add.w	ip, ip, #1
 8003da6:	4561      	cmp	r1, ip
 8003da8:	dd0e      	ble.n	8003dc8 <D64_GENERIC+0x1dc>
 8003daa:	8d56      	ldrh	r6, [r2, #42]	; 0x2a
 8003dac:	2e01      	cmp	r6, #1
 8003dae:	f47f af3a 	bne.w	8003c26 <D64_GENERIC+0x3a>
 8003db2:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8003db4:	06b4      	lsls	r4, r6, #26
 8003db6:	e899 0003 	ldmia.w	r9, {r0, r1}
 8003dba:	f109 0908 	add.w	r9, r9, #8
 8003dbe:	f57f af5a 	bpl.w	8003c76 <D64_GENERIC+0x8a>
 8003dc2:	ba40      	rev16	r0, r0
 8003dc4:	ba49      	rev16	r1, r1
 8003dc6:	e756      	b.n	8003c76 <D64_GENERIC+0x8a>
 8003dc8:	61d3      	str	r3, [r2, #28]
 8003dca:	9b03      	ldr	r3, [sp, #12]
 8003dcc:	9901      	ldr	r1, [sp, #4]
 8003dce:	6113      	str	r3, [r2, #16]
 8003dd0:	9b04      	ldr	r3, [sp, #16]
 8003dd2:	6091      	str	r1, [r2, #8]
 8003dd4:	6153      	str	r3, [r2, #20]
 8003dd6:	9900      	ldr	r1, [sp, #0]
 8003dd8:	9b07      	ldr	r3, [sp, #28]
 8003dda:	60d1      	str	r1, [r2, #12]
 8003ddc:	2000      	movs	r0, #0
 8003dde:	6193      	str	r3, [r2, #24]
 8003de0:	b009      	add	sp, #36	; 0x24
 8003de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003de6:	bf00      	nop
 8003de8:	001c0015 	.word	0x001c0015
 8003dec:	000f000a 	.word	0x000f000a
 8003df0:	00060003 	.word	0x00060003
 8003df4:	0024002a 	.word	0x0024002a
 8003df8:	002e0030 	.word	0x002e0030
 8003dfc:	00030006 	.word	0x00030006
 8003e00:	000a000f 	.word	0x000a000f
 8003e04:	0015001c 	.word	0x0015001c
 8003e08:	20000000 	.word	0x20000000

08003e0c <D80_GENERIC>:
 8003e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e10:	b08b      	sub	sp, #44	; 0x2c
 8003e12:	6914      	ldr	r4, [r2, #16]
 8003e14:	9404      	str	r4, [sp, #16]
 8003e16:	6954      	ldr	r4, [r2, #20]
 8003e18:	9405      	str	r4, [sp, #20]
 8003e1a:	6994      	ldr	r4, [r2, #24]
 8003e1c:	9409      	str	r4, [sp, #36]	; 0x24
 8003e1e:	6894      	ldr	r4, [r2, #8]
 8003e20:	9402      	str	r4, [sp, #8]
 8003e22:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8003e24:	68d4      	ldr	r4, [r2, #12]
 8003e26:	9401      	str	r4, [sp, #4]
 8003e28:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8003e2a:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 8003e2e:	9406      	str	r4, [sp, #24]
 8003e30:	9107      	str	r1, [sp, #28]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f000 810f 	beq.w	8004056 <D80_GENERIC+0x24a>
 8003e38:	6a13      	ldr	r3, [r2, #32]
 8003e3a:	9308      	str	r3, [sp, #32]
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	9200      	str	r2, [sp, #0]
 8003e40:	f8df 9264 	ldr.w	r9, [pc, #612]	; 80040a8 <D80_GENERIC+0x29c>
 8003e44:	f8cd b00c 	str.w	fp, [sp, #12]
 8003e48:	461a      	mov	r2, r3
 8003e4a:	e0ed      	b.n	8004028 <D80_GENERIC+0x21c>
 8003e4c:	fa5f fc8c 	uxtb.w	ip, ip
 8003e50:	fa0f f48c 	sxth.w	r4, ip
 8003e54:	0066      	lsls	r6, r4, #1
 8003e56:	eb06 0804 	add.w	r8, r6, r4
 8003e5a:	f1cc 0500 	rsb	r5, ip, #0
 8003e5e:	eb00 0108 	add.w	r1, r0, r8
 8003e62:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003e66:	194b      	adds	r3, r1, r5
 8003e68:	5d49      	ldrb	r1, [r1, r5]
 8003e6a:	f810 a008 	ldrb.w	sl, [r0, r8]
 8003e6e:	f813 b004 	ldrb.w	fp, [r3, r4]
 8003e72:	f810 c00c 	ldrb.w	ip, [r0, ip]
 8003e76:	f890 8000 	ldrb.w	r8, [r0]
 8003e7a:	eb03 0e04 	add.w	lr, r3, r4
 8003e7e:	eb0e 0705 	add.w	r7, lr, r5
 8003e82:	0409      	lsls	r1, r1, #16
 8003e84:	f81e 3005 	ldrb.w	r3, [lr, r5]
 8003e88:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 8003e8c:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 8003e90:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 8003e94:	eb0a 0004 	add.w	r0, sl, r4
 8003e98:	041b      	lsls	r3, r3, #16
 8003e9a:	f81a a004 	ldrb.w	sl, [sl, r4]
 8003e9e:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 8003ea2:	5d44      	ldrb	r4, [r0, r5]
 8003ea4:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 8003ea8:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8003eac:	4428      	add	r0, r5
 8003eae:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8003eb2:	4441      	add	r1, r8
 8003eb4:	4430      	add	r0, r6
 8003eb6:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 8003eba:	441f      	add	r7, r3
 8003ebc:	b2cd      	uxtb	r5, r1
 8003ebe:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8003ec2:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 8003ec6:	f859 e023 	ldr.w	lr, [r9, r3, lsl #2]
 8003eca:	9b03      	ldr	r3, [sp, #12]
 8003ecc:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8003ed0:	0e09      	lsrs	r1, r1, #24
 8003ed2:	4433      	add	r3, r6
 8003ed4:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 8003ed8:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 8003edc:	b2fd      	uxtb	r5, r7
 8003ede:	eb0e 2193 	add.w	r1, lr, r3, lsr #10
 8003ee2:	469b      	mov	fp, r3
 8003ee4:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8003ee8:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 8003eec:	f859 c025 	ldr.w	ip, [r9, r5, lsl #2]
 8003ef0:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 8003ef4:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 8003ef8:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 8003efc:	0e3b      	lsrs	r3, r7, #24
 8003efe:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 8003f02:	f859 702e 	ldr.w	r7, [r9, lr, lsl #2]
 8003f06:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8003f0a:	fa5f fe84 	uxtb.w	lr, r4
 8003f0e:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 8003f12:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8003f16:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8003f1a:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 8003f1e:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 8003f22:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8003f26:	eb0e 2e93 	add.w	lr, lr, r3, lsr #10
 8003f2a:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8003f2e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8003f32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f36:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8003f3a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8003f3e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8003f42:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8003f46:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 8003f4a:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 8003f4e:	f3c4 0109 	ubfx	r1, r4, #0, #10
 8003f52:	0aa3      	lsrs	r3, r4, #10
 8003f54:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8003f58:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8003f5c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8003f60:	ea41 4e0e 	orr.w	lr, r1, lr, lsl #16
 8003f64:	9303      	str	r3, [sp, #12]
 8003f66:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 8003f6a:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 8003f6e:	4b42      	ldr	r3, [pc, #264]	; (8004078 <D80_GENERIC+0x26c>)
 8003f70:	9901      	ldr	r1, [sp, #4]
 8003f72:	fb2b 1303 	smlad	r3, fp, r3, r1
 8003f76:	4941      	ldr	r1, [pc, #260]	; (800407c <D80_GENERIC+0x270>)
 8003f78:	fb28 3301 	smlad	r3, r8, r1, r3
 8003f7c:	4940      	ldr	r1, [pc, #256]	; (8004080 <D80_GENERIC+0x274>)
 8003f7e:	fb2c 3301 	smlad	r3, ip, r1, r3
 8003f82:	4940      	ldr	r1, [pc, #256]	; (8004084 <D80_GENERIC+0x278>)
 8003f84:	fb27 3301 	smlad	r3, r7, r1, r3
 8003f88:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8003f8c:	fb2e 3301 	smlad	r3, lr, r1, r3
 8003f90:	493d      	ldr	r1, [pc, #244]	; (8004088 <D80_GENERIC+0x27c>)
 8003f92:	9c02      	ldr	r4, [sp, #8]
 8003f94:	fb2b 4401 	smlad	r4, fp, r1, r4
 8003f98:	493c      	ldr	r1, [pc, #240]	; (800408c <D80_GENERIC+0x280>)
 8003f9a:	fb28 4401 	smlad	r4, r8, r1, r4
 8003f9e:	f04f 114b 	mov.w	r1, #4915275	; 0x4b004b
 8003fa2:	fb2c 4101 	smlad	r1, ip, r1, r4
 8003fa6:	4c3a      	ldr	r4, [pc, #232]	; (8004090 <D80_GENERIC+0x284>)
 8003fa8:	fb27 1104 	smlad	r1, r7, r4, r1
 8003fac:	4c39      	ldr	r4, [pc, #228]	; (8004094 <D80_GENERIC+0x288>)
 8003fae:	fb2e 1104 	smlad	r1, lr, r4, r1
 8003fb2:	9101      	str	r1, [sp, #4]
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	fb2b fb01 	smuad	fp, fp, r1
 8003fba:	4937      	ldr	r1, [pc, #220]	; (8004098 <D80_GENERIC+0x28c>)
 8003fbc:	fb28 b801 	smlad	r8, r8, r1, fp
 8003fc0:	4d36      	ldr	r5, [pc, #216]	; (800409c <D80_GENERIC+0x290>)
 8003fc2:	fb2c 8c05 	smlad	ip, ip, r5, r8
 8003fc6:	4d36      	ldr	r5, [pc, #216]	; (80040a0 <D80_GENERIC+0x294>)
 8003fc8:	fb27 c705 	smlad	r7, r7, r5, ip
 8003fcc:	4d35      	ldr	r5, [pc, #212]	; (80040a4 <D80_GENERIC+0x298>)
 8003fce:	fb2e 7105 	smlad	r1, lr, r5, r7
 8003fd2:	9102      	str	r1, [sp, #8]
 8003fd4:	9908      	ldr	r1, [sp, #32]
 8003fd6:	f5a3 337a 	sub.w	r3, r3, #256000	; 0x3e800
 8003fda:	b181      	cbz	r1, 8003ffe <D80_GENERIC+0x1f2>
 8003fdc:	9c04      	ldr	r4, [sp, #16]
 8003fde:	9d05      	ldr	r5, [sp, #20]
 8003fe0:	9305      	str	r3, [sp, #20]
 8003fe2:	441c      	add	r4, r3
 8003fe4:	1b64      	subs	r4, r4, r5
 8003fe6:	17e7      	asrs	r7, r4, #31
 8003fe8:	fba4 4501 	umull	r4, r5, r4, r1
 8003fec:	fb01 5507 	mla	r5, r1, r7, r5
 8003ff0:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8003ff4:	f145 0500 	adc.w	r5, r5, #0
 8003ff8:	0069      	lsls	r1, r5, #1
 8003ffa:	9104      	str	r1, [sp, #16]
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	9e00      	ldr	r6, [sp, #0]
 8004000:	9f06      	ldr	r7, [sp, #24]
 8004002:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 8004004:	025b      	lsls	r3, r3, #9
 8004006:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800400a:	2500      	movs	r5, #0
 800400c:	fb02 f101 	mul.w	r1, r2, r1
 8004010:	fbc7 4503 	smlal	r4, r5, r7, r3
 8004014:	9c07      	ldr	r4, [sp, #28]
 8004016:	10ab      	asrs	r3, r5, #2
 8004018:	f303 030f 	ssat	r3, #16, r3
 800401c:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 8004020:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 8004022:	3201      	adds	r2, #1
 8004024:	4293      	cmp	r3, r2
 8004026:	dd13      	ble.n	8004050 <D80_GENERIC+0x244>
 8004028:	9b00      	ldr	r3, [sp, #0]
 800402a:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 800402e:	f1bc 0f01 	cmp.w	ip, #1
 8004032:	f47f af0b 	bne.w	8003e4c <D80_GENERIC+0x40>
 8004036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004038:	6884      	ldr	r4, [r0, #8]
 800403a:	069b      	lsls	r3, r3, #26
 800403c:	e890 0082 	ldmia.w	r0, {r1, r7}
 8004040:	f100 000a 	add.w	r0, r0, #10
 8004044:	f57f af3a 	bpl.w	8003ebc <D80_GENERIC+0xb0>
 8004048:	ba49      	rev16	r1, r1
 800404a:	ba7f      	rev16	r7, r7
 800404c:	ba64      	rev16	r4, r4
 800404e:	e735      	b.n	8003ebc <D80_GENERIC+0xb0>
 8004050:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8004054:	4632      	mov	r2, r6
 8004056:	9b02      	ldr	r3, [sp, #8]
 8004058:	6093      	str	r3, [r2, #8]
 800405a:	9b01      	ldr	r3, [sp, #4]
 800405c:	60d3      	str	r3, [r2, #12]
 800405e:	9b04      	ldr	r3, [sp, #16]
 8004060:	6113      	str	r3, [r2, #16]
 8004062:	9b05      	ldr	r3, [sp, #20]
 8004064:	6153      	str	r3, [r2, #20]
 8004066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004068:	f8c2 b01c 	str.w	fp, [r2, #28]
 800406c:	2000      	movs	r0, #0
 800406e:	6193      	str	r3, [r2, #24]
 8004070:	b00b      	add	sp, #44	; 0x2c
 8004072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004076:	bf00      	nop
 8004078:	002d0024 	.word	0x002d0024
 800407c:	001c0015 	.word	0x001c0015
 8004080:	000f000a 	.word	0x000f000a
 8004084:	00060003 	.word	0x00060003
 8004088:	0037003f 	.word	0x0037003f
 800408c:	00450049 	.word	0x00450049
 8004090:	00490045 	.word	0x00490045
 8004094:	003f0037 	.word	0x003f0037
 8004098:	00030006 	.word	0x00030006
 800409c:	000a000f 	.word	0x000a000f
 80040a0:	0015001c 	.word	0x0015001c
 80040a4:	0024002d 	.word	0x0024002d
 80040a8:	20000000 	.word	0x20000000

080040ac <D128_GENERIC>:
 80040ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040b0:	b093      	sub	sp, #76	; 0x4c
 80040b2:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 80040b4:	9005      	str	r0, [sp, #20]
 80040b6:	4610      	mov	r0, r2
 80040b8:	9201      	str	r2, [sp, #4]
 80040ba:	6912      	ldr	r2, [r2, #16]
 80040bc:	920c      	str	r2, [sp, #48]	; 0x30
 80040be:	4602      	mov	r2, r0
 80040c0:	6940      	ldr	r0, [r0, #20]
 80040c2:	900d      	str	r0, [sp, #52]	; 0x34
 80040c4:	4610      	mov	r0, r2
 80040c6:	4614      	mov	r4, r2
 80040c8:	6992      	ldr	r2, [r2, #24]
 80040ca:	9211      	str	r2, [sp, #68]	; 0x44
 80040cc:	69c2      	ldr	r2, [r0, #28]
 80040ce:	9202      	str	r2, [sp, #8]
 80040d0:	68e2      	ldr	r2, [r4, #12]
 80040d2:	6880      	ldr	r0, [r0, #8]
 80040d4:	9203      	str	r2, [sp, #12]
 80040d6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80040d8:	9004      	str	r0, [sp, #16]
 80040da:	920e      	str	r2, [sp, #56]	; 0x38
 80040dc:	910f      	str	r1, [sp, #60]	; 0x3c
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f000 819b 	beq.w	800441a <D128_GENERIC+0x36e>
 80040e4:	6a23      	ldr	r3, [r4, #32]
 80040e6:	9310      	str	r3, [sp, #64]	; 0x40
 80040e8:	2300      	movs	r3, #0
 80040ea:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 8004494 <D128_GENERIC+0x3e8>
 80040ee:	9306      	str	r3, [sp, #24]
 80040f0:	e17a      	b.n	80043e8 <D128_GENERIC+0x33c>
 80040f2:	b2d2      	uxtb	r2, r2
 80040f4:	9d05      	ldr	r5, [sp, #20]
 80040f6:	b214      	sxth	r4, r2
 80040f8:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 80040fc:	4250      	negs	r0, r2
 80040fe:	eb05 010a 	add.w	r1, r5, sl
 8004102:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004106:	eb01 0800 	add.w	r8, r1, r0
 800410a:	eb0b 0c04 	add.w	ip, fp, r4
 800410e:	eb08 070c 	add.w	r7, r8, ip
 8004112:	183b      	adds	r3, r7, r0
 8004114:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8004118:	eb03 0e40 	add.w	lr, r3, r0, lsl #1
 800411c:	eb0e 0604 	add.w	r6, lr, r4
 8004120:	9307      	str	r3, [sp, #28]
 8004122:	1833      	adds	r3, r6, r0
 8004124:	9305      	str	r3, [sp, #20]
 8004126:	462b      	mov	r3, r5
 8004128:	f815 a00a 	ldrb.w	sl, [r5, sl]
 800412c:	f8cd a020 	str.w	sl, [sp, #32]
 8004130:	f818 a00c 	ldrb.w	sl, [r8, ip]
 8004134:	f813 c002 	ldrb.w	ip, [r3, r2]
 8004138:	f81e 8004 	ldrb.w	r8, [lr, r4]
 800413c:	5c3a      	ldrb	r2, [r7, r0]
 800413e:	f817 e010 	ldrb.w	lr, [r7, r0, lsl #1]
 8004142:	781f      	ldrb	r7, [r3, #0]
 8004144:	9b07      	ldr	r3, [sp, #28]
 8004146:	9d05      	ldr	r5, [sp, #20]
 8004148:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 800414c:	5c09      	ldrb	r1, [r1, r0]
 800414e:	9709      	str	r7, [sp, #36]	; 0x24
 8004150:	9307      	str	r3, [sp, #28]
 8004152:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 8004156:	5c33      	ldrb	r3, [r6, r0]
 8004158:	0412      	lsls	r2, r2, #16
 800415a:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 800415e:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 8004162:	9d08      	ldr	r5, [sp, #32]
 8004164:	eb06 0a04 	add.w	sl, r6, r4
 8004168:	0409      	lsls	r1, r1, #16
 800416a:	eb01 6105 	add.w	r1, r1, r5, lsl #24
 800416e:	f81a 5000 	ldrb.w	r5, [sl, r0]
 8004172:	5d36      	ldrb	r6, [r6, r4]
 8004174:	9c05      	ldr	r4, [sp, #20]
 8004176:	042d      	lsls	r5, r5, #16
 8004178:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 800417c:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8004180:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 8004184:	f814 4010 	ldrb.w	r4, [r4, r0, lsl #1]
 8004188:	eb0a 0c00 	add.w	ip, sl, r0
 800418c:	041b      	lsls	r3, r3, #16
 800418e:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8004192:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 8004196:	f81c a010 	ldrb.w	sl, [ip, r0, lsl #1]
 800419a:	9d07      	ldr	r5, [sp, #28]
 800419c:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 80041a0:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 80041a4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80041a6:	4458      	add	r0, fp
 80041a8:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 80041ac:	9005      	str	r0, [sp, #20]
 80041ae:	4439      	add	r1, r7
 80041b0:	442a      	add	r2, r5
 80041b2:	44b2      	add	sl, r6
 80041b4:	1918      	adds	r0, r3, r4
 80041b6:	b2cb      	uxtb	r3, r1
 80041b8:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80041bc:	9e02      	ldr	r6, [sp, #8]
 80041be:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80041c2:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 80041c6:	f3c1 4407 	ubfx	r4, r1, #16, #8
 80041ca:	441e      	add	r6, r3
 80041cc:	0e09      	lsrs	r1, r1, #24
 80041ce:	4633      	mov	r3, r6
 80041d0:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 80041d4:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 80041d8:	b2d4      	uxtb	r4, r2
 80041da:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 80041de:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80041e2:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 80041e6:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 80041ea:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80041ee:	f3c2 4407 	ubfx	r4, r2, #16, #8
 80041f2:	0e12      	lsrs	r2, r2, #24
 80041f4:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 80041f8:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 80041fc:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8004200:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 8004204:	9702      	str	r7, [sp, #8]
 8004206:	b2c2      	uxtb	r2, r0
 8004208:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 800420c:	eb06 2c91 	add.w	ip, r6, r1, lsr #10
 8004210:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 8004214:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8004218:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800421c:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8004220:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8004224:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8004228:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 800422c:	0e00      	lsrs	r0, r0, #24
 800422e:	fa5f f68a 	uxtb.w	r6, sl
 8004232:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004236:	9309      	str	r3, [sp, #36]	; 0x24
 8004238:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800423c:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 8004240:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 8004244:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8004248:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800424c:	950a      	str	r5, [sp, #40]	; 0x28
 800424e:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8004252:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8004256:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 800425a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800425e:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 8004262:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004266:	920b      	str	r2, [sp, #44]	; 0x2c
 8004268:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 800426c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800426e:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8004272:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8004276:	9307      	str	r3, [sp, #28]
 8004278:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800427c:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8004280:	9b02      	ldr	r3, [sp, #8]
 8004282:	f8cd c008 	str.w	ip, [sp, #8]
 8004286:	4694      	mov	ip, r2
 8004288:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800428a:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 800428e:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8004292:	9a02      	ldr	r2, [sp, #8]
 8004294:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004298:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800429c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80042a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80042a2:	f8cd a020 	str.w	sl, [sp, #32]
 80042a6:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80042aa:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 80042ae:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80042b2:	9b07      	ldr	r3, [sp, #28]
 80042b4:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80042b8:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80042bc:	ea42 480e 	orr.w	r8, r2, lr, lsl #16
 80042c0:	9a08      	ldr	r2, [sp, #32]
 80042c2:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80042c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042ca:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80042ce:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80042d2:	f3c2 0e09 	ubfx	lr, r2, #0, #10
 80042d6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80042da:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80042de:	0a96      	lsrs	r6, r2, #10
 80042e0:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80042e4:	9602      	str	r6, [sp, #8]
 80042e6:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80042ea:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 80042ee:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 80042f2:	4e53      	ldr	r6, [pc, #332]	; (8004440 <D128_GENERIC+0x394>)
 80042f4:	9f03      	ldr	r7, [sp, #12]
 80042f6:	fb2c 7606 	smlad	r6, ip, r6, r7
 80042fa:	4f52      	ldr	r7, [pc, #328]	; (8004444 <D128_GENERIC+0x398>)
 80042fc:	fb2a 6607 	smlad	r6, sl, r7, r6
 8004300:	4f51      	ldr	r7, [pc, #324]	; (8004448 <D128_GENERIC+0x39c>)
 8004302:	fb21 6607 	smlad	r6, r1, r7, r6
 8004306:	4f51      	ldr	r7, [pc, #324]	; (800444c <D128_GENERIC+0x3a0>)
 8004308:	fb24 6607 	smlad	r6, r4, r7, r6
 800430c:	4f50      	ldr	r7, [pc, #320]	; (8004450 <D128_GENERIC+0x3a4>)
 800430e:	fb28 6607 	smlad	r6, r8, r7, r6
 8004312:	4f50      	ldr	r7, [pc, #320]	; (8004454 <D128_GENERIC+0x3a8>)
 8004314:	fb20 6607 	smlad	r6, r0, r7, r6
 8004318:	4f4f      	ldr	r7, [pc, #316]	; (8004458 <D128_GENERIC+0x3ac>)
 800431a:	fb23 6607 	smlad	r6, r3, r7, r6
 800431e:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 8004322:	fb25 6607 	smlad	r6, r5, r7, r6
 8004326:	4f4d      	ldr	r7, [pc, #308]	; (800445c <D128_GENERIC+0x3b0>)
 8004328:	9a04      	ldr	r2, [sp, #16]
 800432a:	fb2c 2e07 	smlad	lr, ip, r7, r2
 800432e:	4a4c      	ldr	r2, [pc, #304]	; (8004460 <D128_GENERIC+0x3b4>)
 8004330:	fb2a ee02 	smlad	lr, sl, r2, lr
 8004334:	4f4b      	ldr	r7, [pc, #300]	; (8004464 <D128_GENERIC+0x3b8>)
 8004336:	fb21 ee07 	smlad	lr, r1, r7, lr
 800433a:	4f4b      	ldr	r7, [pc, #300]	; (8004468 <D128_GENERIC+0x3bc>)
 800433c:	fb24 ee07 	smlad	lr, r4, r7, lr
 8004340:	4f4a      	ldr	r7, [pc, #296]	; (800446c <D128_GENERIC+0x3c0>)
 8004342:	fb28 ee07 	smlad	lr, r8, r7, lr
 8004346:	4f4a      	ldr	r7, [pc, #296]	; (8004470 <D128_GENERIC+0x3c4>)
 8004348:	fb20 ee07 	smlad	lr, r0, r7, lr
 800434c:	4f49      	ldr	r7, [pc, #292]	; (8004474 <D128_GENERIC+0x3c8>)
 800434e:	fb23 e707 	smlad	r7, r3, r7, lr
 8004352:	f8df e144 	ldr.w	lr, [pc, #324]	; 8004498 <D128_GENERIC+0x3ec>
 8004356:	fb25 720e 	smlad	r2, r5, lr, r7
 800435a:	f04f 0b01 	mov.w	fp, #1
 800435e:	9203      	str	r2, [sp, #12]
 8004360:	fb2c fb0b 	smuad	fp, ip, fp
 8004364:	4f44      	ldr	r7, [pc, #272]	; (8004478 <D128_GENERIC+0x3cc>)
 8004366:	fb2a ba07 	smlad	sl, sl, r7, fp
 800436a:	4f44      	ldr	r7, [pc, #272]	; (800447c <D128_GENERIC+0x3d0>)
 800436c:	fb21 aa07 	smlad	sl, r1, r7, sl
 8004370:	4f43      	ldr	r7, [pc, #268]	; (8004480 <D128_GENERIC+0x3d4>)
 8004372:	fb24 aa07 	smlad	sl, r4, r7, sl
 8004376:	4f43      	ldr	r7, [pc, #268]	; (8004484 <D128_GENERIC+0x3d8>)
 8004378:	fb28 a707 	smlad	r7, r8, r7, sl
 800437c:	4a42      	ldr	r2, [pc, #264]	; (8004488 <D128_GENERIC+0x3dc>)
 800437e:	fb20 7702 	smlad	r7, r0, r2, r7
 8004382:	4a42      	ldr	r2, [pc, #264]	; (800448c <D128_GENERIC+0x3e0>)
 8004384:	fb23 7702 	smlad	r7, r3, r2, r7
 8004388:	4b41      	ldr	r3, [pc, #260]	; (8004490 <D128_GENERIC+0x3e4>)
 800438a:	fb25 7303 	smlad	r3, r5, r3, r7
 800438e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004390:	9304      	str	r3, [sp, #16]
 8004392:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 8004396:	b185      	cbz	r5, 80043ba <D128_GENERIC+0x30e>
 8004398:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800439a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800439c:	960d      	str	r6, [sp, #52]	; 0x34
 800439e:	4432      	add	r2, r6
 80043a0:	1a52      	subs	r2, r2, r1
 80043a2:	17d1      	asrs	r1, r2, #31
 80043a4:	fba2 2305 	umull	r2, r3, r2, r5
 80043a8:	fb05 3301 	mla	r3, r5, r1, r3
 80043ac:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 80043b0:	f143 0300 	adc.w	r3, r3, #0
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	930c      	str	r3, [sp, #48]	; 0x30
 80043b8:	461e      	mov	r6, r3
 80043ba:	9801      	ldr	r0, [sp, #4]
 80043bc:	9c06      	ldr	r4, [sp, #24]
 80043be:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 80043c0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80043c2:	01f6      	lsls	r6, r6, #7
 80043c4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80043c8:	2300      	movs	r3, #0
 80043ca:	fbc5 2306 	smlal	r2, r3, r5, r6
 80043ce:	fb04 f101 	mul.w	r1, r4, r1
 80043d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80043d4:	109b      	asrs	r3, r3, #2
 80043d6:	f303 030f 	ssat	r3, #16, r3
 80043da:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 80043de:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 80043e0:	1c62      	adds	r2, r4, #1
 80043e2:	4293      	cmp	r3, r2
 80043e4:	9206      	str	r2, [sp, #24]
 80043e6:	dd18      	ble.n	800441a <D128_GENERIC+0x36e>
 80043e8:	9b01      	ldr	r3, [sp, #4]
 80043ea:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80043ec:	2a01      	cmp	r2, #1
 80043ee:	f47f ae80 	bne.w	80040f2 <D128_GENERIC+0x46>
 80043f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f4:	9d05      	ldr	r5, [sp, #20]
 80043f6:	069b      	lsls	r3, r3, #26
 80043f8:	6829      	ldr	r1, [r5, #0]
 80043fa:	686a      	ldr	r2, [r5, #4]
 80043fc:	68a8      	ldr	r0, [r5, #8]
 80043fe:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8004402:	f105 0410 	add.w	r4, r5, #16
 8004406:	d506      	bpl.n	8004416 <D128_GENERIC+0x36a>
 8004408:	ba49      	rev16	r1, r1
 800440a:	ba52      	rev16	r2, r2
 800440c:	ba40      	rev16	r0, r0
 800440e:	fa9a fa9a 	rev16.w	sl, sl
 8004412:	9405      	str	r4, [sp, #20]
 8004414:	e6cf      	b.n	80041b6 <D128_GENERIC+0x10a>
 8004416:	9405      	str	r4, [sp, #20]
 8004418:	e6cd      	b.n	80041b6 <D128_GENERIC+0x10a>
 800441a:	9a01      	ldr	r2, [sp, #4]
 800441c:	9904      	ldr	r1, [sp, #16]
 800441e:	6091      	str	r1, [r2, #8]
 8004420:	9903      	ldr	r1, [sp, #12]
 8004422:	60d1      	str	r1, [r2, #12]
 8004424:	9b02      	ldr	r3, [sp, #8]
 8004426:	61d3      	str	r3, [r2, #28]
 8004428:	4611      	mov	r1, r2
 800442a:	4613      	mov	r3, r2
 800442c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800442e:	610a      	str	r2, [r1, #16]
 8004430:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004432:	6159      	str	r1, [r3, #20]
 8004434:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004436:	6199      	str	r1, [r3, #24]
 8004438:	2000      	movs	r0, #0
 800443a:	b013      	add	sp, #76	; 0x4c
 800443c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004440:	00780069 	.word	0x00780069
 8004444:	005b004e 	.word	0x005b004e
 8004448:	00420037 	.word	0x00420037
 800444c:	002d0024 	.word	0x002d0024
 8004450:	001c0015 	.word	0x001c0015
 8004454:	000f000a 	.word	0x000f000a
 8004458:	00060003 	.word	0x00060003
 800445c:	00880096 	.word	0x00880096
 8004460:	00a200ac 	.word	0x00a200ac
 8004464:	00b400ba 	.word	0x00b400ba
 8004468:	00be00c0 	.word	0x00be00c0
 800446c:	00c000be 	.word	0x00c000be
 8004470:	00ba00b4 	.word	0x00ba00b4
 8004474:	00ac00a2 	.word	0x00ac00a2
 8004478:	00030006 	.word	0x00030006
 800447c:	000a000f 	.word	0x000a000f
 8004480:	0015001c 	.word	0x0015001c
 8004484:	0024002d 	.word	0x0024002d
 8004488:	00370042 	.word	0x00370042
 800448c:	004e005b 	.word	0x004e005b
 8004490:	00690078 	.word	0x00690078
 8004494:	20000000 	.word	0x20000000
 8004498:	00960088 	.word	0x00960088

0800449c <D16_1CH_HTONS_VOL_HP>:
 800449c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044a0:	4691      	mov	r9, r2
 80044a2:	b083      	sub	sp, #12
 80044a4:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 80044a6:	f8d9 3018 	ldr.w	r3, [r9, #24]
 80044aa:	f8d9 400c 	ldr.w	r4, [r9, #12]
 80044ae:	9300      	str	r3, [sp, #0]
 80044b0:	4680      	mov	r8, r0
 80044b2:	f8d9 7014 	ldr.w	r7, [r9, #20]
 80044b6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80044ba:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80044be:	f8d9 5008 	ldr.w	r5, [r9, #8]
 80044c2:	9401      	str	r4, [sp, #4]
 80044c4:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 80044c8:	f8d9 e020 	ldr.w	lr, [r9, #32]
 80044cc:	2a00      	cmp	r2, #0
 80044ce:	d04e      	beq.n	800456e <D16_1CH_HTONS_VOL_HP+0xd2>
 80044d0:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 800457c <D16_1CH_HTONS_VOL_HP+0xe0>
 80044d4:	1e8c      	subs	r4, r1, #2
 80044d6:	eb08 0b42 	add.w	fp, r8, r2, lsl #1
 80044da:	f858 2b02 	ldr.w	r2, [r8], #2
 80044de:	ba52      	rev16	r2, r2
 80044e0:	b2d6      	uxtb	r6, r2
 80044e2:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80044e6:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 80044ea:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 80044ee:	4413      	add	r3, r2
 80044f0:	eb01 2293 	add.w	r2, r1, r3, lsr #10
 80044f4:	f3c2 0109 	ubfx	r1, r2, #0, #10
 80044f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8004500:	0a93      	lsrs	r3, r2, #10
 8004502:	4a1c      	ldr	r2, [pc, #112]	; (8004574 <D16_1CH_HTONS_VOL_HP+0xd8>)
 8004504:	fb21 5202 	smlad	r2, r1, r2, r5
 8004508:	4d1b      	ldr	r5, [pc, #108]	; (8004578 <D16_1CH_HTONS_VOL_HP+0xdc>)
 800450a:	fb21 f505 	smuad	r5, r1, r5
 800450e:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8004512:	4410      	add	r0, r2
 8004514:	1bc0      	subs	r0, r0, r7
 8004516:	17c7      	asrs	r7, r0, #31
 8004518:	fba0 010e 	umull	r0, r1, r0, lr
 800451c:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8004520:	fb0e 1107 	mla	r1, lr, r7, r1
 8004524:	f141 0100 	adc.w	r1, r1, #0
 8004528:	0448      	lsls	r0, r1, #17
 800452a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800452e:	2700      	movs	r7, #0
 8004530:	fbc0 670a 	smlal	r6, r7, r0, sl
 8004534:	45d8      	cmp	r8, fp
 8004536:	ea4f 0041 	mov.w	r0, r1, lsl #1
 800453a:	ea4f 01a7 	mov.w	r1, r7, asr #2
 800453e:	4617      	mov	r7, r2
 8004540:	f301 010f 	ssat	r1, #16, r1
 8004544:	f824 1f02 	strh.w	r1, [r4, #2]!
 8004548:	d1c7      	bne.n	80044da <D16_1CH_HTONS_VOL_HP+0x3e>
 800454a:	9901      	ldr	r1, [sp, #4]
 800454c:	f8c9 301c 	str.w	r3, [r9, #28]
 8004550:	9b00      	ldr	r3, [sp, #0]
 8004552:	f8c9 0010 	str.w	r0, [r9, #16]
 8004556:	2000      	movs	r0, #0
 8004558:	f8c9 5008 	str.w	r5, [r9, #8]
 800455c:	f8c9 100c 	str.w	r1, [r9, #12]
 8004560:	f8c9 2014 	str.w	r2, [r9, #20]
 8004564:	f8c9 3018 	str.w	r3, [r9, #24]
 8004568:	b003      	add	sp, #12
 800456a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800456e:	463a      	mov	r2, r7
 8004570:	4621      	mov	r1, r4
 8004572:	e7eb      	b.n	800454c <D16_1CH_HTONS_VOL_HP+0xb0>
 8004574:	00030001 	.word	0x00030001
 8004578:	00010003 	.word	0x00010003
 800457c:	20000000 	.word	0x20000000

08004580 <D24_1CH_HTONS_VOL_HP>:
 8004580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004584:	b089      	sub	sp, #36	; 0x24
 8004586:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8004588:	6996      	ldr	r6, [r2, #24]
 800458a:	9304      	str	r3, [sp, #16]
 800458c:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800458e:	9207      	str	r2, [sp, #28]
 8004590:	6915      	ldr	r5, [r2, #16]
 8004592:	6954      	ldr	r4, [r2, #20]
 8004594:	9606      	str	r6, [sp, #24]
 8004596:	6893      	ldr	r3, [r2, #8]
 8004598:	69d6      	ldr	r6, [r2, #28]
 800459a:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 800459e:	f8d2 a020 	ldr.w	sl, [r2, #32]
 80045a2:	9a04      	ldr	r2, [sp, #16]
 80045a4:	9705      	str	r7, [sp, #20]
 80045a6:	2a00      	cmp	r2, #0
 80045a8:	d07e      	beq.n	80046a8 <D24_1CH_HTONS_VOL_HP+0x128>
 80045aa:	f1a1 0b02 	sub.w	fp, r1, #2
 80045ae:	2700      	movs	r7, #0
 80045b0:	46a8      	mov	r8, r5
 80045b2:	f8cd b004 	str.w	fp, [sp, #4]
 80045b6:	4655      	mov	r5, sl
 80045b8:	46e3      	mov	fp, ip
 80045ba:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 80046b4 <D24_1CH_HTONS_VOL_HP+0x134>
 80045be:	46ba      	mov	sl, r7
 80045c0:	469c      	mov	ip, r3
 80045c2:	e055      	b.n	8004670 <D24_1CH_HTONS_VOL_HP+0xf0>
 80045c4:	7802      	ldrb	r2, [r0, #0]
 80045c6:	78c3      	ldrb	r3, [r0, #3]
 80045c8:	7841      	ldrb	r1, [r0, #1]
 80045ca:	0212      	lsls	r2, r2, #8
 80045cc:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 80045d0:	440b      	add	r3, r1
 80045d2:	3002      	adds	r0, #2
 80045d4:	b2d9      	uxtb	r1, r3
 80045d6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80045da:	f85e 7021 	ldr.w	r7, [lr, r1, lsl #2]
 80045de:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 80045e2:	0c1b      	lsrs	r3, r3, #16
 80045e4:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 80045e8:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 80045ec:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
 80045f0:	f3c7 0309 	ubfx	r3, r7, #0, #10
 80045f4:	f3c2 0709 	ubfx	r7, r2, #0, #10
 80045f8:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 80045fc:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8004600:	4a2a      	ldr	r2, [pc, #168]	; (80046ac <D24_1CH_HTONS_VOL_HP+0x12c>)
 8004602:	fb23 b102 	smlad	r1, r3, r2, fp
 8004606:	4a2a      	ldr	r2, [pc, #168]	; (80046b0 <D24_1CH_HTONS_VOL_HP+0x130>)
 8004608:	fb23 cb02 	smlad	fp, r3, r2, ip
 800460c:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 8004610:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8004614:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
 8004618:	2201      	movs	r2, #1
 800461a:	fb23 f702 	smuad	r7, r3, r2
 800461e:	f5a1 51d8 	sub.w	r1, r1, #6912	; 0x1b00
 8004622:	eb01 0208 	add.w	r2, r1, r8
 8004626:	1b12      	subs	r2, r2, r4
 8004628:	17d4      	asrs	r4, r2, #31
 800462a:	fba2 2305 	umull	r2, r3, r2, r5
 800462e:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8004632:	fb05 3304 	mla	r3, r5, r4, r3
 8004636:	f143 0300 	adc.w	r3, r3, #0
 800463a:	9c05      	ldr	r4, [sp, #20]
 800463c:	03da      	lsls	r2, r3, #15
 800463e:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8004642:	f04f 0900 	mov.w	r9, #0
 8004646:	fbc4 8902 	smlal	r8, r9, r4, r2
 800464a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800464e:	9a01      	ldr	r2, [sp, #4]
 8004650:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8004654:	9b03      	ldr	r3, [sp, #12]
 8004656:	109b      	asrs	r3, r3, #2
 8004658:	f303 030f 	ssat	r3, #16, r3
 800465c:	f822 3f02 	strh.w	r3, [r2, #2]!
 8004660:	9b04      	ldr	r3, [sp, #16]
 8004662:	9201      	str	r2, [sp, #4]
 8004664:	f10a 0a01 	add.w	sl, sl, #1
 8004668:	459a      	cmp	sl, r3
 800466a:	44bc      	add	ip, r7
 800466c:	460c      	mov	r4, r1
 800466e:	d00b      	beq.n	8004688 <D24_1CH_HTONS_VOL_HP+0x108>
 8004670:	f01a 0f01 	tst.w	sl, #1
 8004674:	d0a6      	beq.n	80045c4 <D24_1CH_HTONS_VOL_HP+0x44>
 8004676:	78c2      	ldrb	r2, [r0, #3]
 8004678:	7883      	ldrb	r3, [r0, #2]
 800467a:	f810 1b04 	ldrb.w	r1, [r0], #4
 800467e:	0212      	lsls	r2, r2, #8
 8004680:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 8004684:	440b      	add	r3, r1
 8004686:	e7a5      	b.n	80045d4 <D24_1CH_HTONS_VOL_HP+0x54>
 8004688:	4663      	mov	r3, ip
 800468a:	4645      	mov	r5, r8
 800468c:	46dc      	mov	ip, fp
 800468e:	9807      	ldr	r0, [sp, #28]
 8004690:	6141      	str	r1, [r0, #20]
 8004692:	9906      	ldr	r1, [sp, #24]
 8004694:	6083      	str	r3, [r0, #8]
 8004696:	f8c0 c00c 	str.w	ip, [r0, #12]
 800469a:	61c6      	str	r6, [r0, #28]
 800469c:	6105      	str	r5, [r0, #16]
 800469e:	6181      	str	r1, [r0, #24]
 80046a0:	2000      	movs	r0, #0
 80046a2:	b009      	add	sp, #36	; 0x24
 80046a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046a8:	4621      	mov	r1, r4
 80046aa:	e7f0      	b.n	800468e <D24_1CH_HTONS_VOL_HP+0x10e>
 80046ac:	00030001 	.word	0x00030001
 80046b0:	00060007 	.word	0x00060007
 80046b4:	20000000 	.word	0x20000000

080046b8 <D32_1CH_HTONS_VOL_HP>:
 80046b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046bc:	4692      	mov	sl, r2
 80046be:	b087      	sub	sp, #28
 80046c0:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 80046c2:	f8da 3018 	ldr.w	r3, [sl, #24]
 80046c6:	f8da 5030 	ldr.w	r5, [sl, #48]	; 0x30
 80046ca:	9304      	str	r3, [sp, #16]
 80046cc:	f8da 4010 	ldr.w	r4, [sl, #16]
 80046d0:	f8da 8014 	ldr.w	r8, [sl, #20]
 80046d4:	f8da 601c 	ldr.w	r6, [sl, #28]
 80046d8:	f8da 3008 	ldr.w	r3, [sl, #8]
 80046dc:	f8da e00c 	ldr.w	lr, [sl, #12]
 80046e0:	9501      	str	r5, [sp, #4]
 80046e2:	f8da c020 	ldr.w	ip, [sl, #32]
 80046e6:	2a00      	cmp	r2, #0
 80046e8:	d07b      	beq.n	80047e2 <D32_1CH_HTONS_VOL_HP+0x12a>
 80046ea:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80046ee:	4f3e      	ldr	r7, [pc, #248]	; (80047e8 <D32_1CH_HTONS_VOL_HP+0x130>)
 80046f0:	f8cd c00c 	str.w	ip, [sp, #12]
 80046f4:	9202      	str	r2, [sp, #8]
 80046f6:	460d      	mov	r5, r1
 80046f8:	46a1      	mov	r9, r4
 80046fa:	4684      	mov	ip, r0
 80046fc:	f8cd a014 	str.w	sl, [sp, #20]
 8004700:	f85c 1b04 	ldr.w	r1, [ip], #4
 8004704:	ba49      	rev16	r1, r1
 8004706:	b2c8      	uxtb	r0, r1
 8004708:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800470c:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8004710:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8004714:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8004718:	0e09      	lsrs	r1, r1, #24
 800471a:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800471e:	f857 602a 	ldr.w	r6, [r7, sl, lsl #2]
 8004722:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8004726:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 800472a:	eb06 2a92 	add.w	sl, r6, r2, lsr #10
 800472e:	eb01 269a 	add.w	r6, r1, sl, lsr #10
 8004732:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004736:	f3c6 0109 	ubfx	r1, r6, #0, #10
 800473a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800473e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8004742:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 8004746:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800474a:	4a28      	ldr	r2, [pc, #160]	; (80047ec <D32_1CH_HTONS_VOL_HP+0x134>)
 800474c:	fb20 e202 	smlad	r2, r0, r2, lr
 8004750:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004754:	fb2a 2101 	smlad	r1, sl, r1, r2
 8004758:	4a25      	ldr	r2, [pc, #148]	; (80047f0 <D32_1CH_HTONS_VOL_HP+0x138>)
 800475a:	fb20 3302 	smlad	r3, r0, r2, r3
 800475e:	4a25      	ldr	r2, [pc, #148]	; (80047f4 <D32_1CH_HTONS_VOL_HP+0x13c>)
 8004760:	fb2a 3e02 	smlad	lr, sl, r2, r3
 8004764:	2301      	movs	r3, #1
 8004766:	fb20 f003 	smuad	r0, r0, r3
 800476a:	4b23      	ldr	r3, [pc, #140]	; (80047f8 <D32_1CH_HTONS_VOL_HP+0x140>)
 800476c:	fb2a 0303 	smlad	r3, sl, r3, r0
 8004770:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
 8004774:	9c03      	ldr	r4, [sp, #12]
 8004776:	eb02 0009 	add.w	r0, r2, r9
 800477a:	eba0 0008 	sub.w	r0, r0, r8
 800477e:	ea4f 7be0 	mov.w	fp, r0, asr #31
 8004782:	fba0 0104 	umull	r0, r1, r0, r4
 8004786:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800478a:	fb04 110b 	mla	r1, r4, fp, r1
 800478e:	f141 0100 	adc.w	r1, r1, #0
 8004792:	9c01      	ldr	r4, [sp, #4]
 8004794:	0388      	lsls	r0, r1, #14
 8004796:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800479a:	f04f 0900 	mov.w	r9, #0
 800479e:	fbc0 8904 	smlal	r8, r9, r0, r4
 80047a2:	ea4f 00a9 	mov.w	r0, r9, asr #2
 80047a6:	ea4f 0941 	mov.w	r9, r1, lsl #1
 80047aa:	f300 000f 	ssat	r0, #16, r0
 80047ae:	9902      	ldr	r1, [sp, #8]
 80047b0:	f825 0b02 	strh.w	r0, [r5], #2
 80047b4:	428d      	cmp	r5, r1
 80047b6:	4690      	mov	r8, r2
 80047b8:	d1a2      	bne.n	8004700 <D32_1CH_HTONS_VOL_HP+0x48>
 80047ba:	f8dd a014 	ldr.w	sl, [sp, #20]
 80047be:	464c      	mov	r4, r9
 80047c0:	f8ca 3008 	str.w	r3, [sl, #8]
 80047c4:	9b04      	ldr	r3, [sp, #16]
 80047c6:	f8ca e00c 	str.w	lr, [sl, #12]
 80047ca:	2000      	movs	r0, #0
 80047cc:	f8ca 601c 	str.w	r6, [sl, #28]
 80047d0:	f8ca 4010 	str.w	r4, [sl, #16]
 80047d4:	f8ca 2014 	str.w	r2, [sl, #20]
 80047d8:	f8ca 3018 	str.w	r3, [sl, #24]
 80047dc:	b007      	add	sp, #28
 80047de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047e2:	4642      	mov	r2, r8
 80047e4:	e7ec      	b.n	80047c0 <D32_1CH_HTONS_VOL_HP+0x108>
 80047e6:	bf00      	nop
 80047e8:	20000000 	.word	0x20000000
 80047ec:	00060003 	.word	0x00060003
 80047f0:	000a000c 	.word	0x000a000c
 80047f4:	000c000a 	.word	0x000c000a
 80047f8:	00030006 	.word	0x00030006

080047fc <D48_1CH_HTONS_VOL_HP>:
 80047fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004800:	4613      	mov	r3, r2
 8004802:	461c      	mov	r4, r3
 8004804:	b087      	sub	sp, #28
 8004806:	4625      	mov	r5, r4
 8004808:	4626      	mov	r6, r4
 800480a:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 800480c:	9205      	str	r2, [sp, #20]
 800480e:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8004810:	f8d3 9014 	ldr.w	r9, [r3, #20]
 8004814:	9501      	str	r5, [sp, #4]
 8004816:	4680      	mov	r8, r0
 8004818:	6a35      	ldr	r5, [r6, #32]
 800481a:	6918      	ldr	r0, [r3, #16]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	9304      	str	r3, [sp, #16]
 8004820:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 8004824:	68a3      	ldr	r3, [r4, #8]
 8004826:	9502      	str	r5, [sp, #8]
 8004828:	68e4      	ldr	r4, [r4, #12]
 800482a:	2a00      	cmp	r2, #0
 800482c:	f000 808c 	beq.w	8004948 <D48_1CH_HTONS_VOL_HP+0x14c>
 8004830:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8004834:	4d45      	ldr	r5, [pc, #276]	; (800494c <D48_1CH_HTONS_VOL_HP+0x150>)
 8004836:	9203      	str	r2, [sp, #12]
 8004838:	468c      	mov	ip, r1
 800483a:	e898 0044 	ldmia.w	r8, {r2, r6}
 800483e:	f108 0806 	add.w	r8, r8, #6
 8004842:	ba52      	rev16	r2, r2
 8004844:	ba76      	rev16	r6, r6
 8004846:	b2d7      	uxtb	r7, r2
 8004848:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800484c:	f855 a027 	ldr.w	sl, [r5, r7, lsl #2]
 8004850:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8004854:	f3c2 4707 	ubfx	r7, r2, #16, #8
 8004858:	0e12      	lsrs	r2, r2, #24
 800485a:	eb0a 2a9e 	add.w	sl, sl, lr, lsr #10
 800485e:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 8004862:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8004866:	fa5f fb86 	uxtb.w	fp, r6
 800486a:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800486e:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 8004872:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 8004876:	f855 602b 	ldr.w	r6, [r5, fp, lsl #2]
 800487a:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 800487e:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8004882:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8004886:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800488a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800488e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004892:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 8004896:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800489a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800489e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80048a2:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 80048a6:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 80048aa:	ea4b 4606 	orr.w	r6, fp, r6, lsl #16
 80048ae:	4a28      	ldr	r2, [pc, #160]	; (8004950 <D48_1CH_HTONS_VOL_HP+0x154>)
 80048b0:	fb2a 4202 	smlad	r2, sl, r2, r4
 80048b4:	4927      	ldr	r1, [pc, #156]	; (8004954 <D48_1CH_HTONS_VOL_HP+0x158>)
 80048b6:	fb27 2201 	smlad	r2, r7, r1, r2
 80048ba:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80048be:	fb26 2201 	smlad	r2, r6, r1, r2
 80048c2:	4925      	ldr	r1, [pc, #148]	; (8004958 <D48_1CH_HTONS_VOL_HP+0x15c>)
 80048c4:	fb2a 3401 	smlad	r4, sl, r1, r3
 80048c8:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 80048cc:	fb27 4403 	smlad	r4, r7, r3, r4
 80048d0:	4b22      	ldr	r3, [pc, #136]	; (800495c <D48_1CH_HTONS_VOL_HP+0x160>)
 80048d2:	fb26 4403 	smlad	r4, r6, r3, r4
 80048d6:	2101      	movs	r1, #1
 80048d8:	fb2a fa01 	smuad	sl, sl, r1
 80048dc:	4b20      	ldr	r3, [pc, #128]	; (8004960 <D48_1CH_HTONS_VOL_HP+0x164>)
 80048de:	fb27 a703 	smlad	r7, r7, r3, sl
 80048e2:	4b20      	ldr	r3, [pc, #128]	; (8004964 <D48_1CH_HTONS_VOL_HP+0x168>)
 80048e4:	fb26 7303 	smlad	r3, r6, r3, r7
 80048e8:	f5a2 4258 	sub.w	r2, r2, #55296	; 0xd800
 80048ec:	9e02      	ldr	r6, [sp, #8]
 80048ee:	9f01      	ldr	r7, [sp, #4]
 80048f0:	4410      	add	r0, r2
 80048f2:	eba0 0009 	sub.w	r0, r0, r9
 80048f6:	ea4f 7ae0 	mov.w	sl, r0, asr #31
 80048fa:	fba0 0106 	umull	r0, r1, r0, r6
 80048fe:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8004902:	fb06 110a 	mla	r1, r6, sl, r1
 8004906:	f141 0100 	adc.w	r1, r1, #0
 800490a:	0308      	lsls	r0, r1, #12
 800490c:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8004910:	f04f 0a00 	mov.w	sl, #0
 8004914:	fbc0 9a07 	smlal	r9, sl, r0, r7
 8004918:	4657      	mov	r7, sl
 800491a:	10b8      	asrs	r0, r7, #2
 800491c:	f300 000f 	ssat	r0, #16, r0
 8004920:	f82c 0b02 	strh.w	r0, [ip], #2
 8004924:	0048      	lsls	r0, r1, #1
 8004926:	9903      	ldr	r1, [sp, #12]
 8004928:	458c      	cmp	ip, r1
 800492a:	4691      	mov	r9, r2
 800492c:	d185      	bne.n	800483a <D48_1CH_HTONS_VOL_HP+0x3e>
 800492e:	9d05      	ldr	r5, [sp, #20]
 8004930:	616a      	str	r2, [r5, #20]
 8004932:	9a04      	ldr	r2, [sp, #16]
 8004934:	6128      	str	r0, [r5, #16]
 8004936:	2000      	movs	r0, #0
 8004938:	60ab      	str	r3, [r5, #8]
 800493a:	60ec      	str	r4, [r5, #12]
 800493c:	f8c5 e01c 	str.w	lr, [r5, #28]
 8004940:	61aa      	str	r2, [r5, #24]
 8004942:	b007      	add	sp, #28
 8004944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004948:	464a      	mov	r2, r9
 800494a:	e7f0      	b.n	800492e <D48_1CH_HTONS_VOL_HP+0x132>
 800494c:	20000000 	.word	0x20000000
 8004950:	000f000a 	.word	0x000f000a
 8004954:	00060003 	.word	0x00060003
 8004958:	00150019 	.word	0x00150019
 800495c:	00190015 	.word	0x00190015
 8004960:	00030006 	.word	0x00030006
 8004964:	000a000f 	.word	0x000a000f

08004968 <D64_1CH_HTONS_VOL_HP>:
 8004968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800496c:	b089      	sub	sp, #36	; 0x24
 800496e:	4614      	mov	r4, r2
 8004970:	9207      	str	r2, [sp, #28]
 8004972:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8004974:	f8d2 c010 	ldr.w	ip, [r2, #16]
 8004978:	f8d2 8014 	ldr.w	r8, [r2, #20]
 800497c:	6992      	ldr	r2, [r2, #24]
 800497e:	9206      	str	r2, [sp, #24]
 8004980:	68e2      	ldr	r2, [r4, #12]
 8004982:	9201      	str	r2, [sp, #4]
 8004984:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004986:	9203      	str	r2, [sp, #12]
 8004988:	6a22      	ldr	r2, [r4, #32]
 800498a:	69e5      	ldr	r5, [r4, #28]
 800498c:	68a6      	ldr	r6, [r4, #8]
 800498e:	9204      	str	r2, [sp, #16]
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 80b0 	beq.w	8004af6 <D64_1CH_HTONS_VOL_HP+0x18e>
 8004996:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800499a:	4f58      	ldr	r7, [pc, #352]	; (8004afc <D64_1CH_HTONS_VOL_HP+0x194>)
 800499c:	9305      	str	r3, [sp, #20]
 800499e:	9102      	str	r1, [sp, #8]
 80049a0:	f850 2b08 	ldr.w	r2, [r0], #8
 80049a4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80049a8:	ba52      	rev16	r2, r2
 80049aa:	fa93 f993 	rev16.w	r9, r3
 80049ae:	b2d4      	uxtb	r4, r2
 80049b0:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80049b4:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
 80049b8:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80049bc:	9901      	ldr	r1, [sp, #4]
 80049be:	f3c2 4407 	ubfx	r4, r2, #16, #8
 80049c2:	0e12      	lsrs	r2, r2, #24
 80049c4:	44ab      	add	fp, r5
 80049c6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80049ca:	f857 4022 	ldr.w	r4, [r7, r2, lsl #2]
 80049ce:	fa5f f289 	uxtb.w	r2, r9
 80049d2:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 80049d6:	f3c9 2307 	ubfx	r3, r9, #8, #8
 80049da:	eb05 2a9e 	add.w	sl, r5, lr, lsr #10
 80049de:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80049e2:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80049e6:	f3c9 4507 	ubfx	r5, r9, #16, #8
 80049ea:	eb04 249a 	add.w	r4, r4, sl, lsr #10
 80049ee:	ea4f 6919 	mov.w	r9, r9, lsr #24
 80049f2:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 80049f6:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 80049fa:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 80049fe:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 8004a02:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8004a06:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 8004a0a:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8004a0e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8004a12:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8004a16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a1a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004a1e:	ea4e 4b0b 	orr.w	fp, lr, fp, lsl #16
 8004a22:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004a26:	f3c9 0e09 	ubfx	lr, r9, #0, #10
 8004a2a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004a2e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8004a32:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 8004a36:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8004a3a:	ea4f 2599 	mov.w	r5, r9, lsr #10
 8004a3e:	4b30      	ldr	r3, [pc, #192]	; (8004b00 <D64_1CH_HTONS_VOL_HP+0x198>)
 8004a40:	fb2b 1303 	smlad	r3, fp, r3, r1
 8004a44:	492f      	ldr	r1, [pc, #188]	; (8004b04 <D64_1CH_HTONS_VOL_HP+0x19c>)
 8004a46:	fb24 3301 	smlad	r3, r4, r1, r3
 8004a4a:	492f      	ldr	r1, [pc, #188]	; (8004b08 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 8004a4c:	fb22 3301 	smlad	r3, r2, r1, r3
 8004a50:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8004a54:	fb2e 390a 	smlad	r9, lr, sl, r3
 8004a58:	4b2c      	ldr	r3, [pc, #176]	; (8004b0c <D64_1CH_HTONS_VOL_HP+0x1a4>)
 8004a5a:	fb2b 6603 	smlad	r6, fp, r3, r6
 8004a5e:	fb2e 6613 	smladx	r6, lr, r3, r6
 8004a62:	4b2b      	ldr	r3, [pc, #172]	; (8004b10 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 8004a64:	fb24 6603 	smlad	r6, r4, r3, r6
 8004a68:	fb22 6313 	smladx	r3, r2, r3, r6
 8004a6c:	f04f 0a01 	mov.w	sl, #1
 8004a70:	9301      	str	r3, [sp, #4]
 8004a72:	fb2b fb0a 	smuad	fp, fp, sl
 8004a76:	4b27      	ldr	r3, [pc, #156]	; (8004b14 <D64_1CH_HTONS_VOL_HP+0x1ac>)
 8004a78:	fb24 ba03 	smlad	sl, r4, r3, fp
 8004a7c:	4b26      	ldr	r3, [pc, #152]	; (8004b18 <D64_1CH_HTONS_VOL_HP+0x1b0>)
 8004a7e:	fb22 a203 	smlad	r2, r2, r3, sl
 8004a82:	4b26      	ldr	r3, [pc, #152]	; (8004b1c <D64_1CH_HTONS_VOL_HP+0x1b4>)
 8004a84:	fb2e 2603 	smlad	r6, lr, r3, r2
 8004a88:	f5a9 3a00 	sub.w	sl, r9, #131072	; 0x20000
 8004a8c:	eb0a 020c 	add.w	r2, sl, ip
 8004a90:	9c04      	ldr	r4, [sp, #16]
 8004a92:	9903      	ldr	r1, [sp, #12]
 8004a94:	eba2 0208 	sub.w	r2, r2, r8
 8004a98:	ea4f 79e2 	mov.w	r9, r2, asr #31
 8004a9c:	fba2 2304 	umull	r2, r3, r2, r4
 8004aa0:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8004aa4:	fb04 3309 	mla	r3, r4, r9, r3
 8004aa8:	f143 0300 	adc.w	r3, r3, #0
 8004aac:	02da      	lsls	r2, r3, #11
 8004aae:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8004ab2:	f04f 0900 	mov.w	r9, #0
 8004ab6:	fbc1 8902 	smlal	r8, r9, r1, r2
 8004aba:	9902      	ldr	r1, [sp, #8]
 8004abc:	ea4f 02a9 	mov.w	r2, r9, asr #2
 8004ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004ac4:	f302 020f 	ssat	r2, #16, r2
 8004ac8:	9b05      	ldr	r3, [sp, #20]
 8004aca:	f821 2b02 	strh.w	r2, [r1], #2
 8004ace:	4299      	cmp	r1, r3
 8004ad0:	9102      	str	r1, [sp, #8]
 8004ad2:	46d0      	mov	r8, sl
 8004ad4:	f47f af64 	bne.w	80049a0 <D64_1CH_HTONS_VOL_HP+0x38>
 8004ad8:	9a07      	ldr	r2, [sp, #28]
 8004ada:	9901      	ldr	r1, [sp, #4]
 8004adc:	60d1      	str	r1, [r2, #12]
 8004ade:	9906      	ldr	r1, [sp, #24]
 8004ae0:	6096      	str	r6, [r2, #8]
 8004ae2:	2000      	movs	r0, #0
 8004ae4:	61d5      	str	r5, [r2, #28]
 8004ae6:	f8c2 c010 	str.w	ip, [r2, #16]
 8004aea:	f8c2 a014 	str.w	sl, [r2, #20]
 8004aee:	6191      	str	r1, [r2, #24]
 8004af0:	b009      	add	sp, #36	; 0x24
 8004af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004af6:	46c2      	mov	sl, r8
 8004af8:	4622      	mov	r2, r4
 8004afa:	e7ee      	b.n	8004ada <D64_1CH_HTONS_VOL_HP+0x172>
 8004afc:	20000000 	.word	0x20000000
 8004b00:	001c0015 	.word	0x001c0015
 8004b04:	000f000a 	.word	0x000f000a
 8004b08:	00060003 	.word	0x00060003
 8004b0c:	0024002a 	.word	0x0024002a
 8004b10:	002e0030 	.word	0x002e0030
 8004b14:	00030006 	.word	0x00030006
 8004b18:	000a000f 	.word	0x000a000f
 8004b1c:	0015001c 	.word	0x0015001c

08004b20 <D80_1CH_HTONS_VOL_HP>:
 8004b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b24:	4613      	mov	r3, r2
 8004b26:	b089      	sub	sp, #36	; 0x24
 8004b28:	4686      	mov	lr, r0
 8004b2a:	6918      	ldr	r0, [r3, #16]
 8004b2c:	9000      	str	r0, [sp, #0]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	461c      	mov	r4, r3
 8004b32:	695b      	ldr	r3, [r3, #20]
 8004b34:	9302      	str	r3, [sp, #8]
 8004b36:	6983      	ldr	r3, [r0, #24]
 8004b38:	9306      	str	r3, [sp, #24]
 8004b3a:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8004b3e:	69c3      	ldr	r3, [r0, #28]
 8004b40:	68c0      	ldr	r0, [r0, #12]
 8004b42:	9207      	str	r2, [sp, #28]
 8004b44:	9001      	str	r0, [sp, #4]
 8004b46:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8004b48:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004b4a:	9003      	str	r0, [sp, #12]
 8004b4c:	6a20      	ldr	r0, [r4, #32]
 8004b4e:	9004      	str	r0, [sp, #16]
 8004b50:	2a00      	cmp	r2, #0
 8004b52:	f000 80d2 	beq.w	8004cfa <D80_1CH_HTONS_VOL_HP+0x1da>
 8004b56:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8004b5a:	4869      	ldr	r0, [pc, #420]	; (8004d00 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 8004b5c:	9205      	str	r2, [sp, #20]
 8004b5e:	461c      	mov	r4, r3
 8004b60:	f8de 5000 	ldr.w	r5, [lr]
 8004b64:	f8de 2004 	ldr.w	r2, [lr, #4]
 8004b68:	f8de 3008 	ldr.w	r3, [lr, #8]
 8004b6c:	f10e 0e0a 	add.w	lr, lr, #10
 8004b70:	ba6d      	rev16	r5, r5
 8004b72:	ba52      	rev16	r2, r2
 8004b74:	fa93 fb93 	rev16.w	fp, r3
 8004b78:	b2ee      	uxtb	r6, r5
 8004b7a:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8004b7e:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 8004b82:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004b86:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8004b8a:	eb04 0a07 	add.w	sl, r4, r7
 8004b8e:	0e2d      	lsrs	r5, r5, #24
 8004b90:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 8004b94:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 8004b98:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 8004b9c:	eb04 2993 	add.w	r9, r4, r3, lsr #10
 8004ba0:	b2d5      	uxtb	r5, r2
 8004ba2:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8004ba6:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 8004baa:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 8004bae:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8004bb2:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 8004bb6:	0e12      	lsrs	r2, r2, #24
 8004bb8:	eb07 2896 	add.w	r8, r7, r6, lsr #10
 8004bbc:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 8004bc0:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8004bc4:	fa5f f48b 	uxtb.w	r4, fp
 8004bc8:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8004bcc:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8004bd0:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8004bd4:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 8004bd8:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 8004bdc:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8004be0:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 8004be4:	eb0b 2b94 	add.w	fp, fp, r4, lsr #10
 8004be8:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8004bec:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8004bf0:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8004bf4:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004bf8:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8004bfc:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004c00:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 8004c04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c08:	f3cb 0609 	ubfx	r6, fp, #0, #10
 8004c0c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8004c10:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004c14:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 8004c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8004c1c:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 8004c20:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8004c24:	ea4f 249b 	mov.w	r4, fp, lsr #10
 8004c28:	4d36      	ldr	r5, [pc, #216]	; (8004d04 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 8004c2a:	9f01      	ldr	r7, [sp, #4]
 8004c2c:	fb23 7505 	smlad	r5, r3, r5, r7
 8004c30:	4f35      	ldr	r7, [pc, #212]	; (8004d08 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 8004c32:	fb29 5507 	smlad	r5, r9, r7, r5
 8004c36:	4f35      	ldr	r7, [pc, #212]	; (8004d0c <D80_1CH_HTONS_VOL_HP+0x1ec>)
 8004c38:	fb28 5507 	smlad	r5, r8, r7, r5
 8004c3c:	4f34      	ldr	r7, [pc, #208]	; (8004d10 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 8004c3e:	fb22 5507 	smlad	r5, r2, r7, r5
 8004c42:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8004c46:	fb26 5b0a 	smlad	fp, r6, sl, r5
 8004c4a:	4d32      	ldr	r5, [pc, #200]	; (8004d14 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 8004c4c:	fb23 cc05 	smlad	ip, r3, r5, ip
 8004c50:	4d31      	ldr	r5, [pc, #196]	; (8004d18 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 8004c52:	fb29 cc05 	smlad	ip, r9, r5, ip
 8004c56:	f04f 154b 	mov.w	r5, #4915275	; 0x4b004b
 8004c5a:	fb28 c505 	smlad	r5, r8, r5, ip
 8004c5e:	4f2f      	ldr	r7, [pc, #188]	; (8004d1c <D80_1CH_HTONS_VOL_HP+0x1fc>)
 8004c60:	fb22 5507 	smlad	r5, r2, r7, r5
 8004c64:	4f2e      	ldr	r7, [pc, #184]	; (8004d20 <D80_1CH_HTONS_VOL_HP+0x200>)
 8004c66:	fb26 5507 	smlad	r5, r6, r7, r5
 8004c6a:	f04f 0a01 	mov.w	sl, #1
 8004c6e:	9501      	str	r5, [sp, #4]
 8004c70:	fb23 fa0a 	smuad	sl, r3, sl
 8004c74:	4b2b      	ldr	r3, [pc, #172]	; (8004d24 <D80_1CH_HTONS_VOL_HP+0x204>)
 8004c76:	fb29 a903 	smlad	r9, r9, r3, sl
 8004c7a:	4d2b      	ldr	r5, [pc, #172]	; (8004d28 <D80_1CH_HTONS_VOL_HP+0x208>)
 8004c7c:	fb28 9805 	smlad	r8, r8, r5, r9
 8004c80:	4d2a      	ldr	r5, [pc, #168]	; (8004d2c <D80_1CH_HTONS_VOL_HP+0x20c>)
 8004c82:	fb22 8205 	smlad	r2, r2, r5, r8
 8004c86:	4b2a      	ldr	r3, [pc, #168]	; (8004d30 <D80_1CH_HTONS_VOL_HP+0x210>)
 8004c88:	fb26 2c03 	smlad	ip, r6, r3, r2
 8004c8c:	9b00      	ldr	r3, [sp, #0]
 8004c8e:	9d04      	ldr	r5, [sp, #16]
 8004c90:	f5ab 3a7a 	sub.w	sl, fp, #256000	; 0x3e800
 8004c94:	4453      	add	r3, sl
 8004c96:	461a      	mov	r2, r3
 8004c98:	9b02      	ldr	r3, [sp, #8]
 8004c9a:	f8cd a008 	str.w	sl, [sp, #8]
 8004c9e:	1ad2      	subs	r2, r2, r3
 8004ca0:	17d7      	asrs	r7, r2, #31
 8004ca2:	fba2 2305 	umull	r2, r3, r2, r5
 8004ca6:	fb05 3307 	mla	r3, r5, r7, r3
 8004caa:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8004cae:	f143 0300 	adc.w	r3, r3, #0
 8004cb2:	9d03      	ldr	r5, [sp, #12]
 8004cb4:	029a      	lsls	r2, r3, #10
 8004cb6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004cba:	2700      	movs	r7, #0
 8004cbc:	005b      	lsls	r3, r3, #1
 8004cbe:	fbc5 6702 	smlal	r6, r7, r5, r2
 8004cc2:	10ba      	asrs	r2, r7, #2
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	f302 020f 	ssat	r2, #16, r2
 8004cca:	9b05      	ldr	r3, [sp, #20]
 8004ccc:	f821 2b02 	strh.w	r2, [r1], #2
 8004cd0:	4299      	cmp	r1, r3
 8004cd2:	f47f af45 	bne.w	8004b60 <D80_1CH_HTONS_VOL_HP+0x40>
 8004cd6:	4623      	mov	r3, r4
 8004cd8:	9907      	ldr	r1, [sp, #28]
 8004cda:	9801      	ldr	r0, [sp, #4]
 8004cdc:	60c8      	str	r0, [r1, #12]
 8004cde:	9a00      	ldr	r2, [sp, #0]
 8004ce0:	f8c1 c008 	str.w	ip, [r1, #8]
 8004ce4:	4608      	mov	r0, r1
 8004ce6:	61cb      	str	r3, [r1, #28]
 8004ce8:	610a      	str	r2, [r1, #16]
 8004cea:	f8c1 a014 	str.w	sl, [r1, #20]
 8004cee:	9906      	ldr	r1, [sp, #24]
 8004cf0:	6181      	str	r1, [r0, #24]
 8004cf2:	2000      	movs	r0, #0
 8004cf4:	b009      	add	sp, #36	; 0x24
 8004cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cfa:	f8dd a008 	ldr.w	sl, [sp, #8]
 8004cfe:	e7eb      	b.n	8004cd8 <D80_1CH_HTONS_VOL_HP+0x1b8>
 8004d00:	20000000 	.word	0x20000000
 8004d04:	002d0024 	.word	0x002d0024
 8004d08:	001c0015 	.word	0x001c0015
 8004d0c:	000f000a 	.word	0x000f000a
 8004d10:	00060003 	.word	0x00060003
 8004d14:	0037003f 	.word	0x0037003f
 8004d18:	00450049 	.word	0x00450049
 8004d1c:	00490045 	.word	0x00490045
 8004d20:	003f0037 	.word	0x003f0037
 8004d24:	00030006 	.word	0x00030006
 8004d28:	000a000f 	.word	0x000a000f
 8004d2c:	0015001c 	.word	0x0015001c
 8004d30:	0024002d 	.word	0x0024002d

08004d34 <D128_1CH_HTONS_VOL_HP>:
 8004d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d38:	b093      	sub	sp, #76	; 0x4c
 8004d3a:	4614      	mov	r4, r2
 8004d3c:	9211      	str	r2, [sp, #68]	; 0x44
 8004d3e:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8004d40:	6912      	ldr	r2, [r2, #16]
 8004d42:	9203      	str	r2, [sp, #12]
 8004d44:	4622      	mov	r2, r4
 8004d46:	4615      	mov	r5, r2
 8004d48:	6964      	ldr	r4, [r4, #20]
 8004d4a:	9406      	str	r4, [sp, #24]
 8004d4c:	4614      	mov	r4, r2
 8004d4e:	6992      	ldr	r2, [r2, #24]
 8004d50:	9210      	str	r2, [sp, #64]	; 0x40
 8004d52:	68ea      	ldr	r2, [r5, #12]
 8004d54:	9204      	str	r2, [sp, #16]
 8004d56:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8004d58:	69e6      	ldr	r6, [r4, #28]
 8004d5a:	920d      	str	r2, [sp, #52]	; 0x34
 8004d5c:	68a4      	ldr	r4, [r4, #8]
 8004d5e:	6a2a      	ldr	r2, [r5, #32]
 8004d60:	9405      	str	r4, [sp, #20]
 8004d62:	920e      	str	r2, [sp, #56]	; 0x38
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	f000 8145 	beq.w	8004ff4 <D128_1CH_HTONS_VOL_HP+0x2c0>
 8004d6a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8004d6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004d70:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 8005050 <D128_1CH_HTONS_VOL_HP+0x31c>
 8004d74:	9107      	str	r1, [sp, #28]
 8004d76:	f100 0310 	add.w	r3, r0, #16
 8004d7a:	4699      	mov	r9, r3
 8004d7c:	f1a9 0110 	sub.w	r1, r9, #16
 8004d80:	c90e      	ldmia	r1, {r1, r2, r3}
 8004d82:	f859 0c04 	ldr.w	r0, [r9, #-4]
 8004d86:	ba49      	rev16	r1, r1
 8004d88:	ba52      	rev16	r2, r2
 8004d8a:	ba5b      	rev16	r3, r3
 8004d8c:	fa90 fa90 	rev16.w	sl, r0
 8004d90:	f3c1 2007 	ubfx	r0, r1, #8, #8
 8004d94:	b2cc      	uxtb	r4, r1
 8004d96:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 8004d9a:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8004d9e:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8004da2:	0e09      	lsrs	r1, r1, #24
 8004da4:	4426      	add	r6, r4
 8004da6:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8004daa:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 8004dae:	b2d0      	uxtb	r0, r2
 8004db0:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 8004db4:	eb04 2b95 	add.w	fp, r4, r5, lsr #10
 8004db8:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8004dbc:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8004dc0:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 8004dc4:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 8004dc8:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8004dcc:	0e12      	lsrs	r2, r2, #24
 8004dce:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8004dd2:	9701      	str	r7, [sp, #4]
 8004dd4:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 8004dd8:	4627      	mov	r7, r4
 8004dda:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 8004dde:	9702      	str	r7, [sp, #8]
 8004de0:	b2da      	uxtb	r2, r3
 8004de2:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8004de6:	eb00 2c91 	add.w	ip, r0, r1, lsr #10
 8004dea:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 8004dee:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8004df2:	eb00 2e94 	add.w	lr, r0, r4, lsr #10
 8004df6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004dfa:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8004dfe:	0e1b      	lsrs	r3, r3, #24
 8004e00:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 8004e04:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8004e08:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 8004e0c:	fa5f f38a 	uxtb.w	r3, sl
 8004e10:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8004e14:	960a      	str	r6, [sp, #40]	; 0x28
 8004e16:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 8004e1a:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 8004e1e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004e22:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8004e26:	950b      	str	r5, [sp, #44]	; 0x2c
 8004e28:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8004e2c:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8004e30:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8004e34:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8004e38:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 8004e3c:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8004e40:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8004e44:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8004e48:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 8004e4c:	9308      	str	r3, [sp, #32]
 8004e4e:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8004e52:	9b01      	ldr	r3, [sp, #4]
 8004e54:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8004e58:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8004e5c:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8004e60:	9b02      	ldr	r3, [sp, #8]
 8004e62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e66:	9302      	str	r3, [sp, #8]
 8004e68:	9b08      	ldr	r3, [sp, #32]
 8004e6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e6e:	9308      	str	r3, [sp, #32]
 8004e70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e72:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004e76:	950c      	str	r5, [sp, #48]	; 0x30
 8004e78:	461d      	mov	r5, r3
 8004e7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e7c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8004e80:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004e84:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8004e88:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8004e8c:	9301      	str	r3, [sp, #4]
 8004e8e:	9b02      	ldr	r3, [sp, #8]
 8004e90:	9202      	str	r2, [sp, #8]
 8004e92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e94:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e96:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8004e9a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8004e9e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8004ea2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004ea6:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8004eaa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8004eae:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 8004eb2:	9b08      	ldr	r3, [sp, #32]
 8004eb4:	9f01      	ldr	r7, [sp, #4]
 8004eb6:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8004eba:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8004ebe:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8004ec2:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8004eca:	46be      	mov	lr, r7
 8004ecc:	0a96      	lsrs	r6, r2, #10
 8004ece:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 8004ed2:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 8004ed6:	4f49      	ldr	r7, [pc, #292]	; (8004ffc <D128_1CH_HTONS_VOL_HP+0x2c8>)
 8004ed8:	9a04      	ldr	r2, [sp, #16]
 8004eda:	fb2e 2e07 	smlad	lr, lr, r7, r2
 8004ede:	4a48      	ldr	r2, [pc, #288]	; (8005000 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 8004ee0:	fb2a ee02 	smlad	lr, sl, r2, lr
 8004ee4:	4a47      	ldr	r2, [pc, #284]	; (8005004 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 8004ee6:	fb21 ee02 	smlad	lr, r1, r2, lr
 8004eea:	4a47      	ldr	r2, [pc, #284]	; (8005008 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 8004eec:	fb24 ee02 	smlad	lr, r4, r2, lr
 8004ef0:	4a46      	ldr	r2, [pc, #280]	; (800500c <D128_1CH_HTONS_VOL_HP+0x2d8>)
 8004ef2:	9f02      	ldr	r7, [sp, #8]
 8004ef4:	fb27 ee02 	smlad	lr, r7, r2, lr
 8004ef8:	4a45      	ldr	r2, [pc, #276]	; (8005010 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 8004efa:	fb20 ee02 	smlad	lr, r0, r2, lr
 8004efe:	4a45      	ldr	r2, [pc, #276]	; (8005014 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 8004f00:	fb23 e702 	smlad	r7, r3, r2, lr
 8004f04:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 8004f08:	fb25 7e0e 	smlad	lr, r5, lr, r7
 8004f0c:	9f01      	ldr	r7, [sp, #4]
 8004f0e:	4a42      	ldr	r2, [pc, #264]	; (8005018 <D128_1CH_HTONS_VOL_HP+0x2e4>)
 8004f10:	46bc      	mov	ip, r7
 8004f12:	9f05      	ldr	r7, [sp, #20]
 8004f14:	fb2c 7c02 	smlad	ip, ip, r2, r7
 8004f18:	4a40      	ldr	r2, [pc, #256]	; (800501c <D128_1CH_HTONS_VOL_HP+0x2e8>)
 8004f1a:	fb2a cc02 	smlad	ip, sl, r2, ip
 8004f1e:	4f40      	ldr	r7, [pc, #256]	; (8005020 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 8004f20:	fb21 cc07 	smlad	ip, r1, r7, ip
 8004f24:	4f3f      	ldr	r7, [pc, #252]	; (8005024 <D128_1CH_HTONS_VOL_HP+0x2f0>)
 8004f26:	fb24 cc07 	smlad	ip, r4, r7, ip
 8004f2a:	4f3f      	ldr	r7, [pc, #252]	; (8005028 <D128_1CH_HTONS_VOL_HP+0x2f4>)
 8004f2c:	9a02      	ldr	r2, [sp, #8]
 8004f2e:	fb22 cc07 	smlad	ip, r2, r7, ip
 8004f32:	4f3e      	ldr	r7, [pc, #248]	; (800502c <D128_1CH_HTONS_VOL_HP+0x2f8>)
 8004f34:	fb20 cc07 	smlad	ip, r0, r7, ip
 8004f38:	4f3d      	ldr	r7, [pc, #244]	; (8005030 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 8004f3a:	fb23 c707 	smlad	r7, r3, r7, ip
 8004f3e:	f8df c114 	ldr.w	ip, [pc, #276]	; 8005054 <D128_1CH_HTONS_VOL_HP+0x320>
 8004f42:	fb25 720c 	smlad	r2, r5, ip, r7
 8004f46:	f04f 0b01 	mov.w	fp, #1
 8004f4a:	9204      	str	r2, [sp, #16]
 8004f4c:	9f01      	ldr	r7, [sp, #4]
 8004f4e:	fb27 fb0b 	smuad	fp, r7, fp
 8004f52:	4f38      	ldr	r7, [pc, #224]	; (8005034 <D128_1CH_HTONS_VOL_HP+0x300>)
 8004f54:	fb2a ba07 	smlad	sl, sl, r7, fp
 8004f58:	4f37      	ldr	r7, [pc, #220]	; (8005038 <D128_1CH_HTONS_VOL_HP+0x304>)
 8004f5a:	fb21 aa07 	smlad	sl, r1, r7, sl
 8004f5e:	4f37      	ldr	r7, [pc, #220]	; (800503c <D128_1CH_HTONS_VOL_HP+0x308>)
 8004f60:	fb24 aa07 	smlad	sl, r4, r7, sl
 8004f64:	4f36      	ldr	r7, [pc, #216]	; (8005040 <D128_1CH_HTONS_VOL_HP+0x30c>)
 8004f66:	9a02      	ldr	r2, [sp, #8]
 8004f68:	fb22 a707 	smlad	r7, r2, r7, sl
 8004f6c:	4a35      	ldr	r2, [pc, #212]	; (8005044 <D128_1CH_HTONS_VOL_HP+0x310>)
 8004f6e:	fb20 7702 	smlad	r7, r0, r2, r7
 8004f72:	4a35      	ldr	r2, [pc, #212]	; (8005048 <D128_1CH_HTONS_VOL_HP+0x314>)
 8004f74:	fb23 7702 	smlad	r7, r3, r2, r7
 8004f78:	4b34      	ldr	r3, [pc, #208]	; (800504c <D128_1CH_HTONS_VOL_HP+0x318>)
 8004f7a:	fb25 7303 	smlad	r3, r5, r3, r7
 8004f7e:	9305      	str	r3, [sp, #20]
 8004f80:	9b03      	ldr	r3, [sp, #12]
 8004f82:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8004f84:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 8004f88:	4473      	add	r3, lr
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	9b06      	ldr	r3, [sp, #24]
 8004f8e:	f8cd e018 	str.w	lr, [sp, #24]
 8004f92:	1ad2      	subs	r2, r2, r3
 8004f94:	17d1      	asrs	r1, r2, #31
 8004f96:	fba2 2304 	umull	r2, r3, r2, r4
 8004f9a:	fb04 3301 	mla	r3, r4, r1, r3
 8004f9e:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8004fa2:	f143 0300 	adc.w	r3, r3, #0
 8004fa6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8004fa8:	021a      	lsls	r2, r3, #8
 8004faa:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004fae:	2100      	movs	r1, #0
 8004fb0:	fbc4 0102 	smlal	r0, r1, r4, r2
 8004fb4:	108a      	asrs	r2, r1, #2
 8004fb6:	9907      	ldr	r1, [sp, #28]
 8004fb8:	f302 020f 	ssat	r2, #16, r2
 8004fbc:	005b      	lsls	r3, r3, #1
 8004fbe:	f821 2b02 	strh.w	r2, [r1], #2
 8004fc2:	9303      	str	r3, [sp, #12]
 8004fc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004fc6:	9107      	str	r1, [sp, #28]
 8004fc8:	4299      	cmp	r1, r3
 8004fca:	f109 0910 	add.w	r9, r9, #16
 8004fce:	f47f aed5 	bne.w	8004d7c <D128_1CH_HTONS_VOL_HP+0x48>
 8004fd2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004fd4:	9905      	ldr	r1, [sp, #20]
 8004fd6:	6091      	str	r1, [r2, #8]
 8004fd8:	9904      	ldr	r1, [sp, #16]
 8004fda:	60d1      	str	r1, [r2, #12]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	61d6      	str	r6, [r2, #28]
 8004fe0:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004fe2:	9a03      	ldr	r2, [sp, #12]
 8004fe4:	611a      	str	r2, [r3, #16]
 8004fe6:	2000      	movs	r0, #0
 8004fe8:	f8c3 e014 	str.w	lr, [r3, #20]
 8004fec:	6199      	str	r1, [r3, #24]
 8004fee:	b013      	add	sp, #76	; 0x4c
 8004ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ff4:	f8dd e018 	ldr.w	lr, [sp, #24]
 8004ff8:	e7eb      	b.n	8004fd2 <D128_1CH_HTONS_VOL_HP+0x29e>
 8004ffa:	bf00      	nop
 8004ffc:	00780069 	.word	0x00780069
 8005000:	005b004e 	.word	0x005b004e
 8005004:	00420037 	.word	0x00420037
 8005008:	002d0024 	.word	0x002d0024
 800500c:	001c0015 	.word	0x001c0015
 8005010:	000f000a 	.word	0x000f000a
 8005014:	00060003 	.word	0x00060003
 8005018:	00880096 	.word	0x00880096
 800501c:	00a200ac 	.word	0x00a200ac
 8005020:	00b400ba 	.word	0x00b400ba
 8005024:	00be00c0 	.word	0x00be00c0
 8005028:	00c000be 	.word	0x00c000be
 800502c:	00ba00b4 	.word	0x00ba00b4
 8005030:	00ac00a2 	.word	0x00ac00a2
 8005034:	00030006 	.word	0x00030006
 8005038:	000a000f 	.word	0x000a000f
 800503c:	0015001c 	.word	0x0015001c
 8005040:	0024002d 	.word	0x0024002d
 8005044:	00370042 	.word	0x00370042
 8005048:	004e005b 	.word	0x004e005b
 800504c:	00690078 	.word	0x00690078
 8005050:	20000000 	.word	0x20000000
 8005054:	00960088 	.word	0x00960088

08005058 <PDM_Filter_Init>:
 8005058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800505a:	2240      	movs	r2, #64	; 0x40
 800505c:	4604      	mov	r4, r0
 800505e:	2100      	movs	r1, #0
 8005060:	300c      	adds	r0, #12
 8005062:	f000 f9f9 	bl	8005458 <memset>
 8005066:	493b      	ldr	r1, [pc, #236]	; (8005154 <PDM_Filter_Init+0xfc>)
 8005068:	483b      	ldr	r0, [pc, #236]	; (8005158 <PDM_Filter_Init+0x100>)
 800506a:	f000 f98d 	bl	8005388 <CRC_Lock>
 800506e:	8822      	ldrh	r2, [r4, #0]
 8005070:	8963      	ldrh	r3, [r4, #10]
 8005072:	4938      	ldr	r1, [pc, #224]	; (8005154 <PDM_Filter_Init+0xfc>)
 8005074:	8925      	ldrh	r5, [r4, #8]
 8005076:	86a3      	strh	r3, [r4, #52]	; 0x34
 8005078:	2801      	cmp	r0, #1
 800507a:	f04f 0300 	mov.w	r3, #0
 800507e:	bf18      	it	ne
 8005080:	2100      	movne	r1, #0
 8005082:	2a01      	cmp	r2, #1
 8005084:	6461      	str	r1, [r4, #68]	; 0x44
 8005086:	86e5      	strh	r5, [r4, #54]	; 0x36
 8005088:	61a3      	str	r3, [r4, #24]
 800508a:	6123      	str	r3, [r4, #16]
 800508c:	6163      	str	r3, [r4, #20]
 800508e:	60e3      	str	r3, [r4, #12]
 8005090:	6263      	str	r3, [r4, #36]	; 0x24
 8005092:	61e3      	str	r3, [r4, #28]
 8005094:	6223      	str	r3, [r4, #32]
 8005096:	6423      	str	r3, [r4, #64]	; 0x40
 8005098:	d918      	bls.n	80050cc <PDM_Filter_Init+0x74>
 800509a:	2003      	movs	r0, #3
 800509c:	2302      	movs	r3, #2
 800509e:	8862      	ldrh	r2, [r4, #2]
 80050a0:	2a01      	cmp	r2, #1
 80050a2:	d91d      	bls.n	80050e0 <PDM_Filter_Init+0x88>
 80050a4:	2140      	movs	r1, #64	; 0x40
 80050a6:	2300      	movs	r3, #0
 80050a8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80050aa:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 80050ae:	6862      	ldr	r2, [r4, #4]
 80050b0:	bf04      	itt	eq
 80050b2:	6421      	streq	r1, [r4, #64]	; 0x40
 80050b4:	460b      	moveq	r3, r1
 80050b6:	b11a      	cbz	r2, 80050c0 <PDM_Filter_Init+0x68>
 80050b8:	f043 0310 	orr.w	r3, r3, #16
 80050bc:	6423      	str	r3, [r4, #64]	; 0x40
 80050be:	62e2      	str	r2, [r4, #44]	; 0x2c
 80050c0:	2200      	movs	r2, #0
 80050c2:	8722      	strh	r2, [r4, #56]	; 0x38
 80050c4:	b908      	cbnz	r0, 80050ca <PDM_Filter_Init+0x72>
 80050c6:	3380      	adds	r3, #128	; 0x80
 80050c8:	6423      	str	r3, [r4, #64]	; 0x40
 80050ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050cc:	4d23      	ldr	r5, [pc, #140]	; (800515c <PDM_Filter_Init+0x104>)
 80050ce:	d010      	beq.n	80050f2 <PDM_Filter_Init+0x9a>
 80050d0:	782a      	ldrb	r2, [r5, #0]
 80050d2:	2a01      	cmp	r2, #1
 80050d4:	d027      	beq.n	8005126 <PDM_Filter_Init+0xce>
 80050d6:	8862      	ldrh	r2, [r4, #2]
 80050d8:	2a01      	cmp	r2, #1
 80050da:	f04f 0001 	mov.w	r0, #1
 80050de:	d8e1      	bhi.n	80050a4 <PDM_Filter_Init+0x4c>
 80050e0:	d001      	beq.n	80050e6 <PDM_Filter_Init+0x8e>
 80050e2:	4618      	mov	r0, r3
 80050e4:	e7de      	b.n	80050a4 <PDM_Filter_Init+0x4c>
 80050e6:	2220      	movs	r2, #32
 80050e8:	4618      	mov	r0, r3
 80050ea:	6422      	str	r2, [r4, #64]	; 0x40
 80050ec:	4613      	mov	r3, r2
 80050ee:	2160      	movs	r1, #96	; 0x60
 80050f0:	e7da      	b.n	80050a8 <PDM_Filter_Init+0x50>
 80050f2:	7829      	ldrb	r1, [r5, #0]
 80050f4:	2900      	cmp	r1, #0
 80050f6:	d1ee      	bne.n	80050d6 <PDM_Filter_Init+0x7e>
 80050f8:	4919      	ldr	r1, [pc, #100]	; (8005160 <PDM_Filter_Init+0x108>)
 80050fa:	f8df e06c 	ldr.w	lr, [pc, #108]	; 8005168 <PDM_Filter_Init+0x110>
 80050fe:	4f19      	ldr	r7, [pc, #100]	; (8005164 <PDM_Filter_Init+0x10c>)
 8005100:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 8005104:	684a      	ldr	r2, [r1, #4]
 8005106:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800510a:	ea02 0007 	and.w	r0, r2, r7
 800510e:	4303      	orrs	r3, r0
 8005110:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8005114:	4413      	add	r3, r2
 8005116:	f841 3f04 	str.w	r3, [r1, #4]!
 800511a:	428e      	cmp	r6, r1
 800511c:	d1f2      	bne.n	8005104 <PDM_Filter_Init+0xac>
 800511e:	2001      	movs	r0, #1
 8005120:	7028      	strb	r0, [r5, #0]
 8005122:	2300      	movs	r3, #0
 8005124:	e7bb      	b.n	800509e <PDM_Filter_Init+0x46>
 8005126:	490e      	ldr	r1, [pc, #56]	; (8005160 <PDM_Filter_Init+0x108>)
 8005128:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8005168 <PDM_Filter_Init+0x110>
 800512c:	4f0d      	ldr	r7, [pc, #52]	; (8005164 <PDM_Filter_Init+0x10c>)
 800512e:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 8005132:	684a      	ldr	r2, [r1, #4]
 8005134:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 8005138:	ea02 0007 	and.w	r0, r2, r7
 800513c:	4303      	orrs	r3, r0
 800513e:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8005142:	4413      	add	r3, r2
 8005144:	f841 3f04 	str.w	r3, [r1, #4]!
 8005148:	428e      	cmp	r6, r1
 800514a:	d1f2      	bne.n	8005132 <PDM_Filter_Init+0xda>
 800514c:	2300      	movs	r3, #0
 800514e:	702b      	strb	r3, [r5, #0]
 8005150:	e7c1      	b.n	80050d6 <PDM_Filter_Init+0x7e>
 8005152:	bf00      	nop
 8005154:	b5e8b5cd 	.word	0xb5e8b5cd
 8005158:	f407a5c2 	.word	0xf407a5c2
 800515c:	2000048c 	.word	0x2000048c
 8005160:	1ffffffc 	.word	0x1ffffffc
 8005164:	000ffc00 	.word	0x000ffc00
 8005168:	3ff00000 	.word	0x3ff00000

0800516c <PDM_Filter_setConfig>:
 800516c:	4b66      	ldr	r3, [pc, #408]	; (8005308 <PDM_Filter_setConfig+0x19c>)
 800516e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005170:	429a      	cmp	r2, r3
 8005172:	d001      	beq.n	8005178 <PDM_Filter_setConfig+0xc>
 8005174:	2004      	movs	r0, #4
 8005176:	4770      	bx	lr
 8005178:	b530      	push	{r4, r5, lr}
 800517a:	880a      	ldrh	r2, [r1, #0]
 800517c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800517e:	ed2d 8b04 	vpush	{d8-d9}
 8005182:	4604      	mov	r4, r0
 8005184:	460d      	mov	r5, r1
 8005186:	1e51      	subs	r1, r2, #1
 8005188:	f423 7080 	bic.w	r0, r3, #256	; 0x100
 800518c:	2906      	cmp	r1, #6
 800518e:	b083      	sub	sp, #12
 8005190:	6420      	str	r0, [r4, #64]	; 0x40
 8005192:	d91a      	bls.n	80051ca <PDM_Filter_setConfig+0x5e>
 8005194:	2008      	movs	r0, #8
 8005196:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800519a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800519e:	4299      	cmp	r1, r3
 80051a0:	d07e      	beq.n	80052a0 <PDM_Filter_setConfig+0x134>
 80051a2:	f113 0f0c 	cmn.w	r3, #12
 80051a6:	da2a      	bge.n	80051fe <PDM_Filter_setConfig+0x92>
 80051a8:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 80051ac:	3040      	adds	r0, #64	; 0x40
 80051ae:	80ab      	strh	r3, [r5, #4]
 80051b0:	8622      	strh	r2, [r4, #48]	; 0x30
 80051b2:	886b      	ldrh	r3, [r5, #2]
 80051b4:	8663      	strh	r3, [r4, #50]	; 0x32
 80051b6:	b920      	cbnz	r0, 80051c2 <PDM_Filter_setConfig+0x56>
 80051b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80051ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051be:	6423      	str	r3, [r4, #64]	; 0x40
 80051c0:	2000      	movs	r0, #0
 80051c2:	b003      	add	sp, #12
 80051c4:	ecbd 8b04 	vpop	{d8-d9}
 80051c8:	bd30      	pop	{r4, r5, pc}
 80051ca:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 80051cc:	4291      	cmp	r1, r2
 80051ce:	d06c      	beq.n	80052aa <PDM_Filter_setConfig+0x13e>
 80051d0:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 80051d4:	f023 0301 	bic.w	r3, r3, #1
 80051d8:	4313      	orrs	r3, r2
 80051da:	f003 0170 	and.w	r1, r3, #112	; 0x70
 80051de:	6423      	str	r3, [r4, #64]	; 0x40
 80051e0:	2970      	cmp	r1, #112	; 0x70
 80051e2:	f003 030f 	and.w	r3, r3, #15
 80051e6:	f103 33ff 	add.w	r3, r3, #4294967295
 80051ea:	d066      	beq.n	80052ba <PDM_Filter_setConfig+0x14e>
 80051ec:	2b06      	cmp	r3, #6
 80051ee:	f200 8089 	bhi.w	8005304 <PDM_Filter_setConfig+0x198>
 80051f2:	e8df f003 	tbb	[pc, r3]
 80051f6:	4f52      	.short	0x4f52
 80051f8:	3d43494c 	.word	0x3d43494c
 80051fc:	46          	.byte	0x46
 80051fd:	00          	.byte	0x00
 80051fe:	2b33      	cmp	r3, #51	; 0x33
 8005200:	dc32      	bgt.n	8005268 <PDM_Filter_setConfig+0xfc>
 8005202:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005204:	f002 020f 	and.w	r2, r2, #15
 8005208:	3a01      	subs	r2, #1
 800520a:	2a06      	cmp	r2, #6
 800520c:	d872      	bhi.n	80052f4 <PDM_Filter_setConfig+0x188>
 800520e:	493f      	ldr	r1, [pc, #252]	; (800530c <PDM_Filter_setConfig+0x1a0>)
 8005210:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8005214:	ed92 9a00 	vldr	s18, [r2]
 8005218:	ed92 8a07 	vldr	s16, [r2, #28]
 800521c:	9001      	str	r0, [sp, #4]
 800521e:	ee07 3a90 	vmov	s15, r3
 8005222:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005226:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 800522a:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 800522e:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8005232:	f000 f93d 	bl	80054b0 <powf>
 8005236:	eddf 0a36 	vldr	s1, [pc, #216]	; 8005310 <PDM_Filter_setConfig+0x1a4>
 800523a:	eef0 8a40 	vmov.f32	s17, s0
 800523e:	ee70 0ac9 	vsub.f32	s1, s1, s18
 8005242:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8005246:	f000 f933 	bl	80054b0 <powf>
 800524a:	ee28 8a28 	vmul.f32	s16, s16, s17
 800524e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8005252:	f000 f909 	bl	8005468 <roundf>
 8005256:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800525a:	88ab      	ldrh	r3, [r5, #4]
 800525c:	882a      	ldrh	r2, [r5, #0]
 800525e:	9801      	ldr	r0, [sp, #4]
 8005260:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 8005264:	8723      	strh	r3, [r4, #56]	; 0x38
 8005266:	e7a3      	b.n	80051b0 <PDM_Filter_setConfig+0x44>
 8005268:	2333      	movs	r3, #51	; 0x33
 800526a:	3040      	adds	r0, #64	; 0x40
 800526c:	80ab      	strh	r3, [r5, #4]
 800526e:	e79f      	b.n	80051b0 <PDM_Filter_setConfig+0x44>
 8005270:	4b28      	ldr	r3, [pc, #160]	; (8005314 <PDM_Filter_setConfig+0x1a8>)
 8005272:	64a3      	str	r3, [r4, #72]	; 0x48
 8005274:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8005278:	2000      	movs	r0, #0
 800527a:	e792      	b.n	80051a2 <PDM_Filter_setConfig+0x36>
 800527c:	4b26      	ldr	r3, [pc, #152]	; (8005318 <PDM_Filter_setConfig+0x1ac>)
 800527e:	64a3      	str	r3, [r4, #72]	; 0x48
 8005280:	e7f8      	b.n	8005274 <PDM_Filter_setConfig+0x108>
 8005282:	4b26      	ldr	r3, [pc, #152]	; (800531c <PDM_Filter_setConfig+0x1b0>)
 8005284:	64a3      	str	r3, [r4, #72]	; 0x48
 8005286:	e7f5      	b.n	8005274 <PDM_Filter_setConfig+0x108>
 8005288:	4b25      	ldr	r3, [pc, #148]	; (8005320 <PDM_Filter_setConfig+0x1b4>)
 800528a:	64a3      	str	r3, [r4, #72]	; 0x48
 800528c:	e7f2      	b.n	8005274 <PDM_Filter_setConfig+0x108>
 800528e:	4b25      	ldr	r3, [pc, #148]	; (8005324 <PDM_Filter_setConfig+0x1b8>)
 8005290:	64a3      	str	r3, [r4, #72]	; 0x48
 8005292:	e7ef      	b.n	8005274 <PDM_Filter_setConfig+0x108>
 8005294:	4b24      	ldr	r3, [pc, #144]	; (8005328 <PDM_Filter_setConfig+0x1bc>)
 8005296:	64a3      	str	r3, [r4, #72]	; 0x48
 8005298:	e7ec      	b.n	8005274 <PDM_Filter_setConfig+0x108>
 800529a:	4b24      	ldr	r3, [pc, #144]	; (800532c <PDM_Filter_setConfig+0x1c0>)
 800529c:	64a3      	str	r3, [r4, #72]	; 0x48
 800529e:	e7e9      	b.n	8005274 <PDM_Filter_setConfig+0x108>
 80052a0:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 80052a2:	4291      	cmp	r1, r2
 80052a4:	f47f af7d 	bne.w	80051a2 <PDM_Filter_setConfig+0x36>
 80052a8:	e783      	b.n	80051b2 <PDM_Filter_setConfig+0x46>
 80052aa:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80052ae:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 80052b2:	4299      	cmp	r1, r3
 80052b4:	d023      	beq.n	80052fe <PDM_Filter_setConfig+0x192>
 80052b6:	2000      	movs	r0, #0
 80052b8:	e773      	b.n	80051a2 <PDM_Filter_setConfig+0x36>
 80052ba:	2b06      	cmp	r3, #6
 80052bc:	d822      	bhi.n	8005304 <PDM_Filter_setConfig+0x198>
 80052be:	e8df f003 	tbb	[pc, r3]
 80052c2:	1316      	.short	0x1316
 80052c4:	070a0d10 	.word	0x070a0d10
 80052c8:	04          	.byte	0x04
 80052c9:	00          	.byte	0x00
 80052ca:	4b19      	ldr	r3, [pc, #100]	; (8005330 <PDM_Filter_setConfig+0x1c4>)
 80052cc:	64a3      	str	r3, [r4, #72]	; 0x48
 80052ce:	e7d1      	b.n	8005274 <PDM_Filter_setConfig+0x108>
 80052d0:	4b18      	ldr	r3, [pc, #96]	; (8005334 <PDM_Filter_setConfig+0x1c8>)
 80052d2:	64a3      	str	r3, [r4, #72]	; 0x48
 80052d4:	e7ce      	b.n	8005274 <PDM_Filter_setConfig+0x108>
 80052d6:	4b18      	ldr	r3, [pc, #96]	; (8005338 <PDM_Filter_setConfig+0x1cc>)
 80052d8:	64a3      	str	r3, [r4, #72]	; 0x48
 80052da:	e7cb      	b.n	8005274 <PDM_Filter_setConfig+0x108>
 80052dc:	4b17      	ldr	r3, [pc, #92]	; (800533c <PDM_Filter_setConfig+0x1d0>)
 80052de:	64a3      	str	r3, [r4, #72]	; 0x48
 80052e0:	e7c8      	b.n	8005274 <PDM_Filter_setConfig+0x108>
 80052e2:	4b17      	ldr	r3, [pc, #92]	; (8005340 <PDM_Filter_setConfig+0x1d4>)
 80052e4:	64a3      	str	r3, [r4, #72]	; 0x48
 80052e6:	e7c5      	b.n	8005274 <PDM_Filter_setConfig+0x108>
 80052e8:	4b16      	ldr	r3, [pc, #88]	; (8005344 <PDM_Filter_setConfig+0x1d8>)
 80052ea:	64a3      	str	r3, [r4, #72]	; 0x48
 80052ec:	e7c2      	b.n	8005274 <PDM_Filter_setConfig+0x108>
 80052ee:	4b16      	ldr	r3, [pc, #88]	; (8005348 <PDM_Filter_setConfig+0x1dc>)
 80052f0:	64a3      	str	r3, [r4, #72]	; 0x48
 80052f2:	e7bf      	b.n	8005274 <PDM_Filter_setConfig+0x108>
 80052f4:	ed9f 8a15 	vldr	s16, [pc, #84]	; 800534c <PDM_Filter_setConfig+0x1e0>
 80052f8:	eeb0 9a48 	vmov.f32	s18, s16
 80052fc:	e78e      	b.n	800521c <PDM_Filter_setConfig+0xb0>
 80052fe:	886b      	ldrh	r3, [r5, #2]
 8005300:	8663      	strh	r3, [r4, #50]	; 0x32
 8005302:	e759      	b.n	80051b8 <PDM_Filter_setConfig+0x4c>
 8005304:	2000      	movs	r0, #0
 8005306:	e746      	b.n	8005196 <PDM_Filter_setConfig+0x2a>
 8005308:	b5e8b5cd 	.word	0xb5e8b5cd
 800530c:	08005c6c 	.word	0x08005c6c
 8005310:	42000000 	.word	0x42000000
 8005314:	080036d9 	.word	0x080036d9
 8005318:	080035b9 	.word	0x080035b9
 800531c:	08003869 	.word	0x08003869
 8005320:	080040ad 	.word	0x080040ad
 8005324:	08003e0d 	.word	0x08003e0d
 8005328:	08003bed 	.word	0x08003bed
 800532c:	08003a01 	.word	0x08003a01
 8005330:	080046b9 	.word	0x080046b9
 8005334:	08004581 	.word	0x08004581
 8005338:	0800449d 	.word	0x0800449d
 800533c:	08004d35 	.word	0x08004d35
 8005340:	08004b21 	.word	0x08004b21
 8005344:	08004969 	.word	0x08004969
 8005348:	080047fd 	.word	0x080047fd
 800534c:	00000000 	.word	0x00000000

08005350 <PDM_Filter>:
 8005350:	b410      	push	{r4}
 8005352:	4b0c      	ldr	r3, [pc, #48]	; (8005384 <PDM_Filter+0x34>)
 8005354:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8005356:	429c      	cmp	r4, r3
 8005358:	d003      	beq.n	8005362 <PDM_Filter+0x12>
 800535a:	2004      	movs	r0, #4
 800535c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005364:	05dc      	lsls	r4, r3, #23
 8005366:	d407      	bmi.n	8005378 <PDM_Filter+0x28>
 8005368:	f013 0f80 	tst.w	r3, #128	; 0x80
 800536c:	bf14      	ite	ne
 800536e:	2020      	movne	r0, #32
 8005370:	2030      	moveq	r0, #48	; 0x30
 8005372:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005376:	4770      	bx	lr
 8005378:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800537a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800537e:	320c      	adds	r2, #12
 8005380:	4718      	bx	r3
 8005382:	bf00      	nop
 8005384:	b5e8b5cd 	.word	0xb5e8b5cd

08005388 <CRC_Lock>:
 8005388:	4a17      	ldr	r2, [pc, #92]	; (80053e8 <CRC_Lock+0x60>)
 800538a:	6813      	ldr	r3, [r2, #0]
 800538c:	b410      	push	{r4}
 800538e:	f023 0301 	bic.w	r3, r3, #1
 8005392:	4c16      	ldr	r4, [pc, #88]	; (80053ec <CRC_Lock+0x64>)
 8005394:	6013      	str	r3, [r2, #0]
 8005396:	6823      	ldr	r3, [r4, #0]
 8005398:	b933      	cbnz	r3, 80053a8 <CRC_Lock+0x20>
 800539a:	4b15      	ldr	r3, [pc, #84]	; (80053f0 <CRC_Lock+0x68>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053a2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80053a6:	d00f      	beq.n	80053c8 <CRC_Lock+0x40>
 80053a8:	4a12      	ldr	r2, [pc, #72]	; (80053f4 <CRC_Lock+0x6c>)
 80053aa:	2301      	movs	r3, #1
 80053ac:	6013      	str	r3, [r2, #0]
 80053ae:	6813      	ldr	r3, [r2, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1fc      	bne.n	80053ae <CRC_Lock+0x26>
 80053b4:	4b10      	ldr	r3, [pc, #64]	; (80053f8 <CRC_Lock+0x70>)
 80053b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053ba:	6018      	str	r0, [r3, #0]
 80053bc:	6818      	ldr	r0, [r3, #0]
 80053be:	1a08      	subs	r0, r1, r0
 80053c0:	fab0 f080 	clz	r0, r0
 80053c4:	0940      	lsrs	r0, r0, #5
 80053c6:	4770      	bx	lr
 80053c8:	4a0c      	ldr	r2, [pc, #48]	; (80053fc <CRC_Lock+0x74>)
 80053ca:	2301      	movs	r3, #1
 80053cc:	6013      	str	r3, [r2, #0]
 80053ce:	6813      	ldr	r3, [r2, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1fc      	bne.n	80053ce <CRC_Lock+0x46>
 80053d4:	4b0a      	ldr	r3, [pc, #40]	; (8005400 <CRC_Lock+0x78>)
 80053d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053da:	6018      	str	r0, [r3, #0]
 80053dc:	6818      	ldr	r0, [r3, #0]
 80053de:	1a40      	subs	r0, r0, r1
 80053e0:	fab0 f080 	clz	r0, r0
 80053e4:	0940      	lsrs	r0, r0, #5
 80053e6:	4770      	bx	lr
 80053e8:	e0002000 	.word	0xe0002000
 80053ec:	e0042000 	.word	0xe0042000
 80053f0:	5c001000 	.word	0x5c001000
 80053f4:	40023008 	.word	0x40023008
 80053f8:	40023000 	.word	0x40023000
 80053fc:	58024c08 	.word	0x58024c08
 8005400:	58024c00 	.word	0x58024c00

08005404 <__errno>:
 8005404:	4b01      	ldr	r3, [pc, #4]	; (800540c <__errno+0x8>)
 8005406:	6818      	ldr	r0, [r3, #0]
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	2000040c 	.word	0x2000040c

08005410 <__libc_init_array>:
 8005410:	b570      	push	{r4, r5, r6, lr}
 8005412:	4d0d      	ldr	r5, [pc, #52]	; (8005448 <__libc_init_array+0x38>)
 8005414:	4c0d      	ldr	r4, [pc, #52]	; (800544c <__libc_init_array+0x3c>)
 8005416:	1b64      	subs	r4, r4, r5
 8005418:	10a4      	asrs	r4, r4, #2
 800541a:	2600      	movs	r6, #0
 800541c:	42a6      	cmp	r6, r4
 800541e:	d109      	bne.n	8005434 <__libc_init_array+0x24>
 8005420:	4d0b      	ldr	r5, [pc, #44]	; (8005450 <__libc_init_array+0x40>)
 8005422:	4c0c      	ldr	r4, [pc, #48]	; (8005454 <__libc_init_array+0x44>)
 8005424:	f000 fc16 	bl	8005c54 <_init>
 8005428:	1b64      	subs	r4, r4, r5
 800542a:	10a4      	asrs	r4, r4, #2
 800542c:	2600      	movs	r6, #0
 800542e:	42a6      	cmp	r6, r4
 8005430:	d105      	bne.n	800543e <__libc_init_array+0x2e>
 8005432:	bd70      	pop	{r4, r5, r6, pc}
 8005434:	f855 3b04 	ldr.w	r3, [r5], #4
 8005438:	4798      	blx	r3
 800543a:	3601      	adds	r6, #1
 800543c:	e7ee      	b.n	800541c <__libc_init_array+0xc>
 800543e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005442:	4798      	blx	r3
 8005444:	3601      	adds	r6, #1
 8005446:	e7f2      	b.n	800542e <__libc_init_array+0x1e>
 8005448:	08005cdc 	.word	0x08005cdc
 800544c:	08005cdc 	.word	0x08005cdc
 8005450:	08005cdc 	.word	0x08005cdc
 8005454:	08005ce0 	.word	0x08005ce0

08005458 <memset>:
 8005458:	4402      	add	r2, r0
 800545a:	4603      	mov	r3, r0
 800545c:	4293      	cmp	r3, r2
 800545e:	d100      	bne.n	8005462 <memset+0xa>
 8005460:	4770      	bx	lr
 8005462:	f803 1b01 	strb.w	r1, [r3], #1
 8005466:	e7f9      	b.n	800545c <memset+0x4>

08005468 <roundf>:
 8005468:	ee10 0a10 	vmov	r0, s0
 800546c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8005470:	3a7f      	subs	r2, #127	; 0x7f
 8005472:	2a16      	cmp	r2, #22
 8005474:	dc15      	bgt.n	80054a2 <roundf+0x3a>
 8005476:	2a00      	cmp	r2, #0
 8005478:	da08      	bge.n	800548c <roundf+0x24>
 800547a:	3201      	adds	r2, #1
 800547c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8005480:	d101      	bne.n	8005486 <roundf+0x1e>
 8005482:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8005486:	ee00 3a10 	vmov	s0, r3
 800548a:	4770      	bx	lr
 800548c:	4907      	ldr	r1, [pc, #28]	; (80054ac <roundf+0x44>)
 800548e:	4111      	asrs	r1, r2
 8005490:	4208      	tst	r0, r1
 8005492:	d0fa      	beq.n	800548a <roundf+0x22>
 8005494:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005498:	4113      	asrs	r3, r2
 800549a:	4403      	add	r3, r0
 800549c:	ea23 0301 	bic.w	r3, r3, r1
 80054a0:	e7f1      	b.n	8005486 <roundf+0x1e>
 80054a2:	2a80      	cmp	r2, #128	; 0x80
 80054a4:	d1f1      	bne.n	800548a <roundf+0x22>
 80054a6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80054aa:	4770      	bx	lr
 80054ac:	007fffff 	.word	0x007fffff

080054b0 <powf>:
 80054b0:	b508      	push	{r3, lr}
 80054b2:	ed2d 8b04 	vpush	{d8-d9}
 80054b6:	eeb0 8a60 	vmov.f32	s16, s1
 80054ba:	eeb0 9a40 	vmov.f32	s18, s0
 80054be:	f000 f84f 	bl	8005560 <__ieee754_powf>
 80054c2:	eeb4 8a48 	vcmp.f32	s16, s16
 80054c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054ca:	eef0 8a40 	vmov.f32	s17, s0
 80054ce:	d63e      	bvs.n	800554e <powf+0x9e>
 80054d0:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80054d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054d8:	d112      	bne.n	8005500 <powf+0x50>
 80054da:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80054de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054e2:	d039      	beq.n	8005558 <powf+0xa8>
 80054e4:	eeb0 0a48 	vmov.f32	s0, s16
 80054e8:	f000 fb35 	bl	8005b56 <finitef>
 80054ec:	b378      	cbz	r0, 800554e <powf+0x9e>
 80054ee:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80054f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054f6:	d52a      	bpl.n	800554e <powf+0x9e>
 80054f8:	f7ff ff84 	bl	8005404 <__errno>
 80054fc:	2322      	movs	r3, #34	; 0x22
 80054fe:	e014      	b.n	800552a <powf+0x7a>
 8005500:	f000 fb29 	bl	8005b56 <finitef>
 8005504:	b998      	cbnz	r0, 800552e <powf+0x7e>
 8005506:	eeb0 0a49 	vmov.f32	s0, s18
 800550a:	f000 fb24 	bl	8005b56 <finitef>
 800550e:	b170      	cbz	r0, 800552e <powf+0x7e>
 8005510:	eeb0 0a48 	vmov.f32	s0, s16
 8005514:	f000 fb1f 	bl	8005b56 <finitef>
 8005518:	b148      	cbz	r0, 800552e <powf+0x7e>
 800551a:	eef4 8a68 	vcmp.f32	s17, s17
 800551e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005522:	d7e9      	bvc.n	80054f8 <powf+0x48>
 8005524:	f7ff ff6e 	bl	8005404 <__errno>
 8005528:	2321      	movs	r3, #33	; 0x21
 800552a:	6003      	str	r3, [r0, #0]
 800552c:	e00f      	b.n	800554e <powf+0x9e>
 800552e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8005532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005536:	d10a      	bne.n	800554e <powf+0x9e>
 8005538:	eeb0 0a49 	vmov.f32	s0, s18
 800553c:	f000 fb0b 	bl	8005b56 <finitef>
 8005540:	b128      	cbz	r0, 800554e <powf+0x9e>
 8005542:	eeb0 0a48 	vmov.f32	s0, s16
 8005546:	f000 fb06 	bl	8005b56 <finitef>
 800554a:	2800      	cmp	r0, #0
 800554c:	d1d4      	bne.n	80054f8 <powf+0x48>
 800554e:	eeb0 0a68 	vmov.f32	s0, s17
 8005552:	ecbd 8b04 	vpop	{d8-d9}
 8005556:	bd08      	pop	{r3, pc}
 8005558:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800555c:	e7f7      	b.n	800554e <powf+0x9e>
	...

08005560 <__ieee754_powf>:
 8005560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005564:	ee10 4a90 	vmov	r4, s1
 8005568:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800556c:	ed2d 8b02 	vpush	{d8}
 8005570:	ee10 6a10 	vmov	r6, s0
 8005574:	eeb0 8a40 	vmov.f32	s16, s0
 8005578:	eef0 8a60 	vmov.f32	s17, s1
 800557c:	d10c      	bne.n	8005598 <__ieee754_powf+0x38>
 800557e:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8005582:	0076      	lsls	r6, r6, #1
 8005584:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8005588:	f240 8296 	bls.w	8005ab8 <__ieee754_powf+0x558>
 800558c:	ee38 0a28 	vadd.f32	s0, s16, s17
 8005590:	ecbd 8b02 	vpop	{d8}
 8005594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005598:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800559c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80055a0:	dcf4      	bgt.n	800558c <__ieee754_powf+0x2c>
 80055a2:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 80055a6:	dd08      	ble.n	80055ba <__ieee754_powf+0x5a>
 80055a8:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 80055ac:	d1ee      	bne.n	800558c <__ieee754_powf+0x2c>
 80055ae:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 80055b2:	0064      	lsls	r4, r4, #1
 80055b4:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 80055b8:	e7e6      	b.n	8005588 <__ieee754_powf+0x28>
 80055ba:	2e00      	cmp	r6, #0
 80055bc:	da20      	bge.n	8005600 <__ieee754_powf+0xa0>
 80055be:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 80055c2:	da2d      	bge.n	8005620 <__ieee754_powf+0xc0>
 80055c4:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 80055c8:	f2c0 827f 	blt.w	8005aca <__ieee754_powf+0x56a>
 80055cc:	ea4f 53e8 	mov.w	r3, r8, asr #23
 80055d0:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80055d4:	fa48 f703 	asr.w	r7, r8, r3
 80055d8:	fa07 f303 	lsl.w	r3, r7, r3
 80055dc:	4543      	cmp	r3, r8
 80055de:	f040 8274 	bne.w	8005aca <__ieee754_powf+0x56a>
 80055e2:	f007 0701 	and.w	r7, r7, #1
 80055e6:	f1c7 0702 	rsb	r7, r7, #2
 80055ea:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 80055ee:	d11f      	bne.n	8005630 <__ieee754_powf+0xd0>
 80055f0:	2c00      	cmp	r4, #0
 80055f2:	f280 8267 	bge.w	8005ac4 <__ieee754_powf+0x564>
 80055f6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80055fa:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80055fe:	e7c7      	b.n	8005590 <__ieee754_powf+0x30>
 8005600:	2700      	movs	r7, #0
 8005602:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8005606:	d1f0      	bne.n	80055ea <__ieee754_powf+0x8a>
 8005608:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800560c:	f000 8254 	beq.w	8005ab8 <__ieee754_powf+0x558>
 8005610:	dd08      	ble.n	8005624 <__ieee754_powf+0xc4>
 8005612:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 800591c <__ieee754_powf+0x3bc>
 8005616:	2c00      	cmp	r4, #0
 8005618:	bfa8      	it	ge
 800561a:	eeb0 0a68 	vmovge.f32	s0, s17
 800561e:	e7b7      	b.n	8005590 <__ieee754_powf+0x30>
 8005620:	2702      	movs	r7, #2
 8005622:	e7ee      	b.n	8005602 <__ieee754_powf+0xa2>
 8005624:	2c00      	cmp	r4, #0
 8005626:	f280 824a 	bge.w	8005abe <__ieee754_powf+0x55e>
 800562a:	eeb1 0a68 	vneg.f32	s0, s17
 800562e:	e7af      	b.n	8005590 <__ieee754_powf+0x30>
 8005630:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8005634:	d102      	bne.n	800563c <__ieee754_powf+0xdc>
 8005636:	ee28 0a08 	vmul.f32	s0, s16, s16
 800563a:	e7a9      	b.n	8005590 <__ieee754_powf+0x30>
 800563c:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8005640:	eeb0 0a48 	vmov.f32	s0, s16
 8005644:	d107      	bne.n	8005656 <__ieee754_powf+0xf6>
 8005646:	2e00      	cmp	r6, #0
 8005648:	db05      	blt.n	8005656 <__ieee754_powf+0xf6>
 800564a:	ecbd 8b02 	vpop	{d8}
 800564e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005652:	f000 ba53 	b.w	8005afc <__ieee754_sqrtf>
 8005656:	f000 fa77 	bl	8005b48 <fabsf>
 800565a:	b125      	cbz	r5, 8005666 <__ieee754_powf+0x106>
 800565c:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 8005660:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8005664:	d116      	bne.n	8005694 <__ieee754_powf+0x134>
 8005666:	2c00      	cmp	r4, #0
 8005668:	bfbc      	itt	lt
 800566a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800566e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8005672:	2e00      	cmp	r6, #0
 8005674:	da8c      	bge.n	8005590 <__ieee754_powf+0x30>
 8005676:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800567a:	ea55 0307 	orrs.w	r3, r5, r7
 800567e:	d104      	bne.n	800568a <__ieee754_powf+0x12a>
 8005680:	ee70 7a40 	vsub.f32	s15, s0, s0
 8005684:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8005688:	e782      	b.n	8005590 <__ieee754_powf+0x30>
 800568a:	2f01      	cmp	r7, #1
 800568c:	d180      	bne.n	8005590 <__ieee754_powf+0x30>
 800568e:	eeb1 0a40 	vneg.f32	s0, s0
 8005692:	e77d      	b.n	8005590 <__ieee754_powf+0x30>
 8005694:	0ff0      	lsrs	r0, r6, #31
 8005696:	3801      	subs	r0, #1
 8005698:	ea57 0300 	orrs.w	r3, r7, r0
 800569c:	d104      	bne.n	80056a8 <__ieee754_powf+0x148>
 800569e:	ee38 8a48 	vsub.f32	s16, s16, s16
 80056a2:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80056a6:	e773      	b.n	8005590 <__ieee754_powf+0x30>
 80056a8:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 80056ac:	dd74      	ble.n	8005798 <__ieee754_powf+0x238>
 80056ae:	4b9c      	ldr	r3, [pc, #624]	; (8005920 <__ieee754_powf+0x3c0>)
 80056b0:	429d      	cmp	r5, r3
 80056b2:	dc08      	bgt.n	80056c6 <__ieee754_powf+0x166>
 80056b4:	2c00      	cmp	r4, #0
 80056b6:	da0b      	bge.n	80056d0 <__ieee754_powf+0x170>
 80056b8:	2000      	movs	r0, #0
 80056ba:	ecbd 8b02 	vpop	{d8}
 80056be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056c2:	f000 ba3b 	b.w	8005b3c <__math_oflowf>
 80056c6:	4b97      	ldr	r3, [pc, #604]	; (8005924 <__ieee754_powf+0x3c4>)
 80056c8:	429d      	cmp	r5, r3
 80056ca:	dd08      	ble.n	80056de <__ieee754_powf+0x17e>
 80056cc:	2c00      	cmp	r4, #0
 80056ce:	dcf3      	bgt.n	80056b8 <__ieee754_powf+0x158>
 80056d0:	2000      	movs	r0, #0
 80056d2:	ecbd 8b02 	vpop	{d8}
 80056d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056da:	f000 ba29 	b.w	8005b30 <__math_uflowf>
 80056de:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80056e2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80056e6:	eddf 6a90 	vldr	s13, [pc, #576]	; 8005928 <__ieee754_powf+0x3c8>
 80056ea:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80056ee:	eee0 6a67 	vfms.f32	s13, s0, s15
 80056f2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80056f6:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80056fa:	ee20 7a00 	vmul.f32	s14, s0, s0
 80056fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005702:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800592c <__ieee754_powf+0x3cc>
 8005706:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800570a:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8005930 <__ieee754_powf+0x3d0>
 800570e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8005712:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8005934 <__ieee754_powf+0x3d4>
 8005716:	eef0 6a67 	vmov.f32	s13, s15
 800571a:	eee0 6a07 	vfma.f32	s13, s0, s14
 800571e:	ee16 3a90 	vmov	r3, s13
 8005722:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005726:	f023 030f 	bic.w	r3, r3, #15
 800572a:	ee00 3a90 	vmov	s1, r3
 800572e:	eee0 0a47 	vfms.f32	s1, s0, s14
 8005732:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8005736:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800573a:	f024 040f 	bic.w	r4, r4, #15
 800573e:	ee07 4a10 	vmov	s14, r4
 8005742:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8005746:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800574a:	ee07 3a90 	vmov	s15, r3
 800574e:	eee7 0a27 	vfma.f32	s1, s14, s15
 8005752:	3f01      	subs	r7, #1
 8005754:	ea57 0200 	orrs.w	r2, r7, r0
 8005758:	ee07 4a10 	vmov	s14, r4
 800575c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005760:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8005764:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8005768:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800576c:	ee17 4a10 	vmov	r4, s14
 8005770:	bf08      	it	eq
 8005772:	eeb0 8a40 	vmoveq.f32	s16, s0
 8005776:	2c00      	cmp	r4, #0
 8005778:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800577c:	f340 817e 	ble.w	8005a7c <__ieee754_powf+0x51c>
 8005780:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8005784:	f340 80f8 	ble.w	8005978 <__ieee754_powf+0x418>
 8005788:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800578c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005790:	bf4c      	ite	mi
 8005792:	2001      	movmi	r0, #1
 8005794:	2000      	movpl	r0, #0
 8005796:	e790      	b.n	80056ba <__ieee754_powf+0x15a>
 8005798:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800579c:	bf01      	itttt	eq
 800579e:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8005938 <__ieee754_powf+0x3d8>
 80057a2:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80057a6:	f06f 0217 	mvneq.w	r2, #23
 80057aa:	ee17 5a90 	vmoveq	r5, s15
 80057ae:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80057b2:	bf18      	it	ne
 80057b4:	2200      	movne	r2, #0
 80057b6:	3b7f      	subs	r3, #127	; 0x7f
 80057b8:	4413      	add	r3, r2
 80057ba:	4a60      	ldr	r2, [pc, #384]	; (800593c <__ieee754_powf+0x3dc>)
 80057bc:	f3c5 0516 	ubfx	r5, r5, #0, #23
 80057c0:	4295      	cmp	r5, r2
 80057c2:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 80057c6:	dd06      	ble.n	80057d6 <__ieee754_powf+0x276>
 80057c8:	4a5d      	ldr	r2, [pc, #372]	; (8005940 <__ieee754_powf+0x3e0>)
 80057ca:	4295      	cmp	r5, r2
 80057cc:	f340 80a4 	ble.w	8005918 <__ieee754_powf+0x3b8>
 80057d0:	3301      	adds	r3, #1
 80057d2:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80057d6:	2500      	movs	r5, #0
 80057d8:	4a5a      	ldr	r2, [pc, #360]	; (8005944 <__ieee754_powf+0x3e4>)
 80057da:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 80057de:	ee07 1a90 	vmov	s15, r1
 80057e2:	ed92 7a00 	vldr	s14, [r2]
 80057e6:	4a58      	ldr	r2, [pc, #352]	; (8005948 <__ieee754_powf+0x3e8>)
 80057e8:	ee37 6a27 	vadd.f32	s12, s14, s15
 80057ec:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80057f0:	eec5 6a86 	vdiv.f32	s13, s11, s12
 80057f4:	1049      	asrs	r1, r1, #1
 80057f6:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80057fa:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 80057fe:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8005802:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8005806:	ee06 1a10 	vmov	s12, r1
 800580a:	ee65 4a26 	vmul.f32	s9, s10, s13
 800580e:	ee36 7a47 	vsub.f32	s14, s12, s14
 8005812:	ee14 6a90 	vmov	r6, s9
 8005816:	4016      	ands	r6, r2
 8005818:	ee05 6a90 	vmov	s11, r6
 800581c:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8005820:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005824:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800594c <__ieee754_powf+0x3ec>
 8005828:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800582c:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8005830:	ee25 6a26 	vmul.f32	s12, s10, s13
 8005834:	eddf 6a46 	vldr	s13, [pc, #280]	; 8005950 <__ieee754_powf+0x3f0>
 8005838:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800583c:	eddf 6a45 	vldr	s13, [pc, #276]	; 8005954 <__ieee754_powf+0x3f4>
 8005840:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005844:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8005928 <__ieee754_powf+0x3c8>
 8005848:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800584c:	eddf 6a42 	vldr	s13, [pc, #264]	; 8005958 <__ieee754_powf+0x3f8>
 8005850:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005854:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800595c <__ieee754_powf+0x3fc>
 8005858:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800585c:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8005860:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8005864:	ee66 6a86 	vmul.f32	s13, s13, s12
 8005868:	eee5 6a07 	vfma.f32	s13, s10, s14
 800586c:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8005870:	eef0 7a45 	vmov.f32	s15, s10
 8005874:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8005878:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800587c:	ee17 1a90 	vmov	r1, s15
 8005880:	4011      	ands	r1, r2
 8005882:	ee07 1a90 	vmov	s15, r1
 8005886:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800588a:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800588e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8005892:	ee27 7a24 	vmul.f32	s14, s14, s9
 8005896:	eea6 7a27 	vfma.f32	s14, s12, s15
 800589a:	eeb0 6a47 	vmov.f32	s12, s14
 800589e:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80058a2:	ee16 1a10 	vmov	r1, s12
 80058a6:	4011      	ands	r1, r2
 80058a8:	ee06 1a90 	vmov	s13, r1
 80058ac:	eee5 6ae7 	vfms.f32	s13, s11, s15
 80058b0:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8005960 <__ieee754_powf+0x400>
 80058b4:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8005964 <__ieee754_powf+0x404>
 80058b8:	ee37 7a66 	vsub.f32	s14, s14, s13
 80058bc:	ee06 1a10 	vmov	s12, r1
 80058c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80058c4:	eddf 7a28 	vldr	s15, [pc, #160]	; 8005968 <__ieee754_powf+0x408>
 80058c8:	4928      	ldr	r1, [pc, #160]	; (800596c <__ieee754_powf+0x40c>)
 80058ca:	eea6 7a27 	vfma.f32	s14, s12, s15
 80058ce:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 80058d2:	edd1 7a00 	vldr	s15, [r1]
 80058d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80058da:	ee07 3a90 	vmov	s15, r3
 80058de:	4b24      	ldr	r3, [pc, #144]	; (8005970 <__ieee754_powf+0x410>)
 80058e0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80058e4:	eef0 7a47 	vmov.f32	s15, s14
 80058e8:	eee6 7a25 	vfma.f32	s15, s12, s11
 80058ec:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80058f0:	edd5 0a00 	vldr	s1, [r5]
 80058f4:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80058f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058fc:	ee17 3a90 	vmov	r3, s15
 8005900:	4013      	ands	r3, r2
 8005902:	ee07 3a90 	vmov	s15, r3
 8005906:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800590a:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800590e:	eee6 6a65 	vfms.f32	s13, s12, s11
 8005912:	ee77 7a66 	vsub.f32	s15, s14, s13
 8005916:	e70e      	b.n	8005736 <__ieee754_powf+0x1d6>
 8005918:	2501      	movs	r5, #1
 800591a:	e75d      	b.n	80057d8 <__ieee754_powf+0x278>
 800591c:	00000000 	.word	0x00000000
 8005920:	3f7ffff3 	.word	0x3f7ffff3
 8005924:	3f800007 	.word	0x3f800007
 8005928:	3eaaaaab 	.word	0x3eaaaaab
 800592c:	3fb8aa3b 	.word	0x3fb8aa3b
 8005930:	36eca570 	.word	0x36eca570
 8005934:	3fb8aa00 	.word	0x3fb8aa00
 8005938:	4b800000 	.word	0x4b800000
 800593c:	001cc471 	.word	0x001cc471
 8005940:	005db3d6 	.word	0x005db3d6
 8005944:	08005cbc 	.word	0x08005cbc
 8005948:	fffff000 	.word	0xfffff000
 800594c:	3e6c3255 	.word	0x3e6c3255
 8005950:	3e53f142 	.word	0x3e53f142
 8005954:	3e8ba305 	.word	0x3e8ba305
 8005958:	3edb6db7 	.word	0x3edb6db7
 800595c:	3f19999a 	.word	0x3f19999a
 8005960:	3f76384f 	.word	0x3f76384f
 8005964:	3f763800 	.word	0x3f763800
 8005968:	369dc3a0 	.word	0x369dc3a0
 800596c:	08005ccc 	.word	0x08005ccc
 8005970:	08005cc4 	.word	0x08005cc4
 8005974:	3338aa3c 	.word	0x3338aa3c
 8005978:	f040 8095 	bne.w	8005aa6 <__ieee754_powf+0x546>
 800597c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8005974 <__ieee754_powf+0x414>
 8005980:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005984:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8005988:	eef4 6ac7 	vcmpe.f32	s13, s14
 800598c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005990:	f73f aefa 	bgt.w	8005788 <__ieee754_powf+0x228>
 8005994:	15db      	asrs	r3, r3, #23
 8005996:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800599a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800599e:	4103      	asrs	r3, r0
 80059a0:	4423      	add	r3, r4
 80059a2:	494b      	ldr	r1, [pc, #300]	; (8005ad0 <__ieee754_powf+0x570>)
 80059a4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80059a8:	3a7f      	subs	r2, #127	; 0x7f
 80059aa:	4111      	asrs	r1, r2
 80059ac:	ea23 0101 	bic.w	r1, r3, r1
 80059b0:	ee07 1a10 	vmov	s14, r1
 80059b4:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80059b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80059bc:	f1c2 0217 	rsb	r2, r2, #23
 80059c0:	4110      	asrs	r0, r2
 80059c2:	2c00      	cmp	r4, #0
 80059c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80059c8:	bfb8      	it	lt
 80059ca:	4240      	neglt	r0, r0
 80059cc:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80059d0:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8005ad4 <__ieee754_powf+0x574>
 80059d4:	eddf 6a40 	vldr	s13, [pc, #256]	; 8005ad8 <__ieee754_powf+0x578>
 80059d8:	ee17 3a10 	vmov	r3, s14
 80059dc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80059e0:	f023 030f 	bic.w	r3, r3, #15
 80059e4:	ee07 3a10 	vmov	s14, r3
 80059e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059ec:	ee27 0a00 	vmul.f32	s0, s14, s0
 80059f0:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80059f4:	eddf 7a39 	vldr	s15, [pc, #228]	; 8005adc <__ieee754_powf+0x57c>
 80059f8:	eea0 0aa7 	vfma.f32	s0, s1, s15
 80059fc:	eef0 7a40 	vmov.f32	s15, s0
 8005a00:	eee7 7a26 	vfma.f32	s15, s14, s13
 8005a04:	eeb0 6a67 	vmov.f32	s12, s15
 8005a08:	eea7 6a66 	vfms.f32	s12, s14, s13
 8005a0c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005a10:	ee30 0a46 	vsub.f32	s0, s0, s12
 8005a14:	eddf 6a32 	vldr	s13, [pc, #200]	; 8005ae0 <__ieee754_powf+0x580>
 8005a18:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8005ae4 <__ieee754_powf+0x584>
 8005a1c:	eee7 6a06 	vfma.f32	s13, s14, s12
 8005a20:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8005ae8 <__ieee754_powf+0x588>
 8005a24:	eea6 6a87 	vfma.f32	s12, s13, s14
 8005a28:	eddf 6a30 	vldr	s13, [pc, #192]	; 8005aec <__ieee754_powf+0x58c>
 8005a2c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8005a30:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8005af0 <__ieee754_powf+0x590>
 8005a34:	eea6 6a87 	vfma.f32	s12, s13, s14
 8005a38:	eef0 6a67 	vmov.f32	s13, s15
 8005a3c:	eee6 6a47 	vfms.f32	s13, s12, s14
 8005a40:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005a44:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8005a48:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8005a4c:	eea7 0a80 	vfma.f32	s0, s15, s0
 8005a50:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8005a54:	ee37 0a40 	vsub.f32	s0, s14, s0
 8005a58:	ee70 7a67 	vsub.f32	s15, s0, s15
 8005a5c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005a60:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005a64:	ee10 3a10 	vmov	r3, s0
 8005a68:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8005a6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a70:	da1f      	bge.n	8005ab2 <__ieee754_powf+0x552>
 8005a72:	f000 f87d 	bl	8005b70 <scalbnf>
 8005a76:	ee20 0a08 	vmul.f32	s0, s0, s16
 8005a7a:	e589      	b.n	8005590 <__ieee754_powf+0x30>
 8005a7c:	4a1d      	ldr	r2, [pc, #116]	; (8005af4 <__ieee754_powf+0x594>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	dd07      	ble.n	8005a92 <__ieee754_powf+0x532>
 8005a82:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8005a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a8a:	bf4c      	ite	mi
 8005a8c:	2001      	movmi	r0, #1
 8005a8e:	2000      	movpl	r0, #0
 8005a90:	e61f      	b.n	80056d2 <__ieee754_powf+0x172>
 8005a92:	d108      	bne.n	8005aa6 <__ieee754_powf+0x546>
 8005a94:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005a98:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8005a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aa0:	f6ff af78 	blt.w	8005994 <__ieee754_powf+0x434>
 8005aa4:	e7ed      	b.n	8005a82 <__ieee754_powf+0x522>
 8005aa6:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8005aaa:	f73f af73 	bgt.w	8005994 <__ieee754_powf+0x434>
 8005aae:	2000      	movs	r0, #0
 8005ab0:	e78c      	b.n	80059cc <__ieee754_powf+0x46c>
 8005ab2:	ee00 3a10 	vmov	s0, r3
 8005ab6:	e7de      	b.n	8005a76 <__ieee754_powf+0x516>
 8005ab8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005abc:	e568      	b.n	8005590 <__ieee754_powf+0x30>
 8005abe:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8005af8 <__ieee754_powf+0x598>
 8005ac2:	e565      	b.n	8005590 <__ieee754_powf+0x30>
 8005ac4:	eeb0 0a48 	vmov.f32	s0, s16
 8005ac8:	e562      	b.n	8005590 <__ieee754_powf+0x30>
 8005aca:	2700      	movs	r7, #0
 8005acc:	e58d      	b.n	80055ea <__ieee754_powf+0x8a>
 8005ace:	bf00      	nop
 8005ad0:	007fffff 	.word	0x007fffff
 8005ad4:	35bfbe8c 	.word	0x35bfbe8c
 8005ad8:	3f317200 	.word	0x3f317200
 8005adc:	3f317218 	.word	0x3f317218
 8005ae0:	b5ddea0e 	.word	0xb5ddea0e
 8005ae4:	3331bb4c 	.word	0x3331bb4c
 8005ae8:	388ab355 	.word	0x388ab355
 8005aec:	bb360b61 	.word	0xbb360b61
 8005af0:	3e2aaaab 	.word	0x3e2aaaab
 8005af4:	43160000 	.word	0x43160000
 8005af8:	00000000 	.word	0x00000000

08005afc <__ieee754_sqrtf>:
 8005afc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8005b00:	4770      	bx	lr

08005b02 <with_errnof>:
 8005b02:	b513      	push	{r0, r1, r4, lr}
 8005b04:	4604      	mov	r4, r0
 8005b06:	ed8d 0a01 	vstr	s0, [sp, #4]
 8005b0a:	f7ff fc7b 	bl	8005404 <__errno>
 8005b0e:	ed9d 0a01 	vldr	s0, [sp, #4]
 8005b12:	6004      	str	r4, [r0, #0]
 8005b14:	b002      	add	sp, #8
 8005b16:	bd10      	pop	{r4, pc}

08005b18 <xflowf>:
 8005b18:	b130      	cbz	r0, 8005b28 <xflowf+0x10>
 8005b1a:	eef1 7a40 	vneg.f32	s15, s0
 8005b1e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005b22:	2022      	movs	r0, #34	; 0x22
 8005b24:	f7ff bfed 	b.w	8005b02 <with_errnof>
 8005b28:	eef0 7a40 	vmov.f32	s15, s0
 8005b2c:	e7f7      	b.n	8005b1e <xflowf+0x6>
	...

08005b30 <__math_uflowf>:
 8005b30:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005b38 <__math_uflowf+0x8>
 8005b34:	f7ff bff0 	b.w	8005b18 <xflowf>
 8005b38:	10000000 	.word	0x10000000

08005b3c <__math_oflowf>:
 8005b3c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005b44 <__math_oflowf+0x8>
 8005b40:	f7ff bfea 	b.w	8005b18 <xflowf>
 8005b44:	70000000 	.word	0x70000000

08005b48 <fabsf>:
 8005b48:	ee10 3a10 	vmov	r3, s0
 8005b4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b50:	ee00 3a10 	vmov	s0, r3
 8005b54:	4770      	bx	lr

08005b56 <finitef>:
 8005b56:	b082      	sub	sp, #8
 8005b58:	ed8d 0a01 	vstr	s0, [sp, #4]
 8005b5c:	9801      	ldr	r0, [sp, #4]
 8005b5e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005b62:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8005b66:	bfac      	ite	ge
 8005b68:	2000      	movge	r0, #0
 8005b6a:	2001      	movlt	r0, #1
 8005b6c:	b002      	add	sp, #8
 8005b6e:	4770      	bx	lr

08005b70 <scalbnf>:
 8005b70:	ee10 3a10 	vmov	r3, s0
 8005b74:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8005b78:	d025      	beq.n	8005bc6 <scalbnf+0x56>
 8005b7a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8005b7e:	d302      	bcc.n	8005b86 <scalbnf+0x16>
 8005b80:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005b84:	4770      	bx	lr
 8005b86:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8005b8a:	d122      	bne.n	8005bd2 <scalbnf+0x62>
 8005b8c:	4b2a      	ldr	r3, [pc, #168]	; (8005c38 <scalbnf+0xc8>)
 8005b8e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8005c3c <scalbnf+0xcc>
 8005b92:	4298      	cmp	r0, r3
 8005b94:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005b98:	db16      	blt.n	8005bc8 <scalbnf+0x58>
 8005b9a:	ee10 3a10 	vmov	r3, s0
 8005b9e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005ba2:	3a19      	subs	r2, #25
 8005ba4:	4402      	add	r2, r0
 8005ba6:	2afe      	cmp	r2, #254	; 0xfe
 8005ba8:	dd15      	ble.n	8005bd6 <scalbnf+0x66>
 8005baa:	ee10 3a10 	vmov	r3, s0
 8005bae:	eddf 7a24 	vldr	s15, [pc, #144]	; 8005c40 <scalbnf+0xd0>
 8005bb2:	eddf 6a24 	vldr	s13, [pc, #144]	; 8005c44 <scalbnf+0xd4>
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	eeb0 7a67 	vmov.f32	s14, s15
 8005bbc:	bfb8      	it	lt
 8005bbe:	eef0 7a66 	vmovlt.f32	s15, s13
 8005bc2:	ee27 0a27 	vmul.f32	s0, s14, s15
 8005bc6:	4770      	bx	lr
 8005bc8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8005c48 <scalbnf+0xd8>
 8005bcc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005bd0:	4770      	bx	lr
 8005bd2:	0dd2      	lsrs	r2, r2, #23
 8005bd4:	e7e6      	b.n	8005ba4 <scalbnf+0x34>
 8005bd6:	2a00      	cmp	r2, #0
 8005bd8:	dd06      	ble.n	8005be8 <scalbnf+0x78>
 8005bda:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005bde:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8005be2:	ee00 3a10 	vmov	s0, r3
 8005be6:	4770      	bx	lr
 8005be8:	f112 0f16 	cmn.w	r2, #22
 8005bec:	da1a      	bge.n	8005c24 <scalbnf+0xb4>
 8005bee:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005bf2:	4298      	cmp	r0, r3
 8005bf4:	ee10 3a10 	vmov	r3, s0
 8005bf8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bfc:	dd0a      	ble.n	8005c14 <scalbnf+0xa4>
 8005bfe:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8005c40 <scalbnf+0xd0>
 8005c02:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005c44 <scalbnf+0xd4>
 8005c06:	eef0 7a40 	vmov.f32	s15, s0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	bf18      	it	ne
 8005c0e:	eeb0 0a47 	vmovne.f32	s0, s14
 8005c12:	e7db      	b.n	8005bcc <scalbnf+0x5c>
 8005c14:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8005c48 <scalbnf+0xd8>
 8005c18:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8005c4c <scalbnf+0xdc>
 8005c1c:	eef0 7a40 	vmov.f32	s15, s0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	e7f3      	b.n	8005c0c <scalbnf+0x9c>
 8005c24:	3219      	adds	r2, #25
 8005c26:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005c2a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8005c2e:	eddf 7a08 	vldr	s15, [pc, #32]	; 8005c50 <scalbnf+0xe0>
 8005c32:	ee07 3a10 	vmov	s14, r3
 8005c36:	e7c4      	b.n	8005bc2 <scalbnf+0x52>
 8005c38:	ffff3cb0 	.word	0xffff3cb0
 8005c3c:	4c000000 	.word	0x4c000000
 8005c40:	7149f2ca 	.word	0x7149f2ca
 8005c44:	f149f2ca 	.word	0xf149f2ca
 8005c48:	0da24260 	.word	0x0da24260
 8005c4c:	8da24260 	.word	0x8da24260
 8005c50:	33000000 	.word	0x33000000

08005c54 <_init>:
 8005c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c56:	bf00      	nop
 8005c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c5a:	bc08      	pop	{r3}
 8005c5c:	469e      	mov	lr, r3
 8005c5e:	4770      	bx	lr

08005c60 <_fini>:
 8005c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c62:	bf00      	nop
 8005c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c66:	bc08      	pop	{r3}
 8005c68:	469e      	mov	lr, r3
 8005c6a:	4770      	bx	lr
